
controlador.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e28  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08004f38  08004f38  00005f38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005150  08005150  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005150  08005150  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005150  08005150  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005150  08005150  00006150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005154  08005154  00006154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005158  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08005164  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08005164  000070e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092e1  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c4  00000000  00000000  00010316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  00011ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080c  00000000  00000000  00012750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c11  00000000  00000000  00012f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b01f  00000000  00000000  0002ab6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd2d  00000000  00000000  00035b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c28b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003008  00000000  00000000  000c28fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000c5904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f20 	.word	0x08004f20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004f20 	.word	0x08004f20

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_d2iz>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b6c:	d215      	bcs.n	8000b9a <__aeabi_d2iz+0x36>
 8000b6e:	d511      	bpl.n	8000b94 <__aeabi_d2iz+0x30>
 8000b70:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b78:	d912      	bls.n	8000ba0 <__aeabi_d2iz+0x3c>
 8000b7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b86:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d105      	bne.n	8000bac <__aeabi_d2iz+0x48>
 8000ba0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba4:	bf08      	it	eq
 8000ba6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_frsub>:
 8000c54:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	e002      	b.n	8000c60 <__addsf3>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_fsub>:
 8000c5c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c60 <__addsf3>:
 8000c60:	0042      	lsls	r2, r0, #1
 8000c62:	bf1f      	itttt	ne
 8000c64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c68:	ea92 0f03 	teqne	r2, r3
 8000c6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c74:	d06a      	beq.n	8000d4c <__addsf3+0xec>
 8000c76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c7e:	bfc1      	itttt	gt
 8000c80:	18d2      	addgt	r2, r2, r3
 8000c82:	4041      	eorgt	r1, r0
 8000c84:	4048      	eorgt	r0, r1
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	bfb8      	it	lt
 8000c8a:	425b      	neglt	r3, r3
 8000c8c:	2b19      	cmp	r3, #25
 8000c8e:	bf88      	it	hi
 8000c90:	4770      	bxhi	lr
 8000c92:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c9a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c9e:	bf18      	it	ne
 8000ca0:	4240      	negne	r0, r0
 8000ca2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ca6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000caa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cae:	bf18      	it	ne
 8000cb0:	4249      	negne	r1, r1
 8000cb2:	ea92 0f03 	teq	r2, r3
 8000cb6:	d03f      	beq.n	8000d38 <__addsf3+0xd8>
 8000cb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cbc:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc0:	eb10 000c 	adds.w	r0, r0, ip
 8000cc4:	f1c3 0320 	rsb	r3, r3, #32
 8000cc8:	fa01 f103 	lsl.w	r1, r1, r3
 8000ccc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__addsf3+0x78>
 8000cd2:	4249      	negs	r1, r1
 8000cd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cd8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cdc:	d313      	bcc.n	8000d06 <__addsf3+0xa6>
 8000cde:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ce2:	d306      	bcc.n	8000cf2 <__addsf3+0x92>
 8000ce4:	0840      	lsrs	r0, r0, #1
 8000ce6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cea:	f102 0201 	add.w	r2, r2, #1
 8000cee:	2afe      	cmp	r2, #254	@ 0xfe
 8000cf0:	d251      	bcs.n	8000d96 <__addsf3+0x136>
 8000cf2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	ea40 0003 	orr.w	r0, r0, r3
 8000d04:	4770      	bx	lr
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	eb40 0000 	adc.w	r0, r0, r0
 8000d0c:	3a01      	subs	r2, #1
 8000d0e:	bf28      	it	cs
 8000d10:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d14:	d2ed      	bcs.n	8000cf2 <__addsf3+0x92>
 8000d16:	fab0 fc80 	clz	ip, r0
 8000d1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d26:	bfaa      	itet	ge
 8000d28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d2c:	4252      	neglt	r2, r2
 8000d2e:	4318      	orrge	r0, r3
 8000d30:	bfbc      	itt	lt
 8000d32:	40d0      	lsrlt	r0, r2
 8000d34:	4318      	orrlt	r0, r3
 8000d36:	4770      	bx	lr
 8000d38:	f092 0f00 	teq	r2, #0
 8000d3c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d40:	bf06      	itte	eq
 8000d42:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d46:	3201      	addeq	r2, #1
 8000d48:	3b01      	subne	r3, #1
 8000d4a:	e7b5      	b.n	8000cb8 <__addsf3+0x58>
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d021      	beq.n	8000da0 <__addsf3+0x140>
 8000d5c:	ea92 0f03 	teq	r2, r3
 8000d60:	d004      	beq.n	8000d6c <__addsf3+0x10c>
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	bf08      	it	eq
 8000d68:	4608      	moveq	r0, r1
 8000d6a:	4770      	bx	lr
 8000d6c:	ea90 0f01 	teq	r0, r1
 8000d70:	bf1c      	itt	ne
 8000d72:	2000      	movne	r0, #0
 8000d74:	4770      	bxne	lr
 8000d76:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d7a:	d104      	bne.n	8000d86 <__addsf3+0x126>
 8000d7c:	0040      	lsls	r0, r0, #1
 8000d7e:	bf28      	it	cs
 8000d80:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d8a:	bf3c      	itt	cc
 8000d8c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d90:	4770      	bxcc	lr
 8000d92:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d96:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da4:	bf16      	itet	ne
 8000da6:	4608      	movne	r0, r1
 8000da8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dac:	4601      	movne	r1, r0
 8000dae:	0242      	lsls	r2, r0, #9
 8000db0:	bf06      	itte	eq
 8000db2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000db6:	ea90 0f01 	teqeq	r0, r1
 8000dba:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_ui2f>:
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e004      	b.n	8000dd0 <__aeabi_i2f+0x8>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_i2f>:
 8000dc8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dcc:	bf48      	it	mi
 8000dce:	4240      	negmi	r0, r0
 8000dd0:	ea5f 0c00 	movs.w	ip, r0
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ddc:	4601      	mov	r1, r0
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	e01c      	b.n	8000e1e <__aeabi_l2f+0x2a>

08000de4 <__aeabi_ul2f>:
 8000de4:	ea50 0201 	orrs.w	r2, r0, r1
 8000de8:	bf08      	it	eq
 8000dea:	4770      	bxeq	lr
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e00a      	b.n	8000e08 <__aeabi_l2f+0x14>
 8000df2:	bf00      	nop

08000df4 <__aeabi_l2f>:
 8000df4:	ea50 0201 	orrs.w	r2, r0, r1
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e00:	d502      	bpl.n	8000e08 <__aeabi_l2f+0x14>
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	ea5f 0c01 	movs.w	ip, r1
 8000e0c:	bf02      	ittt	eq
 8000e0e:	4684      	moveq	ip, r0
 8000e10:	4601      	moveq	r1, r0
 8000e12:	2000      	moveq	r0, #0
 8000e14:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e18:	bf08      	it	eq
 8000e1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e1e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e22:	fabc f28c 	clz	r2, ip
 8000e26:	3a08      	subs	r2, #8
 8000e28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e2c:	db10      	blt.n	8000e50 <__aeabi_l2f+0x5c>
 8000e2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e32:	4463      	add	r3, ip
 8000e34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e38:	f1c2 0220 	rsb	r2, r2, #32
 8000e3c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e40:	fa20 f202 	lsr.w	r2, r0, r2
 8000e44:	eb43 0002 	adc.w	r0, r3, r2
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f102 0220 	add.w	r2, r2, #32
 8000e54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e58:	f1c2 0220 	rsb	r2, r2, #32
 8000e5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e60:	fa21 f202 	lsr.w	r2, r1, r2
 8000e64:	eb43 0002 	adc.w	r0, r3, r2
 8000e68:	bf08      	it	eq
 8000e6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e6e:	4770      	bx	lr

08000e70 <__gesf2>:
 8000e70:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000e74:	e006      	b.n	8000e84 <__cmpsf2+0x4>
 8000e76:	bf00      	nop

08000e78 <__lesf2>:
 8000e78:	f04f 0c01 	mov.w	ip, #1
 8000e7c:	e002      	b.n	8000e84 <__cmpsf2+0x4>
 8000e7e:	bf00      	nop

08000e80 <__cmpsf2>:
 8000e80:	f04f 0c01 	mov.w	ip, #1
 8000e84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e94:	bf18      	it	ne
 8000e96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e9a:	d011      	beq.n	8000ec0 <__cmpsf2+0x40>
 8000e9c:	b001      	add	sp, #4
 8000e9e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ea2:	bf18      	it	ne
 8000ea4:	ea90 0f01 	teqne	r0, r1
 8000ea8:	bf58      	it	pl
 8000eaa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eae:	bf88      	it	hi
 8000eb0:	17c8      	asrhi	r0, r1, #31
 8000eb2:	bf38      	it	cc
 8000eb4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb8:	bf18      	it	ne
 8000eba:	f040 0001 	orrne.w	r0, r0, #1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec4:	d102      	bne.n	8000ecc <__cmpsf2+0x4c>
 8000ec6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eca:	d105      	bne.n	8000ed8 <__cmpsf2+0x58>
 8000ecc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ed0:	d1e4      	bne.n	8000e9c <__cmpsf2+0x1c>
 8000ed2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ed6:	d0e1      	beq.n	8000e9c <__cmpsf2+0x1c>
 8000ed8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_cfrcmple>:
 8000ee0:	4684      	mov	ip, r0
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	4661      	mov	r1, ip
 8000ee6:	e7ff      	b.n	8000ee8 <__aeabi_cfcmpeq>

08000ee8 <__aeabi_cfcmpeq>:
 8000ee8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000eea:	f7ff ffc9 	bl	8000e80 <__cmpsf2>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	bf48      	it	mi
 8000ef2:	f110 0f00 	cmnmi.w	r0, #0
 8000ef6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef8 <__aeabi_fcmpeq>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff fff4 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f00:	bf0c      	ite	eq
 8000f02:	2001      	moveq	r0, #1
 8000f04:	2000      	movne	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmplt>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffea 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f14:	bf34      	ite	cc
 8000f16:	2001      	movcc	r0, #1
 8000f18:	2000      	movcs	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmple>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffe0 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f28:	bf94      	ite	ls
 8000f2a:	2001      	movls	r0, #1
 8000f2c:	2000      	movhi	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpge>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffd2 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f3c:	bf94      	ite	ls
 8000f3e:	2001      	movls	r0, #1
 8000f40:	2000      	movhi	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmpgt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffc8 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_f2iz>:
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f64:	d30f      	bcc.n	8000f86 <__aeabi_f2iz+0x2a>
 8000f66:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6e:	d90d      	bls.n	8000f8c <__aeabi_f2iz+0x30>
 8000f70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f78:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f7c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f80:	bf18      	it	ne
 8000f82:	4240      	negne	r0, r0
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr
 8000f8c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f90:	d101      	bne.n	8000f96 <__aeabi_f2iz+0x3a>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	d105      	bne.n	8000fa2 <__aeabi_f2iz+0x46>
 8000f96:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f9a:	bf08      	it	eq
 8000f9c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f000 fbb0 	bl	8001710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f818 	bl	8000fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f000 f922 	bl	80011fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fb8:	f000 f86c 	bl	8001094 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000fbc:	f000 f8a8 	bl	8001110 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000fc0:	4806      	ldr	r0, [pc, #24]	@ (8000fdc <main+0x34>)
 8000fc2:	f002 f8a9 	bl	8003118 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <main+0x34>)
 8000fca:	f002 f94f 	bl	800326c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 8000fce:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <main+0x38>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4b02      	ldr	r3, [pc, #8]	@ (8000fdc <main+0x34>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fd8:	e7f9      	b.n	8000fce <main+0x26>
 8000fda:	bf00      	nop
 8000fdc:	20000058 	.word	0x20000058
 8000fe0:	200000d8 	.word	0x200000d8

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b094      	sub	sp, #80	@ 0x50
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fee:	2228      	movs	r2, #40	@ 0x28
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 ff9a 	bl	8003f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001014:	2301      	movs	r3, #1
 8001016:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001018:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800101c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001022:	2301      	movs	r3, #1
 8001024:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001026:	2302      	movs	r3, #2
 8001028:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800102e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001030:	2300      	movs	r3, #0
 8001032:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001034:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001038:	4618      	mov	r0, r3
 800103a:	f001 fab5 	bl	80025a8 <HAL_RCC_OscConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001044:	f000 fa3a 	bl	80014bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001048:	230f      	movs	r3, #15
 800104a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104c:	2302      	movs	r3, #2
 800104e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f001 fd22 	bl	8002aac <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800106e:	f000 fa25 	bl	80014bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001072:	2302      	movs	r3, #2
 8001074:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	4618      	mov	r0, r3
 800107e:	f001 fe8f 	bl	8002da0 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001088:	f000 fa18 	bl	80014bc <Error_Handler>
  }
}
 800108c:	bf00      	nop
 800108e:	3750      	adds	r7, #80	@ 0x50
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010a4:	4b18      	ldr	r3, [pc, #96]	@ (8001108 <MX_ADC1_Init+0x74>)
 80010a6:	4a19      	ldr	r2, [pc, #100]	@ (800110c <MX_ADC1_Init+0x78>)
 80010a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010aa:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <MX_ADC1_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010b0:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <MX_ADC1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b6:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <MX_ADC1_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010bc:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <MX_ADC1_Init+0x74>)
 80010be:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80010c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c4:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <MX_ADC1_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80010ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <MX_ADC1_Init+0x74>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d0:	480d      	ldr	r0, [pc, #52]	@ (8001108 <MX_ADC1_Init+0x74>)
 80010d2:	f000 fb7f 	bl	80017d4 <HAL_ADC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80010dc:	f000 f9ee 	bl	80014bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	@ (8001108 <MX_ADC1_Init+0x74>)
 80010f2:	f000 fe33 	bl	8001d5c <HAL_ADC_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80010fc:	f000 f9de 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000028 	.word	0x20000028
 800110c:	40012400 	.word	0x40012400

08001110 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08e      	sub	sp, #56	@ 0x38
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	f107 0320 	add.w	r3, r7, #32
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]
 800113e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001140:	4b2d      	ldr	r3, [pc, #180]	@ (80011f8 <MX_TIM2_Init+0xe8>)
 8001142:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001146:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001148:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <MX_TIM2_Init+0xe8>)
 800114a:	2200      	movs	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114e:	4b2a      	ldr	r3, [pc, #168]	@ (80011f8 <MX_TIM2_Init+0xe8>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200-1;
 8001154:	4b28      	ldr	r3, [pc, #160]	@ (80011f8 <MX_TIM2_Init+0xe8>)
 8001156:	f640 427f 	movw	r2, #3199	@ 0xc7f
 800115a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115c:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <MX_TIM2_Init+0xe8>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001162:	4b25      	ldr	r3, [pc, #148]	@ (80011f8 <MX_TIM2_Init+0xe8>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001168:	4823      	ldr	r0, [pc, #140]	@ (80011f8 <MX_TIM2_Init+0xe8>)
 800116a:	f001 ff85 	bl	8003078 <HAL_TIM_Base_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001174:	f000 f9a2 	bl	80014bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800117c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800117e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001182:	4619      	mov	r1, r3
 8001184:	481c      	ldr	r0, [pc, #112]	@ (80011f8 <MX_TIM2_Init+0xe8>)
 8001186:	f002 fac5 	bl	8003714 <HAL_TIM_ConfigClockSource>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001190:	f000 f994 	bl	80014bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001194:	4818      	ldr	r0, [pc, #96]	@ (80011f8 <MX_TIM2_Init+0xe8>)
 8001196:	f002 f811 	bl	80031bc <HAL_TIM_PWM_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80011a0:	f000 f98c 	bl	80014bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	4619      	mov	r1, r3
 80011b2:	4811      	ldr	r0, [pc, #68]	@ (80011f8 <MX_TIM2_Init+0xe8>)
 80011b4:	f002 fe4a 	bl	8003e4c <HAL_TIMEx_MasterConfigSynchronization>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80011be:	f000 f97d 	bl	80014bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c2:	2360      	movs	r3, #96	@ 0x60
 80011c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2200      	movs	r2, #0
 80011d6:	4619      	mov	r1, r3
 80011d8:	4807      	ldr	r0, [pc, #28]	@ (80011f8 <MX_TIM2_Init+0xe8>)
 80011da:	f002 f9d9 	bl	8003590 <HAL_TIM_PWM_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80011e4:	f000 f96a 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011e8:	4803      	ldr	r0, [pc, #12]	@ (80011f8 <MX_TIM2_Init+0xe8>)
 80011ea:	f000 f9ff 	bl	80015ec <HAL_TIM_MspPostInit>

}
 80011ee:	bf00      	nop
 80011f0:	3738      	adds	r7, #56	@ 0x38
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000058 	.word	0x20000058

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_GPIO_Init+0x40>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <MX_GPIO_Init+0x40>)
 8001208:	f043 0320 	orr.w	r3, r3, #32
 800120c:	6193      	str	r3, [r2, #24]
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <MX_GPIO_Init+0x40>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 0320 	and.w	r3, r3, #32
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <MX_GPIO_Init+0x40>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	4a07      	ldr	r2, [pc, #28]	@ (800123c <MX_GPIO_Init+0x40>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6193      	str	r3, [r2, #24]
 8001226:	4b05      	ldr	r3, [pc, #20]	@ (800123c <MX_GPIO_Init+0x40>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	40021000 	.word	0x40021000

08001240 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001250:	f040 8106 	bne.w	8001460 <HAL_TIM_PeriodElapsedCallback+0x220>
	{
		prev_transductor_val = transductor_input[(curr_idx - 1 + ARRAY_MAX_SIZE) % ARRAY_MAX_SIZE];
 8001254:	4b86      	ldr	r3, [pc, #536]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	1c99      	adds	r1, r3, #2
 800125a:	4b86      	ldr	r3, [pc, #536]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800125c:	fb83 3201 	smull	r3, r2, r3, r1
 8001260:	17cb      	asrs	r3, r1, #31
 8001262:	1ad2      	subs	r2, r2, r3
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	1aca      	subs	r2, r1, r3
 800126c:	4b82      	ldr	r3, [pc, #520]	@ (8001478 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800126e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001272:	4a82      	ldr	r2, [pc, #520]	@ (800147c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001274:	6013      	str	r3, [r2, #0]
//		ref_signal[curr_idx] = OFFSET + A * sin(2 * PI * F * Ts * curr_idx);
		ref_signal = OFFSET + A * sin(2 * PI * F * Ts * curr_idx);
 8001276:	4b7e      	ldr	r3, [pc, #504]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fda4 	bl	8000dc8 <__aeabi_i2f>
 8001280:	4603      	mov	r3, r0
 8001282:	497f      	ldr	r1, [pc, #508]	@ (8001480 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001284:	4618      	mov	r0, r3
 8001286:	f7fe ff63 	bl	8000150 <__aeabi_fmul>
 800128a:	4603      	mov	r3, r0
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f977 	bl	8000580 <__aeabi_f2d>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f002 fe73 	bl	8003f84 <sin>
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	4b78      	ldr	r3, [pc, #480]	@ (8001484 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80012a4:	f7ff f9c4 	bl	8000630 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b74      	ldr	r3, [pc, #464]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012b6:	f7ff f805 	bl	80002c4 <__adddf3>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fc77 	bl	8000bb4 <__aeabi_d2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a70      	ldr	r2, [pc, #448]	@ (800148c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80012ca:	6013      	str	r3, [r2, #0]
		error[curr_idx] = ref_signal - prev_transductor_val;
 80012cc:	4b6f      	ldr	r3, [pc, #444]	@ (800148c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a6a      	ldr	r2, [pc, #424]	@ (800147c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	4966      	ldr	r1, [pc, #408]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80012d6:	680c      	ldr	r4, [r1, #0]
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fcbe 	bl	8000c5c <__aeabi_fsub>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001490 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80012e6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

		// Inicia a conversão ADC
		HAL_ADC_Start(&hadc1);
 80012ea:	486a      	ldr	r0, [pc, #424]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80012ec:	f000 fb4a 	bl	8001984 <HAL_ADC_Start>

		// Espera a conversão estar pronta (timeout opcional)
		if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 80012f0:	210a      	movs	r1, #10
 80012f2:	4868      	ldr	r0, [pc, #416]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80012f4:	f000 fc20 	bl	8001b38 <HAL_ADC_PollForConversion>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f040 80ad 	bne.w	800145a <HAL_TIM_PeriodElapsedCallback+0x21a>
		{
			transductor_input[curr_idx] = HAL_ADC_GetValue(&hadc1) * ADC_SCALE_FACTOR / TRANSDUCTOR_GAIN;
 8001300:	4864      	ldr	r0, [pc, #400]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001302:	f000 fd1f 	bl	8001d44 <HAL_ADC_GetValue>
 8001306:	4603      	mov	r3, r0
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fd59 	bl	8000dc0 <__aeabi_ui2f>
 800130e:	4603      	mov	r3, r0
 8001310:	4961      	ldr	r1, [pc, #388]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001312:	4618      	mov	r0, r3
 8001314:	f7fe ff1c 	bl	8000150 <__aeabi_fmul>
 8001318:	4603      	mov	r3, r0
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f930 	bl	8000580 <__aeabi_f2d>
 8001320:	a351      	add	r3, pc, #324	@ (adr r3, 8001468 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f7ff faad 	bl	8000884 <__aeabi_ddiv>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4950      	ldr	r1, [pc, #320]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001330:	680c      	ldr	r4, [r1, #0]
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f7ff fc3d 	bl	8000bb4 <__aeabi_d2f>
 800133a:	4603      	mov	r3, r0
 800133c:	4a4e      	ldr	r2, [pc, #312]	@ (8001478 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800133e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

			// u(k) = u(k-1) + Kp*e(k) - Kp*Ki*e(k-1);
			prev_pid_output = pid_output[(curr_idx - 1 + ARRAY_MAX_SIZE) % ARRAY_MAX_SIZE];
 8001342:	4b4b      	ldr	r3, [pc, #300]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	1c99      	adds	r1, r3, #2
 8001348:	4b4a      	ldr	r3, [pc, #296]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800134a:	fb83 3201 	smull	r3, r2, r3, r1
 800134e:	17cb      	asrs	r3, r1, #31
 8001350:	1ad2      	subs	r2, r2, r3
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	1aca      	subs	r2, r1, r3
 800135a:	4b50      	ldr	r3, [pc, #320]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800135c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001360:	4a4f      	ldr	r2, [pc, #316]	@ (80014a0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001362:	6013      	str	r3, [r2, #0]
			prev_error = error[(curr_idx - 1 + ARRAY_MAX_SIZE) % ARRAY_MAX_SIZE];
 8001364:	4b42      	ldr	r3, [pc, #264]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	1c99      	adds	r1, r3, #2
 800136a:	4b42      	ldr	r3, [pc, #264]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800136c:	fb83 3201 	smull	r3, r2, r3, r1
 8001370:	17cb      	asrs	r3, r1, #31
 8001372:	1ad2      	subs	r2, r2, r3
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	1aca      	subs	r2, r1, r3
 800137c:	4b44      	ldr	r3, [pc, #272]	@ (8001490 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800137e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001382:	4a48      	ldr	r2, [pc, #288]	@ (80014a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001384:	6013      	str	r3, [r2, #0]

			pid_output[curr_idx] = prev_pid_output + Kp*error[curr_idx] - Kp*Ki*prev_error;
 8001386:	4b3a      	ldr	r3, [pc, #232]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a41      	ldr	r2, [pc, #260]	@ (8001490 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800138c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001390:	4945      	ldr	r1, [pc, #276]	@ (80014a8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001392:	4618      	mov	r0, r3
 8001394:	f7fe fedc 	bl	8000150 <__aeabi_fmul>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b40      	ldr	r3, [pc, #256]	@ (80014a0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	4610      	mov	r0, r2
 80013a4:	f7ff fc5c 	bl	8000c60 <__addsf3>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461d      	mov	r5, r3
 80013ac:	4b3d      	ldr	r3, [pc, #244]	@ (80014a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	493e      	ldr	r1, [pc, #248]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7fe fecc 	bl	8000150 <__aeabi_fmul>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80013be:	681c      	ldr	r4, [r3, #0]
 80013c0:	4611      	mov	r1, r2
 80013c2:	4628      	mov	r0, r5
 80013c4:	f7ff fc4a 	bl	8000c5c <__aeabi_fsub>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b33      	ldr	r3, [pc, #204]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80013ce:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

			if(pid_output[curr_idx] < 0){
 80013d2:	4b27      	ldr	r3, [pc, #156]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a31      	ldr	r2, [pc, #196]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80013d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013dc:	f04f 0100 	mov.w	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fd93 	bl	8000f0c <__aeabi_fcmplt>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d007      	beq.n	80013fc <HAL_TIM_PeriodElapsedCallback+0x1bc>
				pid_output[curr_idx] = 0;
 80013ec:	4b20      	ldr	r3, [pc, #128]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a2a      	ldr	r2, [pc, #168]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80013f2:	f04f 0100 	mov.w	r1, #0
 80013f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80013fa:	e011      	b.n	8001420 <HAL_TIM_PeriodElapsedCallback+0x1e0>
			}
			else if(pid_output[curr_idx] > E){
 80013fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a26      	ldr	r2, [pc, #152]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	492a      	ldr	r1, [pc, #168]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fd9d 	bl	8000f48 <__aeabi_fcmpgt>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <HAL_TIM_PeriodElapsedCallback+0x1e0>
				pid_output[curr_idx] = E;
 8001414:	4b16      	ldr	r3, [pc, #88]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a20      	ldr	r2, [pc, #128]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800141a:	4925      	ldr	r1, [pc, #148]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800141c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			duty_cycle = pid_output[curr_idx] * DUTY_CICLE_CONST;
 8001420:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1d      	ldr	r2, [pc, #116]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	4922      	ldr	r1, [pc, #136]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800142c:	4618      	mov	r0, r3
 800142e:	f7fe fe8f 	bl	8000150 <__aeabi_fmul>
 8001432:	4603      	mov	r3, r0
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fd91 	bl	8000f5c <__aeabi_f2iz>
 800143a:	4603      	mov	r3, r0
 800143c:	4a1e      	ldr	r2, [pc, #120]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800143e:	6013      	str	r3, [r2, #0]

			if(curr_idx < ARRAY_MAX_SIZE){
 8001440:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b02      	cmp	r3, #2
 8001446:	dc05      	bgt.n	8001454 <HAL_TIM_PeriodElapsedCallback+0x214>
				curr_idx++;
 8001448:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	4a08      	ldr	r2, [pc, #32]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e002      	b.n	800145a <HAL_TIM_PeriodElapsedCallback+0x21a>
			}
			else{
				curr_idx = 0;
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
			}
		}
		HAL_ADC_Stop(&hadc1);
 800145a:	480e      	ldr	r0, [pc, #56]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800145c:	f000 fb40 	bl	8001ae0 <HAL_ADC_Stop>
	}
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bdb0      	pop	{r4, r5, r7, pc}
 8001468:	9999999a 	.word	0x9999999a
 800146c:	3fc19999 	.word	0x3fc19999
 8001470:	200000a0 	.word	0x200000a0
 8001474:	55555556 	.word	0x55555556
 8001478:	200000a8 	.word	0x200000a8
 800147c:	200000b4 	.word	0x200000b4
 8001480:	3d80adfd 	.word	0x3d80adfd
 8001484:	40180000 	.word	0x40180000
 8001488:	40280000 	.word	0x40280000
 800148c:	200000a4 	.word	0x200000a4
 8001490:	200000b8 	.word	0x200000b8
 8001494:	20000028 	.word	0x20000028
 8001498:	3a533333 	.word	0x3a533333
 800149c:	200000c8 	.word	0x200000c8
 80014a0:	200000d4 	.word	0x200000d4
 80014a4:	200000c4 	.word	0x200000c4
 80014a8:	3da3d70a 	.word	0x3da3d70a
 80014ac:	3ad1b717 	.word	0x3ad1b717
 80014b0:	41c00000 	.word	0x41c00000
 80014b4:	43055555 	.word	0x43055555
 80014b8:	200000d8 	.word	0x200000d8

080014bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c0:	b672      	cpsid	i
}
 80014c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <Error_Handler+0x8>

080014c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <HAL_MspInit+0x5c>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	4a14      	ldr	r2, [pc, #80]	@ (8001524 <HAL_MspInit+0x5c>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6193      	str	r3, [r2, #24]
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_MspInit+0x5c>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <HAL_MspInit+0x5c>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001524 <HAL_MspInit+0x5c>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f0:	61d3      	str	r3, [r2, #28]
 80014f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <HAL_MspInit+0x5c>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <HAL_MspInit+0x60>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <HAL_MspInit+0x60>)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40021000 	.word	0x40021000
 8001528:	40010000 	.word	0x40010000

0800152c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a14      	ldr	r2, [pc, #80]	@ (8001598 <HAL_ADC_MspInit+0x6c>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d121      	bne.n	8001590 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800154c:	4b13      	ldr	r3, [pc, #76]	@ (800159c <HAL_ADC_MspInit+0x70>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a12      	ldr	r2, [pc, #72]	@ (800159c <HAL_ADC_MspInit+0x70>)
 8001552:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b10      	ldr	r3, [pc, #64]	@ (800159c <HAL_ADC_MspInit+0x70>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <HAL_ADC_MspInit+0x70>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a0c      	ldr	r2, [pc, #48]	@ (800159c <HAL_ADC_MspInit+0x70>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_ADC_MspInit+0x70>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800157c:	2302      	movs	r3, #2
 800157e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001580:	2303      	movs	r3, #3
 8001582:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4619      	mov	r1, r3
 800158a:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <HAL_ADC_MspInit+0x74>)
 800158c:	f000 fe88 	bl	80022a0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001590:	bf00      	nop
 8001592:	3720      	adds	r7, #32
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40012400 	.word	0x40012400
 800159c:	40021000 	.word	0x40021000
 80015a0:	40010800 	.word	0x40010800

080015a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015b4:	d113      	bne.n	80015de <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015b6:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <HAL_TIM_Base_MspInit+0x44>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	4a0b      	ldr	r2, [pc, #44]	@ (80015e8 <HAL_TIM_Base_MspInit+0x44>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	61d3      	str	r3, [r2, #28]
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <HAL_TIM_Base_MspInit+0x44>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	201c      	movs	r0, #28
 80015d4:	f000 fe2d 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015d8:	201c      	movs	r0, #28
 80015da:	f000 fe46 	bl	800226a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000

080015ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800160a:	d117      	bne.n	800163c <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160c:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <HAL_TIM_MspPostInit+0x58>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a0c      	ldr	r2, [pc, #48]	@ (8001644 <HAL_TIM_MspPostInit+0x58>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <HAL_TIM_MspPostInit+0x58>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001624:	2301      	movs	r3, #1
 8001626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2302      	movs	r3, #2
 800162e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	4619      	mov	r1, r3
 8001636:	4804      	ldr	r0, [pc, #16]	@ (8001648 <HAL_TIM_MspPostInit+0x5c>)
 8001638:	f000 fe32 	bl	80022a0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40021000 	.word	0x40021000
 8001648:	40010800 	.word	0x40010800

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <NMI_Handler+0x4>

08001654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <MemManage_Handler+0x4>

08001664 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <UsageFault_Handler+0x4>

08001674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169c:	f000 f87e 	bl	800179c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <TIM2_IRQHandler+0x10>)
 80016aa:	f001 fe81 	bl	80033b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000058 	.word	0x20000058

080016b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <Reset_Handler>:
 80016c4:	f7ff fff8 	bl	80016b8 <SystemInit>
 80016c8:	480b      	ldr	r0, [pc, #44]	@ (80016f8 <LoopFillZerobss+0xe>)
 80016ca:	490c      	ldr	r1, [pc, #48]	@ (80016fc <LoopFillZerobss+0x12>)
 80016cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001700 <LoopFillZerobss+0x16>)
 80016ce:	2300      	movs	r3, #0
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:
 80016d2:	58d4      	ldr	r4, [r2, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:
 80016d8:	18c4      	adds	r4, r0, r3
 80016da:	428c      	cmp	r4, r1
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
 80016de:	4a09      	ldr	r2, [pc, #36]	@ (8001704 <LoopFillZerobss+0x1a>)
 80016e0:	4c09      	ldr	r4, [pc, #36]	@ (8001708 <LoopFillZerobss+0x1e>)
 80016e2:	2300      	movs	r3, #0
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:
 80016ea:	42a2      	cmp	r2, r4
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>
 80016ee:	f002 fc25 	bl	8003f3c <__libc_init_array>
 80016f2:	f7ff fc59 	bl	8000fa8 <main>
 80016f6:	4770      	bx	lr
 80016f8:	20000000 	.word	0x20000000
 80016fc:	2000000c 	.word	0x2000000c
 8001700:	08005158 	.word	0x08005158
 8001704:	2000000c 	.word	0x2000000c
 8001708:	200000e0 	.word	0x200000e0

0800170c <ADC1_2_IRQHandler>:
 800170c:	e7fe      	b.n	800170c <ADC1_2_IRQHandler>
	...

08001710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001714:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <HAL_Init+0x28>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a07      	ldr	r2, [pc, #28]	@ (8001738 <HAL_Init+0x28>)
 800171a:	f043 0310 	orr.w	r3, r3, #16
 800171e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001720:	2003      	movs	r0, #3
 8001722:	f000 fd7b 	bl	800221c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001726:	200f      	movs	r0, #15
 8001728:	f000 f808 	bl	800173c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800172c:	f7ff fecc 	bl	80014c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40022000 	.word	0x40022000

0800173c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_InitTick+0x54>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_InitTick+0x58>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
 800174e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001752:	fbb3 f3f1 	udiv	r3, r3, r1
 8001756:	fbb2 f3f3 	udiv	r3, r2, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fd93 	bl	8002286 <HAL_SYSTICK_Config>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e00e      	b.n	8001788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b0f      	cmp	r3, #15
 800176e:	d80a      	bhi.n	8001786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001770:	2200      	movs	r2, #0
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001778:	f000 fd5b 	bl	8002232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800177c:	4a06      	ldr	r2, [pc, #24]	@ (8001798 <HAL_InitTick+0x5c>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000000 	.word	0x20000000
 8001794:	20000008 	.word	0x20000008
 8001798:	20000004 	.word	0x20000004

0800179c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a0:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <HAL_IncTick+0x1c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <HAL_IncTick+0x20>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a03      	ldr	r2, [pc, #12]	@ (80017bc <HAL_IncTick+0x20>)
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	20000008 	.word	0x20000008
 80017bc:	200000dc 	.word	0x200000dc

080017c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return uwTick;
 80017c4:	4b02      	ldr	r3, [pc, #8]	@ (80017d0 <HAL_GetTick+0x10>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	200000dc 	.word	0x200000dc

080017d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e0be      	b.n	8001974 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001800:	2b00      	cmp	r3, #0
 8001802:	d109      	bne.n	8001818 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fe8a 	bl	800152c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 fbf1 	bl	8002000 <ADC_ConversionStop_Disable>
 800181e:	4603      	mov	r3, r0
 8001820:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 8099 	bne.w	8001962 <HAL_ADC_Init+0x18e>
 8001830:	7dfb      	ldrb	r3, [r7, #23]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f040 8095 	bne.w	8001962 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001840:	f023 0302 	bic.w	r3, r3, #2
 8001844:	f043 0202 	orr.w	r2, r3, #2
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001854:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7b1b      	ldrb	r3, [r3, #12]
 800185a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800185c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	4313      	orrs	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800186c:	d003      	beq.n	8001876 <HAL_ADC_Init+0xa2>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d102      	bne.n	800187c <HAL_ADC_Init+0xa8>
 8001876:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800187a:	e000      	b.n	800187e <HAL_ADC_Init+0xaa>
 800187c:	2300      	movs	r3, #0
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7d1b      	ldrb	r3, [r3, #20]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d119      	bne.n	80018c0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	7b1b      	ldrb	r3, [r3, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d109      	bne.n	80018a8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	3b01      	subs	r3, #1
 800189a:	035a      	lsls	r2, r3, #13
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	e00b      	b.n	80018c0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ac:	f043 0220 	orr.w	r2, r3, #32
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b8:	f043 0201 	orr.w	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	4b28      	ldr	r3, [pc, #160]	@ (800197c <HAL_ADC_Init+0x1a8>)
 80018dc:	4013      	ands	r3, r2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	430b      	orrs	r3, r1
 80018e6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018f0:	d003      	beq.n	80018fa <HAL_ADC_Init+0x126>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d104      	bne.n	8001904 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	3b01      	subs	r3, #1
 8001900:	051b      	lsls	r3, r3, #20
 8001902:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	430a      	orrs	r2, r1
 8001916:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	4b18      	ldr	r3, [pc, #96]	@ (8001980 <HAL_ADC_Init+0x1ac>)
 8001920:	4013      	ands	r3, r2
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	429a      	cmp	r2, r3
 8001926:	d10b      	bne.n	8001940 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001932:	f023 0303 	bic.w	r3, r3, #3
 8001936:	f043 0201 	orr.w	r2, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800193e:	e018      	b.n	8001972 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001944:	f023 0312 	bic.w	r3, r3, #18
 8001948:	f043 0210 	orr.w	r2, r3, #16
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001954:	f043 0201 	orr.w	r2, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001960:	e007      	b.n	8001972 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001966:	f043 0210 	orr.w	r2, r3, #16
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001972:	7dfb      	ldrb	r3, [r7, #23]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	ffe1f7fd 	.word	0xffe1f7fd
 8001980:	ff1f0efe 	.word	0xff1f0efe

08001984 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_ADC_Start+0x1a>
 800199a:	2302      	movs	r3, #2
 800199c:	e098      	b.n	8001ad0 <HAL_ADC_Start+0x14c>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 fad0 	bl	8001f4c <ADC_Enable>
 80019ac:	4603      	mov	r3, r0
 80019ae:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f040 8087 	bne.w	8001ac6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a41      	ldr	r2, [pc, #260]	@ (8001ad8 <HAL_ADC_Start+0x154>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d105      	bne.n	80019e2 <HAL_ADC_Start+0x5e>
 80019d6:	4b41      	ldr	r3, [pc, #260]	@ (8001adc <HAL_ADC_Start+0x158>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d115      	bne.n	8001a0e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d026      	beq.n	8001a4a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a00:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a04:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a0c:	e01d      	b.n	8001a4a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a12:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a2f      	ldr	r2, [pc, #188]	@ (8001adc <HAL_ADC_Start+0x158>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d004      	beq.n	8001a2e <HAL_ADC_Start+0xaa>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a2b      	ldr	r2, [pc, #172]	@ (8001ad8 <HAL_ADC_Start+0x154>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10d      	bne.n	8001a4a <HAL_ADC_Start+0xc6>
 8001a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001adc <HAL_ADC_Start+0x158>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a42:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5a:	f023 0206 	bic.w	r2, r3, #6
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a62:	e002      	b.n	8001a6a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f06f 0202 	mvn.w	r2, #2
 8001a7a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a86:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a8a:	d113      	bne.n	8001ab4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a90:	4a11      	ldr	r2, [pc, #68]	@ (8001ad8 <HAL_ADC_Start+0x154>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d105      	bne.n	8001aa2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <HAL_ADC_Start+0x158>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d108      	bne.n	8001ab4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	e00c      	b.n	8001ace <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	e003      	b.n	8001ace <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40012800 	.word	0x40012800
 8001adc:	40012400 	.word	0x40012400

08001ae0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_Stop+0x1a>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e01a      	b.n	8001b30 <HAL_ADC_Stop+0x50>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fa7c 	bl	8002000 <ADC_ConversionStop_Disable>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d109      	bne.n	8001b26 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b16:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	f043 0201 	orr.w	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b4e:	f7ff fe37 	bl	80017c0 <HAL_GetTick>
 8001b52:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00b      	beq.n	8001b7a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b66:	f043 0220 	orr.w	r2, r3, #32
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0d3      	b.n	8001d22 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d131      	bne.n	8001bec <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d12a      	bne.n	8001bec <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b96:	e021      	b.n	8001bdc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b9e:	d01d      	beq.n	8001bdc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <HAL_ADC_PollForConversion+0x7e>
 8001ba6:	f7ff fe0b 	bl	80017c0 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d212      	bcs.n	8001bdc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10b      	bne.n	8001bdc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc8:	f043 0204 	orr.w	r2, r3, #4
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e0a2      	b.n	8001d22 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0d6      	beq.n	8001b98 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bea:	e070      	b.n	8001cce <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001bec:	4b4f      	ldr	r3, [pc, #316]	@ (8001d2c <HAL_ADC_PollForConversion+0x1f4>)
 8001bee:	681c      	ldr	r4, [r3, #0]
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	f001 f98b 	bl	8002f0c <HAL_RCCEx_GetPeriphCLKFreq>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6919      	ldr	r1, [r3, #16]
 8001c02:	4b4b      	ldr	r3, [pc, #300]	@ (8001d30 <HAL_ADC_PollForConversion+0x1f8>)
 8001c04:	400b      	ands	r3, r1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d118      	bne.n	8001c3c <HAL_ADC_PollForConversion+0x104>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68d9      	ldr	r1, [r3, #12]
 8001c10:	4b48      	ldr	r3, [pc, #288]	@ (8001d34 <HAL_ADC_PollForConversion+0x1fc>)
 8001c12:	400b      	ands	r3, r1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d111      	bne.n	8001c3c <HAL_ADC_PollForConversion+0x104>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6919      	ldr	r1, [r3, #16]
 8001c1e:	4b46      	ldr	r3, [pc, #280]	@ (8001d38 <HAL_ADC_PollForConversion+0x200>)
 8001c20:	400b      	ands	r3, r1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d108      	bne.n	8001c38 <HAL_ADC_PollForConversion+0x100>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68d9      	ldr	r1, [r3, #12]
 8001c2c:	4b43      	ldr	r3, [pc, #268]	@ (8001d3c <HAL_ADC_PollForConversion+0x204>)
 8001c2e:	400b      	ands	r3, r1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_ADC_PollForConversion+0x100>
 8001c34:	2314      	movs	r3, #20
 8001c36:	e020      	b.n	8001c7a <HAL_ADC_PollForConversion+0x142>
 8001c38:	2329      	movs	r3, #41	@ 0x29
 8001c3a:	e01e      	b.n	8001c7a <HAL_ADC_PollForConversion+0x142>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6919      	ldr	r1, [r3, #16]
 8001c42:	4b3d      	ldr	r3, [pc, #244]	@ (8001d38 <HAL_ADC_PollForConversion+0x200>)
 8001c44:	400b      	ands	r3, r1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_ADC_PollForConversion+0x120>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68d9      	ldr	r1, [r3, #12]
 8001c50:	4b3a      	ldr	r3, [pc, #232]	@ (8001d3c <HAL_ADC_PollForConversion+0x204>)
 8001c52:	400b      	ands	r3, r1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00d      	beq.n	8001c74 <HAL_ADC_PollForConversion+0x13c>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6919      	ldr	r1, [r3, #16]
 8001c5e:	4b38      	ldr	r3, [pc, #224]	@ (8001d40 <HAL_ADC_PollForConversion+0x208>)
 8001c60:	400b      	ands	r3, r1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d108      	bne.n	8001c78 <HAL_ADC_PollForConversion+0x140>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68d9      	ldr	r1, [r3, #12]
 8001c6c:	4b34      	ldr	r3, [pc, #208]	@ (8001d40 <HAL_ADC_PollForConversion+0x208>)
 8001c6e:	400b      	ands	r3, r1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_PollForConversion+0x140>
 8001c74:	2354      	movs	r3, #84	@ 0x54
 8001c76:	e000      	b.n	8001c7a <HAL_ADC_PollForConversion+0x142>
 8001c78:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c80:	e021      	b.n	8001cc6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c88:	d01a      	beq.n	8001cc0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d007      	beq.n	8001ca0 <HAL_ADC_PollForConversion+0x168>
 8001c90:	f7ff fd96 	bl	80017c0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d20f      	bcs.n	8001cc0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d90b      	bls.n	8001cc0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cac:	f043 0204 	orr.w	r2, r3, #4
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e030      	b.n	8001d22 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d8d9      	bhi.n	8001c82 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f06f 0212 	mvn.w	r2, #18
 8001cd6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cdc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001cee:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001cf2:	d115      	bne.n	8001d20 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d111      	bne.n	8001d20 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d105      	bne.n	8001d20 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	371c      	adds	r7, #28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd90      	pop	{r4, r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	24924924 	.word	0x24924924
 8001d34:	00924924 	.word	0x00924924
 8001d38:	12492492 	.word	0x12492492
 8001d3c:	00492492 	.word	0x00492492
 8001d40:	00249249 	.word	0x00249249

08001d44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x20>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e0dc      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1da>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b06      	cmp	r3, #6
 8001d8a:	d81c      	bhi.n	8001dc6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3b05      	subs	r3, #5
 8001d9e:	221f      	movs	r2, #31
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	4019      	ands	r1, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	3b05      	subs	r3, #5
 8001db8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dc4:	e03c      	b.n	8001e40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d81c      	bhi.n	8001e08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	3b23      	subs	r3, #35	@ 0x23
 8001de0:	221f      	movs	r2, #31
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	4019      	ands	r1, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	3b23      	subs	r3, #35	@ 0x23
 8001dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e06:	e01b      	b.n	8001e40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	3b41      	subs	r3, #65	@ 0x41
 8001e1a:	221f      	movs	r2, #31
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	4019      	ands	r1, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	3b41      	subs	r3, #65	@ 0x41
 8001e34:	fa00 f203 	lsl.w	r2, r0, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b09      	cmp	r3, #9
 8001e46:	d91c      	bls.n	8001e82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68d9      	ldr	r1, [r3, #12]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	3b1e      	subs	r3, #30
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	4019      	ands	r1, r3
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	6898      	ldr	r0, [r3, #8]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	3b1e      	subs	r3, #30
 8001e74:	fa00 f203 	lsl.w	r2, r0, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	e019      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6919      	ldr	r1, [r3, #16]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	2207      	movs	r2, #7
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	4019      	ands	r1, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6898      	ldr	r0, [r3, #8]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b10      	cmp	r3, #16
 8001ebc:	d003      	beq.n	8001ec6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ec2:	2b11      	cmp	r3, #17
 8001ec4:	d132      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1d      	ldr	r2, [pc, #116]	@ (8001f40 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d125      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d126      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001eec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d11a      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ef6:	4b13      	ldr	r3, [pc, #76]	@ (8001f44 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a13      	ldr	r2, [pc, #76]	@ (8001f48 <HAL_ADC_ConfigChannel+0x1ec>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	0c9a      	lsrs	r2, r3, #18
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f0c:	e002      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f9      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x1b2>
 8001f1a:	e007      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f20:	f043 0220 	orr.w	r2, r3, #32
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	40012400 	.word	0x40012400
 8001f44:	20000000 	.word	0x20000000
 8001f48:	431bde83 	.word	0x431bde83

08001f4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d040      	beq.n	8001fec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0201 	orr.w	r2, r2, #1
 8001f78:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff8 <ADC_Enable+0xac>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8001ffc <ADC_Enable+0xb0>)
 8001f80:	fba2 2303 	umull	r2, r3, r2, r3
 8001f84:	0c9b      	lsrs	r3, r3, #18
 8001f86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f88:	e002      	b.n	8001f90 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f9      	bne.n	8001f8a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f96:	f7ff fc13 	bl	80017c0 <HAL_GetTick>
 8001f9a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f9c:	e01f      	b.n	8001fde <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f9e:	f7ff fc0f 	bl	80017c0 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d918      	bls.n	8001fde <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d011      	beq.n	8001fde <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fbe:	f043 0210 	orr.w	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e007      	b.n	8001fee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d1d8      	bne.n	8001f9e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	431bde83 	.word	0x431bde83

08002000 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b01      	cmp	r3, #1
 8002018:	d12e      	bne.n	8002078 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0201 	bic.w	r2, r2, #1
 8002028:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800202a:	f7ff fbc9 	bl	80017c0 <HAL_GetTick>
 800202e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002030:	e01b      	b.n	800206a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002032:	f7ff fbc5 	bl	80017c0 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d914      	bls.n	800206a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b01      	cmp	r3, #1
 800204c:	d10d      	bne.n	800206a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002052:	f043 0210 	orr.w	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e007      	b.n	800207a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d0dc      	beq.n	8002032 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002094:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020a0:	4013      	ands	r3, r2
 80020a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b6:	4a04      	ldr	r2, [pc, #16]	@ (80020c8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	60d3      	str	r3, [r2, #12]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d0:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <__NVIC_GetPriorityGrouping+0x18>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	f003 0307 	and.w	r3, r3, #7
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	db0b      	blt.n	8002112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	f003 021f 	and.w	r2, r3, #31
 8002100:	4906      	ldr	r1, [pc, #24]	@ (800211c <__NVIC_EnableIRQ+0x34>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	2001      	movs	r0, #1
 800210a:	fa00 f202 	lsl.w	r2, r0, r2
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	e000e100 	.word	0xe000e100

08002120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	2b00      	cmp	r3, #0
 8002132:	db0a      	blt.n	800214a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	490c      	ldr	r1, [pc, #48]	@ (800216c <__NVIC_SetPriority+0x4c>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	0112      	lsls	r2, r2, #4
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	440b      	add	r3, r1
 8002144:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002148:	e00a      	b.n	8002160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4908      	ldr	r1, [pc, #32]	@ (8002170 <__NVIC_SetPriority+0x50>)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	3b04      	subs	r3, #4
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	440b      	add	r3, r1
 800215e:	761a      	strb	r2, [r3, #24]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000e100 	.word	0xe000e100
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	@ 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f1c3 0307 	rsb	r3, r3, #7
 800218e:	2b04      	cmp	r3, #4
 8002190:	bf28      	it	cs
 8002192:	2304      	movcs	r3, #4
 8002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	2b06      	cmp	r3, #6
 800219c:	d902      	bls.n	80021a4 <NVIC_EncodePriority+0x30>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b03      	subs	r3, #3
 80021a2:	e000      	b.n	80021a6 <NVIC_EncodePriority+0x32>
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	401a      	ands	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	4313      	orrs	r3, r2
         );
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	@ 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021e8:	d301      	bcc.n	80021ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00f      	b.n	800220e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <SysTick_Config+0x40>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f6:	210f      	movs	r1, #15
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021fc:	f7ff ff90 	bl	8002120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002200:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <SysTick_Config+0x40>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002206:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <SysTick_Config+0x40>)
 8002208:	2207      	movs	r2, #7
 800220a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	e000e010 	.word	0xe000e010

0800221c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff2d 	bl	8002084 <__NVIC_SetPriorityGrouping>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002244:	f7ff ff42 	bl	80020cc <__NVIC_GetPriorityGrouping>
 8002248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f7ff ff90 	bl	8002174 <NVIC_EncodePriority>
 8002254:	4602      	mov	r2, r0
 8002256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff5f 	bl	8002120 <__NVIC_SetPriority>
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff35 	bl	80020e8 <__NVIC_EnableIRQ>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffa2 	bl	80021d8 <SysTick_Config>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b08b      	sub	sp, #44	@ 0x2c
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b2:	e169      	b.n	8002588 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022b4:	2201      	movs	r2, #1
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	f040 8158 	bne.w	8002582 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4a9a      	ldr	r2, [pc, #616]	@ (8002540 <HAL_GPIO_Init+0x2a0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d05e      	beq.n	800239a <HAL_GPIO_Init+0xfa>
 80022dc:	4a98      	ldr	r2, [pc, #608]	@ (8002540 <HAL_GPIO_Init+0x2a0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d875      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 80022e2:	4a98      	ldr	r2, [pc, #608]	@ (8002544 <HAL_GPIO_Init+0x2a4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d058      	beq.n	800239a <HAL_GPIO_Init+0xfa>
 80022e8:	4a96      	ldr	r2, [pc, #600]	@ (8002544 <HAL_GPIO_Init+0x2a4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d86f      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 80022ee:	4a96      	ldr	r2, [pc, #600]	@ (8002548 <HAL_GPIO_Init+0x2a8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d052      	beq.n	800239a <HAL_GPIO_Init+0xfa>
 80022f4:	4a94      	ldr	r2, [pc, #592]	@ (8002548 <HAL_GPIO_Init+0x2a8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d869      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 80022fa:	4a94      	ldr	r2, [pc, #592]	@ (800254c <HAL_GPIO_Init+0x2ac>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d04c      	beq.n	800239a <HAL_GPIO_Init+0xfa>
 8002300:	4a92      	ldr	r2, [pc, #584]	@ (800254c <HAL_GPIO_Init+0x2ac>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d863      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 8002306:	4a92      	ldr	r2, [pc, #584]	@ (8002550 <HAL_GPIO_Init+0x2b0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d046      	beq.n	800239a <HAL_GPIO_Init+0xfa>
 800230c:	4a90      	ldr	r2, [pc, #576]	@ (8002550 <HAL_GPIO_Init+0x2b0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d85d      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 8002312:	2b12      	cmp	r3, #18
 8002314:	d82a      	bhi.n	800236c <HAL_GPIO_Init+0xcc>
 8002316:	2b12      	cmp	r3, #18
 8002318:	d859      	bhi.n	80023ce <HAL_GPIO_Init+0x12e>
 800231a:	a201      	add	r2, pc, #4	@ (adr r2, 8002320 <HAL_GPIO_Init+0x80>)
 800231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002320:	0800239b 	.word	0x0800239b
 8002324:	08002375 	.word	0x08002375
 8002328:	08002387 	.word	0x08002387
 800232c:	080023c9 	.word	0x080023c9
 8002330:	080023cf 	.word	0x080023cf
 8002334:	080023cf 	.word	0x080023cf
 8002338:	080023cf 	.word	0x080023cf
 800233c:	080023cf 	.word	0x080023cf
 8002340:	080023cf 	.word	0x080023cf
 8002344:	080023cf 	.word	0x080023cf
 8002348:	080023cf 	.word	0x080023cf
 800234c:	080023cf 	.word	0x080023cf
 8002350:	080023cf 	.word	0x080023cf
 8002354:	080023cf 	.word	0x080023cf
 8002358:	080023cf 	.word	0x080023cf
 800235c:	080023cf 	.word	0x080023cf
 8002360:	080023cf 	.word	0x080023cf
 8002364:	0800237d 	.word	0x0800237d
 8002368:	08002391 	.word	0x08002391
 800236c:	4a79      	ldr	r2, [pc, #484]	@ (8002554 <HAL_GPIO_Init+0x2b4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002372:	e02c      	b.n	80023ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	623b      	str	r3, [r7, #32]
          break;
 800237a:	e029      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	3304      	adds	r3, #4
 8002382:	623b      	str	r3, [r7, #32]
          break;
 8002384:	e024      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	3308      	adds	r3, #8
 800238c:	623b      	str	r3, [r7, #32]
          break;
 800238e:	e01f      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	330c      	adds	r3, #12
 8002396:	623b      	str	r3, [r7, #32]
          break;
 8002398:	e01a      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023a2:	2304      	movs	r3, #4
 80023a4:	623b      	str	r3, [r7, #32]
          break;
 80023a6:	e013      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023b0:	2308      	movs	r3, #8
 80023b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	611a      	str	r2, [r3, #16]
          break;
 80023ba:	e009      	b.n	80023d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023bc:	2308      	movs	r3, #8
 80023be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	615a      	str	r2, [r3, #20]
          break;
 80023c6:	e003      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023c8:	2300      	movs	r3, #0
 80023ca:	623b      	str	r3, [r7, #32]
          break;
 80023cc:	e000      	b.n	80023d0 <HAL_GPIO_Init+0x130>
          break;
 80023ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	2bff      	cmp	r3, #255	@ 0xff
 80023d4:	d801      	bhi.n	80023da <HAL_GPIO_Init+0x13a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	e001      	b.n	80023de <HAL_GPIO_Init+0x13e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3304      	adds	r3, #4
 80023de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2bff      	cmp	r3, #255	@ 0xff
 80023e4:	d802      	bhi.n	80023ec <HAL_GPIO_Init+0x14c>
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	e002      	b.n	80023f2 <HAL_GPIO_Init+0x152>
 80023ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ee:	3b08      	subs	r3, #8
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	210f      	movs	r1, #15
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	401a      	ands	r2, r3
 8002404:	6a39      	ldr	r1, [r7, #32]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	fa01 f303 	lsl.w	r3, r1, r3
 800240c:	431a      	orrs	r2, r3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80b1 	beq.w	8002582 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002420:	4b4d      	ldr	r3, [pc, #308]	@ (8002558 <HAL_GPIO_Init+0x2b8>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	4a4c      	ldr	r2, [pc, #304]	@ (8002558 <HAL_GPIO_Init+0x2b8>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6193      	str	r3, [r2, #24]
 800242c:	4b4a      	ldr	r3, [pc, #296]	@ (8002558 <HAL_GPIO_Init+0x2b8>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002438:	4a48      	ldr	r2, [pc, #288]	@ (800255c <HAL_GPIO_Init+0x2bc>)
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002444:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	220f      	movs	r2, #15
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4013      	ands	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a40      	ldr	r2, [pc, #256]	@ (8002560 <HAL_GPIO_Init+0x2c0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d013      	beq.n	800248c <HAL_GPIO_Init+0x1ec>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a3f      	ldr	r2, [pc, #252]	@ (8002564 <HAL_GPIO_Init+0x2c4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00d      	beq.n	8002488 <HAL_GPIO_Init+0x1e8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a3e      	ldr	r2, [pc, #248]	@ (8002568 <HAL_GPIO_Init+0x2c8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d007      	beq.n	8002484 <HAL_GPIO_Init+0x1e4>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a3d      	ldr	r2, [pc, #244]	@ (800256c <HAL_GPIO_Init+0x2cc>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d101      	bne.n	8002480 <HAL_GPIO_Init+0x1e0>
 800247c:	2303      	movs	r3, #3
 800247e:	e006      	b.n	800248e <HAL_GPIO_Init+0x1ee>
 8002480:	2304      	movs	r3, #4
 8002482:	e004      	b.n	800248e <HAL_GPIO_Init+0x1ee>
 8002484:	2302      	movs	r3, #2
 8002486:	e002      	b.n	800248e <HAL_GPIO_Init+0x1ee>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <HAL_GPIO_Init+0x1ee>
 800248c:	2300      	movs	r3, #0
 800248e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002490:	f002 0203 	and.w	r2, r2, #3
 8002494:	0092      	lsls	r2, r2, #2
 8002496:	4093      	lsls	r3, r2
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800249e:	492f      	ldr	r1, [pc, #188]	@ (800255c <HAL_GPIO_Init+0x2bc>)
 80024a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	3302      	adds	r3, #2
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	492c      	ldr	r1, [pc, #176]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]
 80024c4:	e006      	b.n	80024d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	4928      	ldr	r1, [pc, #160]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d006      	beq.n	80024ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024e0:	4b23      	ldr	r3, [pc, #140]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	4922      	ldr	r1, [pc, #136]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60cb      	str	r3, [r1, #12]
 80024ec:	e006      	b.n	80024fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024ee:	4b20      	ldr	r3, [pc, #128]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	491e      	ldr	r1, [pc, #120]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d006      	beq.n	8002516 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002508:	4b19      	ldr	r3, [pc, #100]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	4918      	ldr	r1, [pc, #96]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
 8002514:	e006      	b.n	8002524 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002516:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	43db      	mvns	r3, r3
 800251e:	4914      	ldr	r1, [pc, #80]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 8002520:	4013      	ands	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d021      	beq.n	8002574 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002530:	4b0f      	ldr	r3, [pc, #60]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	490e      	ldr	r1, [pc, #56]	@ (8002570 <HAL_GPIO_Init+0x2d0>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]
 800253c:	e021      	b.n	8002582 <HAL_GPIO_Init+0x2e2>
 800253e:	bf00      	nop
 8002540:	10320000 	.word	0x10320000
 8002544:	10310000 	.word	0x10310000
 8002548:	10220000 	.word	0x10220000
 800254c:	10210000 	.word	0x10210000
 8002550:	10120000 	.word	0x10120000
 8002554:	10110000 	.word	0x10110000
 8002558:	40021000 	.word	0x40021000
 800255c:	40010000 	.word	0x40010000
 8002560:	40010800 	.word	0x40010800
 8002564:	40010c00 	.word	0x40010c00
 8002568:	40011000 	.word	0x40011000
 800256c:	40011400 	.word	0x40011400
 8002570:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002574:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	43db      	mvns	r3, r3
 800257c:	4909      	ldr	r1, [pc, #36]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 800257e:	4013      	ands	r3, r2
 8002580:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	3301      	adds	r3, #1
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	fa22 f303 	lsr.w	r3, r2, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	f47f ae8e 	bne.w	80022b4 <HAL_GPIO_Init+0x14>
  }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	372c      	adds	r7, #44	@ 0x2c
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	40010400 	.word	0x40010400

080025a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e272      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8087 	beq.w	80026d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c8:	4b92      	ldr	r3, [pc, #584]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d00c      	beq.n	80025ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025d4:	4b8f      	ldr	r3, [pc, #572]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d112      	bne.n	8002606 <HAL_RCC_OscConfig+0x5e>
 80025e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ec:	d10b      	bne.n	8002606 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	4b89      	ldr	r3, [pc, #548]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d06c      	beq.n	80026d4 <HAL_RCC_OscConfig+0x12c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d168      	bne.n	80026d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e24c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x76>
 8002610:	4b80      	ldr	r3, [pc, #512]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a7f      	ldr	r2, [pc, #508]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	e02e      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x98>
 8002626:	4b7b      	ldr	r3, [pc, #492]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7a      	ldr	r2, [pc, #488]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800262c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b78      	ldr	r3, [pc, #480]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a77      	ldr	r2, [pc, #476]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002638:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0xbc>
 800264a:	4b72      	ldr	r3, [pc, #456]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a71      	ldr	r2, [pc, #452]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b6f      	ldr	r3, [pc, #444]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a6e      	ldr	r2, [pc, #440]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 8002664:	4b6b      	ldr	r3, [pc, #428]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a6a      	ldr	r2, [pc, #424]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b68      	ldr	r3, [pc, #416]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a67      	ldr	r2, [pc, #412]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800267a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7ff f89c 	bl	80017c0 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff f898 	bl	80017c0 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	@ 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e200      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b5d      	ldr	r3, [pc, #372]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0xe4>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7ff f888 	bl	80017c0 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7ff f884 	bl	80017c0 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	@ 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1ec      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	4b53      	ldr	r3, [pc, #332]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x10c>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d063      	beq.n	80027aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ee:	4b49      	ldr	r3, [pc, #292]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d11c      	bne.n	8002734 <HAL_RCC_OscConfig+0x18c>
 80026fa:	4b46      	ldr	r3, [pc, #280]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	4b43      	ldr	r3, [pc, #268]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x176>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e1c0      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b3d      	ldr	r3, [pc, #244]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4939      	ldr	r1, [pc, #228]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	e03a      	b.n	80027aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	4b36      	ldr	r3, [pc, #216]	@ (8002818 <HAL_RCC_OscConfig+0x270>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002742:	f7ff f83d 	bl	80017c0 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274a:	f7ff f839 	bl	80017c0 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1a1      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	4b2d      	ldr	r3, [pc, #180]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b2a      	ldr	r3, [pc, #168]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4927      	ldr	r1, [pc, #156]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277e:	4b26      	ldr	r3, [pc, #152]	@ (8002818 <HAL_RCC_OscConfig+0x270>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7ff f81c 	bl	80017c0 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278c:	f7ff f818 	bl	80017c0 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e180      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	4b1d      	ldr	r3, [pc, #116]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d03a      	beq.n	800282c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d019      	beq.n	80027f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027be:	4b17      	ldr	r3, [pc, #92]	@ (800281c <HAL_RCC_OscConfig+0x274>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c4:	f7fe fffc 	bl	80017c0 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027cc:	f7fe fff8 	bl	80017c0 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e160      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027ea:	2001      	movs	r0, #1
 80027ec:	f000 faba 	bl	8002d64 <RCC_Delay>
 80027f0:	e01c      	b.n	800282c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f2:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <HAL_RCC_OscConfig+0x274>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f8:	f7fe ffe2 	bl	80017c0 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fe:	e00f      	b.n	8002820 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7fe ffde 	bl	80017c0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d908      	bls.n	8002820 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e146      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	42420000 	.word	0x42420000
 800281c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	4b92      	ldr	r3, [pc, #584]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e9      	bne.n	8002800 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a6 	beq.w	8002986 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	4b88      	ldr	r3, [pc, #544]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	4a87      	ldr	r2, [pc, #540]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002854:	61d3      	str	r3, [r2, #28]
 8002856:	4b85      	ldr	r3, [pc, #532]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b82      	ldr	r3, [pc, #520]	@ (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d118      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002872:	4b7f      	ldr	r3, [pc, #508]	@ (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a7e      	ldr	r2, [pc, #504]	@ (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800287c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287e:	f7fe ff9f 	bl	80017c0 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002886:	f7fe ff9b 	bl	80017c0 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	@ 0x64
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e103      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002898:	4b75      	ldr	r3, [pc, #468]	@ (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x312>
 80028ac:	4b6f      	ldr	r3, [pc, #444]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4a6e      	ldr	r2, [pc, #440]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6213      	str	r3, [r2, #32]
 80028b8:	e02d      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x334>
 80028c2:	4b6a      	ldr	r3, [pc, #424]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a69      	ldr	r2, [pc, #420]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	6213      	str	r3, [r2, #32]
 80028ce:	4b67      	ldr	r3, [pc, #412]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	4a66      	ldr	r2, [pc, #408]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	f023 0304 	bic.w	r3, r3, #4
 80028d8:	6213      	str	r3, [r2, #32]
 80028da:	e01c      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d10c      	bne.n	80028fe <HAL_RCC_OscConfig+0x356>
 80028e4:	4b61      	ldr	r3, [pc, #388]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4a60      	ldr	r2, [pc, #384]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	6213      	str	r3, [r2, #32]
 80028f0:	4b5e      	ldr	r3, [pc, #376]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4a5d      	ldr	r2, [pc, #372]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6213      	str	r3, [r2, #32]
 80028fc:	e00b      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028fe:	4b5b      	ldr	r3, [pc, #364]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4a5a      	ldr	r2, [pc, #360]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6213      	str	r3, [r2, #32]
 800290a:	4b58      	ldr	r3, [pc, #352]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	4a57      	ldr	r2, [pc, #348]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002910:	f023 0304 	bic.w	r3, r3, #4
 8002914:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d015      	beq.n	800294a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291e:	f7fe ff4f 	bl	80017c0 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fe ff4b 	bl	80017c0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e0b1      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ee      	beq.n	8002926 <HAL_RCC_OscConfig+0x37e>
 8002948:	e014      	b.n	8002974 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7fe ff39 	bl	80017c0 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe ff35 	bl	80017c0 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e09b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002968:	4b40      	ldr	r3, [pc, #256]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ee      	bne.n	8002952 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002984:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8087 	beq.w	8002a9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002990:	4b36      	ldr	r3, [pc, #216]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b08      	cmp	r3, #8
 800299a:	d061      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d146      	bne.n	8002a32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a4:	4b33      	ldr	r3, [pc, #204]	@ (8002a74 <HAL_RCC_OscConfig+0x4cc>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe ff09 	bl	80017c0 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe ff05 	bl	80017c0 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e06d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c4:	4b29      	ldr	r3, [pc, #164]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d8:	d108      	bne.n	80029ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029da:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4921      	ldr	r1, [pc, #132]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ec:	4b1f      	ldr	r3, [pc, #124]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a19      	ldr	r1, [r3, #32]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	430b      	orrs	r3, r1
 80029fe:	491b      	ldr	r1, [pc, #108]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a04:	4b1b      	ldr	r3, [pc, #108]	@ (8002a74 <HAL_RCC_OscConfig+0x4cc>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fed9 	bl	80017c0 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a12:	f7fe fed5 	bl	80017c0 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e03d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x46a>
 8002a30:	e035      	b.n	8002a9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <HAL_RCC_OscConfig+0x4cc>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fec2 	bl	80017c0 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe febe 	bl	80017c0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e026      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a52:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x498>
 8002a5e:	e01e      	b.n	8002a9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e019      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40007000 	.word	0x40007000
 8002a74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a78:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <HAL_RCC_OscConfig+0x500>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000

08002aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0d0      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b6a      	ldr	r3, [pc, #424]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d910      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b67      	ldr	r3, [pc, #412]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 0207 	bic.w	r2, r3, #7
 8002ad6:	4965      	ldr	r1, [pc, #404]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b63      	ldr	r3, [pc, #396]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0b8      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b08:	4b59      	ldr	r3, [pc, #356]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a58      	ldr	r2, [pc, #352]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b20:	4b53      	ldr	r3, [pc, #332]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a52      	ldr	r2, [pc, #328]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	4b50      	ldr	r3, [pc, #320]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	494d      	ldr	r1, [pc, #308]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d040      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b47      	ldr	r3, [pc, #284]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d115      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e07f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6a:	4b41      	ldr	r3, [pc, #260]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e073      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e06b      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8a:	4b39      	ldr	r3, [pc, #228]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f023 0203 	bic.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4936      	ldr	r1, [pc, #216]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b9c:	f7fe fe10 	bl	80017c0 <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7fe fe0c 	bl	80017c0 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e053      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	4b2d      	ldr	r3, [pc, #180]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 020c 	and.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1eb      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b27      	ldr	r3, [pc, #156]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d210      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b24      	ldr	r3, [pc, #144]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 0207 	bic.w	r2, r3, #7
 8002be2:	4922      	ldr	r1, [pc, #136]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b20      	ldr	r3, [pc, #128]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e032      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c08:	4b19      	ldr	r3, [pc, #100]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4916      	ldr	r1, [pc, #88]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c26:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	490e      	ldr	r1, [pc, #56]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c3a:	f000 f821 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	490a      	ldr	r1, [pc, #40]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4c:	5ccb      	ldrb	r3, [r1, r3]
 8002c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c52:	4a09      	ldr	r2, [pc, #36]	@ (8002c78 <HAL_RCC_ClockConfig+0x1cc>)
 8002c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c56:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <HAL_RCC_ClockConfig+0x1d0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fd6e 	bl	800173c <HAL_InitTick>

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40022000 	.word	0x40022000
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08004f38 	.word	0x08004f38
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	20000004 	.word	0x20000004

08002c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d002      	beq.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x30>
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d003      	beq.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x36>
 8002cae:	e027      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cb0:	4b19      	ldr	r3, [pc, #100]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cb2:	613b      	str	r3, [r7, #16]
      break;
 8002cb4:	e027      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	0c9b      	lsrs	r3, r3, #18
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	4a17      	ldr	r2, [pc, #92]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cc0:	5cd3      	ldrb	r3, [r2, r3]
 8002cc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d010      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cce:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	0c5b      	lsrs	r3, r3, #17
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	4a11      	ldr	r2, [pc, #68]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ce2:	fb03 f202 	mul.w	r2, r3, r2
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e004      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cf4:	fb02 f303 	mul.w	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	613b      	str	r3, [r7, #16]
      break;
 8002cfe:	e002      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d02:	613b      	str	r3, [r7, #16]
      break;
 8002d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d06:	693b      	ldr	r3, [r7, #16]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	007a1200 	.word	0x007a1200
 8002d1c:	08004f50 	.word	0x08004f50
 8002d20:	08004f60 	.word	0x08004f60
 8002d24:	003d0900 	.word	0x003d0900

08002d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d2c:	4b02      	ldr	r3, [pc, #8]	@ (8002d38 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	20000000 	.word	0x20000000

08002d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d40:	f7ff fff2 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	0adb      	lsrs	r3, r3, #11
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	4903      	ldr	r1, [pc, #12]	@ (8002d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d52:	5ccb      	ldrb	r3, [r1, r3]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	08004f48 	.word	0x08004f48

08002d64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d98 <RCC_Delay+0x34>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0a      	ldr	r2, [pc, #40]	@ (8002d9c <RCC_Delay+0x38>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	0a5b      	lsrs	r3, r3, #9
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d80:	bf00      	nop
  }
  while (Delay --);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1e5a      	subs	r2, r3, #1
 8002d86:	60fa      	str	r2, [r7, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f9      	bne.n	8002d80 <RCC_Delay+0x1c>
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	10624dd3 	.word	0x10624dd3

08002da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d07d      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc0:	4b4f      	ldr	r3, [pc, #316]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10d      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dcc:	4b4c      	ldr	r3, [pc, #304]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	4a4b      	ldr	r2, [pc, #300]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd6:	61d3      	str	r3, [r2, #28]
 8002dd8:	4b49      	ldr	r3, [pc, #292]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de4:	2301      	movs	r3, #1
 8002de6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de8:	4b46      	ldr	r3, [pc, #280]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d118      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df4:	4b43      	ldr	r3, [pc, #268]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a42      	ldr	r2, [pc, #264]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e00:	f7fe fcde 	bl	80017c0 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e06:	e008      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e08:	f7fe fcda 	bl	80017c0 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	@ 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e06d      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1a:	4b3a      	ldr	r3, [pc, #232]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e26:	4b36      	ldr	r3, [pc, #216]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d02e      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d027      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e44:	4b2e      	ldr	r3, [pc, #184]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e54:	4b2c      	ldr	r3, [pc, #176]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e5a:	4a29      	ldr	r2, [pc, #164]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d014      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fca9 	bl	80017c0 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7fe fca5 	bl	80017c0 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e036      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e88:	4b1d      	ldr	r3, [pc, #116]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0ee      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e94:	4b1a      	ldr	r3, [pc, #104]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4917      	ldr	r1, [pc, #92]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ea6:	7dfb      	ldrb	r3, [r7, #23]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d105      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eac:	4b14      	ldr	r3, [pc, #80]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	4a13      	ldr	r2, [pc, #76]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	490b      	ldr	r1, [pc, #44]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ee2:	4b07      	ldr	r3, [pc, #28]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	4904      	ldr	r1, [pc, #16]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40007000 	.word	0x40007000
 8002f08:	42420440 	.word	0x42420440

08002f0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61fb      	str	r3, [r7, #28]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d00a      	beq.n	8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b10      	cmp	r3, #16
 8002f32:	f200 808a 	bhi.w	800304a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d045      	beq.n	8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d075      	beq.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002f42:	e082      	b.n	800304a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002f44:	4b46      	ldr	r3, [pc, #280]	@ (8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002f4a:	4b45      	ldr	r3, [pc, #276]	@ (8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d07b      	beq.n	800304e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	0c9b      	lsrs	r3, r3, #18
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	4a41      	ldr	r2, [pc, #260]	@ (8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002f60:	5cd3      	ldrb	r3, [r2, r3]
 8002f62:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d015      	beq.n	8002f9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	0c5b      	lsrs	r3, r3, #17
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	4a3b      	ldr	r2, [pc, #236]	@ (8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002f7a:	5cd3      	ldrb	r3, [r2, r3]
 8002f7c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00d      	beq.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002f88:	4a38      	ldr	r2, [pc, #224]	@ (800306c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	fb02 f303 	mul.w	r3, r2, r3
 8002f96:	61fb      	str	r3, [r7, #28]
 8002f98:	e004      	b.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4a34      	ldr	r2, [pc, #208]	@ (8003070 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002f9e:	fb02 f303 	mul.w	r3, r2, r3
 8002fa2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fb0:	d102      	bne.n	8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	61bb      	str	r3, [r7, #24]
      break;
 8002fb6:	e04a      	b.n	800304e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8003074 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	61bb      	str	r3, [r7, #24]
      break;
 8002fc6:	e042      	b.n	800304e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002fc8:	4b25      	ldr	r3, [pc, #148]	@ (8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fd8:	d108      	bne.n	8002fec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002fe4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	e01f      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ff6:	d109      	bne.n	800300c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002ff8:	4b19      	ldr	r3, [pc, #100]	@ (8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003004:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	e00f      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003012:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003016:	d11c      	bne.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003018:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d016      	beq.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003024:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003028:	61bb      	str	r3, [r7, #24]
      break;
 800302a:	e012      	b.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800302c:	e011      	b.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800302e:	f7ff fe85 	bl	8002d3c <HAL_RCC_GetPCLK2Freq>
 8003032:	4602      	mov	r2, r0
 8003034:	4b0a      	ldr	r3, [pc, #40]	@ (8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	0b9b      	lsrs	r3, r3, #14
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	3301      	adds	r3, #1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
 8003046:	61bb      	str	r3, [r7, #24]
      break;
 8003048:	e004      	b.n	8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800304a:	bf00      	nop
 800304c:	e002      	b.n	8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800304e:	bf00      	nop
 8003050:	e000      	b.n	8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003052:	bf00      	nop
    }
  }
  return (frequency);
 8003054:	69bb      	ldr	r3, [r7, #24]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
 8003064:	08004f64 	.word	0x08004f64
 8003068:	08004f74 	.word	0x08004f74
 800306c:	007a1200 	.word	0x007a1200
 8003070:	003d0900 	.word	0x003d0900
 8003074:	aaaaaaab 	.word	0xaaaaaaab

08003078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e041      	b.n	800310e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fe fa80 	bl	80015a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3304      	adds	r3, #4
 80030b4:	4619      	mov	r1, r3
 80030b6:	4610      	mov	r0, r2
 80030b8:	f000 fc18 	bl	80038ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	d001      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e03a      	b.n	80031a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a18      	ldr	r2, [pc, #96]	@ (80031b0 <HAL_TIM_Base_Start_IT+0x98>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00e      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x58>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800315a:	d009      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x58>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a14      	ldr	r2, [pc, #80]	@ (80031b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d004      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x58>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a13      	ldr	r2, [pc, #76]	@ (80031b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d111      	bne.n	8003194 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b06      	cmp	r3, #6
 8003180:	d010      	beq.n	80031a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0201 	orr.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003192:	e007      	b.n	80031a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	40012c00 	.word	0x40012c00
 80031b4:	40000400 	.word	0x40000400
 80031b8:	40000800 	.word	0x40000800

080031bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e041      	b.n	8003252 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f839 	bl	800325a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3304      	adds	r3, #4
 80031f8:	4619      	mov	r1, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f000 fb76 	bl	80038ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <HAL_TIM_PWM_Start+0x24>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	bf14      	ite	ne
 8003288:	2301      	movne	r3, #1
 800328a:	2300      	moveq	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	e022      	b.n	80032d6 <HAL_TIM_PWM_Start+0x6a>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b04      	cmp	r3, #4
 8003294:	d109      	bne.n	80032aa <HAL_TIM_PWM_Start+0x3e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b01      	cmp	r3, #1
 80032a0:	bf14      	ite	ne
 80032a2:	2301      	movne	r3, #1
 80032a4:	2300      	moveq	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	e015      	b.n	80032d6 <HAL_TIM_PWM_Start+0x6a>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d109      	bne.n	80032c4 <HAL_TIM_PWM_Start+0x58>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	bf14      	ite	ne
 80032bc:	2301      	movne	r3, #1
 80032be:	2300      	moveq	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e008      	b.n	80032d6 <HAL_TIM_PWM_Start+0x6a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e05e      	b.n	800339c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <HAL_TIM_PWM_Start+0x82>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032ec:	e013      	b.n	8003316 <HAL_TIM_PWM_Start+0xaa>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d104      	bne.n	80032fe <HAL_TIM_PWM_Start+0x92>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032fc:	e00b      	b.n	8003316 <HAL_TIM_PWM_Start+0xaa>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d104      	bne.n	800330e <HAL_TIM_PWM_Start+0xa2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800330c:	e003      	b.n	8003316 <HAL_TIM_PWM_Start+0xaa>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2201      	movs	r2, #1
 800331c:	6839      	ldr	r1, [r7, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fd70 	bl	8003e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a1e      	ldr	r2, [pc, #120]	@ (80033a4 <HAL_TIM_PWM_Start+0x138>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d107      	bne.n	800333e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a18      	ldr	r2, [pc, #96]	@ (80033a4 <HAL_TIM_PWM_Start+0x138>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00e      	beq.n	8003366 <HAL_TIM_PWM_Start+0xfa>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003350:	d009      	beq.n	8003366 <HAL_TIM_PWM_Start+0xfa>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a14      	ldr	r2, [pc, #80]	@ (80033a8 <HAL_TIM_PWM_Start+0x13c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_TIM_PWM_Start+0xfa>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a12      	ldr	r2, [pc, #72]	@ (80033ac <HAL_TIM_PWM_Start+0x140>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d111      	bne.n	800338a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b06      	cmp	r3, #6
 8003376:	d010      	beq.n	800339a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003388:	e007      	b.n	800339a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0201 	orr.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40000800 	.word	0x40000800

080033b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d020      	beq.n	8003414 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01b      	beq.n	8003414 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0202 	mvn.w	r2, #2
 80033e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fa5a 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 8003400:	e005      	b.n	800340e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa4d 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fa5c 	bl	80038c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b00      	cmp	r3, #0
 800341c:	d020      	beq.n	8003460 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01b      	beq.n	8003460 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0204 	mvn.w	r2, #4
 8003430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2202      	movs	r2, #2
 8003436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fa34 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fa27 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fa36 	bl	80038c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d020      	beq.n	80034ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01b      	beq.n	80034ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0208 	mvn.w	r2, #8
 800347c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2204      	movs	r2, #4
 8003482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa0e 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fa01 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fa10 	bl	80038c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f003 0310 	and.w	r3, r3, #16
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d020      	beq.n	80034f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01b      	beq.n	80034f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0210 	mvn.w	r2, #16
 80034c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2208      	movs	r2, #8
 80034ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f9e8 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f9db 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f9ea 	bl	80038c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00c      	beq.n	800351c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0201 	mvn.w	r2, #1
 8003514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fd fe92 	bl	8001240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00c      	beq.n	8003540 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fced 	bl	8003f1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00c      	beq.n	8003564 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800355c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f9ba 	bl	80038d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00c      	beq.n	8003588 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0220 	mvn.w	r2, #32
 8003580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fcc0 	bl	8003f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e0ae      	b.n	800370c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b0c      	cmp	r3, #12
 80035ba:	f200 809f 	bhi.w	80036fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035be:	a201      	add	r2, pc, #4	@ (adr r2, 80035c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c4:	080035f9 	.word	0x080035f9
 80035c8:	080036fd 	.word	0x080036fd
 80035cc:	080036fd 	.word	0x080036fd
 80035d0:	080036fd 	.word	0x080036fd
 80035d4:	08003639 	.word	0x08003639
 80035d8:	080036fd 	.word	0x080036fd
 80035dc:	080036fd 	.word	0x080036fd
 80035e0:	080036fd 	.word	0x080036fd
 80035e4:	0800367b 	.word	0x0800367b
 80035e8:	080036fd 	.word	0x080036fd
 80035ec:	080036fd 	.word	0x080036fd
 80035f0:	080036fd 	.word	0x080036fd
 80035f4:	080036bb 	.word	0x080036bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 f9e2 	bl	80039c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0208 	orr.w	r2, r2, #8
 8003612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0204 	bic.w	r2, r2, #4
 8003622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6999      	ldr	r1, [r3, #24]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	619a      	str	r2, [r3, #24]
      break;
 8003636:	e064      	b.n	8003702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fa28 	bl	8003a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699a      	ldr	r2, [r3, #24]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6999      	ldr	r1, [r3, #24]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	021a      	lsls	r2, r3, #8
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	619a      	str	r2, [r3, #24]
      break;
 8003678:	e043      	b.n	8003702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fa71 	bl	8003b68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0208 	orr.w	r2, r2, #8
 8003694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0204 	bic.w	r2, r2, #4
 80036a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69d9      	ldr	r1, [r3, #28]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	61da      	str	r2, [r3, #28]
      break;
 80036b8:	e023      	b.n	8003702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fabb 	bl	8003c3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69da      	ldr	r2, [r3, #28]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69da      	ldr	r2, [r3, #28]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69d9      	ldr	r1, [r3, #28]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	021a      	lsls	r2, r3, #8
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	61da      	str	r2, [r3, #28]
      break;
 80036fa:	e002      	b.n	8003702 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003700:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800370a:	7dfb      	ldrb	r3, [r7, #23]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_TIM_ConfigClockSource+0x1c>
 800372c:	2302      	movs	r3, #2
 800372e:	e0b4      	b.n	800389a <HAL_TIM_ConfigClockSource+0x186>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800374e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003756:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003768:	d03e      	beq.n	80037e8 <HAL_TIM_ConfigClockSource+0xd4>
 800376a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800376e:	f200 8087 	bhi.w	8003880 <HAL_TIM_ConfigClockSource+0x16c>
 8003772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003776:	f000 8086 	beq.w	8003886 <HAL_TIM_ConfigClockSource+0x172>
 800377a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800377e:	d87f      	bhi.n	8003880 <HAL_TIM_ConfigClockSource+0x16c>
 8003780:	2b70      	cmp	r3, #112	@ 0x70
 8003782:	d01a      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0xa6>
 8003784:	2b70      	cmp	r3, #112	@ 0x70
 8003786:	d87b      	bhi.n	8003880 <HAL_TIM_ConfigClockSource+0x16c>
 8003788:	2b60      	cmp	r3, #96	@ 0x60
 800378a:	d050      	beq.n	800382e <HAL_TIM_ConfigClockSource+0x11a>
 800378c:	2b60      	cmp	r3, #96	@ 0x60
 800378e:	d877      	bhi.n	8003880 <HAL_TIM_ConfigClockSource+0x16c>
 8003790:	2b50      	cmp	r3, #80	@ 0x50
 8003792:	d03c      	beq.n	800380e <HAL_TIM_ConfigClockSource+0xfa>
 8003794:	2b50      	cmp	r3, #80	@ 0x50
 8003796:	d873      	bhi.n	8003880 <HAL_TIM_ConfigClockSource+0x16c>
 8003798:	2b40      	cmp	r3, #64	@ 0x40
 800379a:	d058      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x13a>
 800379c:	2b40      	cmp	r3, #64	@ 0x40
 800379e:	d86f      	bhi.n	8003880 <HAL_TIM_ConfigClockSource+0x16c>
 80037a0:	2b30      	cmp	r3, #48	@ 0x30
 80037a2:	d064      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x15a>
 80037a4:	2b30      	cmp	r3, #48	@ 0x30
 80037a6:	d86b      	bhi.n	8003880 <HAL_TIM_ConfigClockSource+0x16c>
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d060      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x15a>
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d867      	bhi.n	8003880 <HAL_TIM_ConfigClockSource+0x16c>
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d05c      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x15a>
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	d05a      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x15a>
 80037b8:	e062      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037ca:	f000 fafc 	bl	8003dc6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80037dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	609a      	str	r2, [r3, #8]
      break;
 80037e6:	e04f      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037f8:	f000 fae5 	bl	8003dc6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800380a:	609a      	str	r2, [r3, #8]
      break;
 800380c:	e03c      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800381a:	461a      	mov	r2, r3
 800381c:	f000 fa5c 	bl	8003cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2150      	movs	r1, #80	@ 0x50
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fab3 	bl	8003d92 <TIM_ITRx_SetConfig>
      break;
 800382c:	e02c      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800383a:	461a      	mov	r2, r3
 800383c:	f000 fa7a 	bl	8003d34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2160      	movs	r1, #96	@ 0x60
 8003846:	4618      	mov	r0, r3
 8003848:	f000 faa3 	bl	8003d92 <TIM_ITRx_SetConfig>
      break;
 800384c:	e01c      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800385a:	461a      	mov	r2, r3
 800385c:	f000 fa3c 	bl	8003cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2140      	movs	r1, #64	@ 0x40
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fa93 	bl	8003d92 <TIM_ITRx_SetConfig>
      break;
 800386c:	e00c      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4619      	mov	r1, r3
 8003878:	4610      	mov	r0, r2
 800387a:	f000 fa8a 	bl	8003d92 <TIM_ITRx_SetConfig>
      break;
 800387e:	e003      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
      break;
 8003884:	e000      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003886:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003898:	7bfb      	ldrb	r3, [r7, #15]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr
	...

080038ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a2f      	ldr	r2, [pc, #188]	@ (80039bc <TIM_Base_SetConfig+0xd0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00b      	beq.n	800391c <TIM_Base_SetConfig+0x30>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800390a:	d007      	beq.n	800391c <TIM_Base_SetConfig+0x30>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a2c      	ldr	r2, [pc, #176]	@ (80039c0 <TIM_Base_SetConfig+0xd4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_Base_SetConfig+0x30>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a2b      	ldr	r2, [pc, #172]	@ (80039c4 <TIM_Base_SetConfig+0xd8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d108      	bne.n	800392e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a22      	ldr	r2, [pc, #136]	@ (80039bc <TIM_Base_SetConfig+0xd0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00b      	beq.n	800394e <TIM_Base_SetConfig+0x62>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800393c:	d007      	beq.n	800394e <TIM_Base_SetConfig+0x62>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a1f      	ldr	r2, [pc, #124]	@ (80039c0 <TIM_Base_SetConfig+0xd4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_Base_SetConfig+0x62>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a1e      	ldr	r2, [pc, #120]	@ (80039c4 <TIM_Base_SetConfig+0xd8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d108      	bne.n	8003960 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a0d      	ldr	r2, [pc, #52]	@ (80039bc <TIM_Base_SetConfig+0xd0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d103      	bne.n	8003994 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f023 0201 	bic.w	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	611a      	str	r2, [r3, #16]
  }
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	40000400 	.word	0x40000400
 80039c4:	40000800 	.word	0x40000800

080039c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f023 0201 	bic.w	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0303 	bic.w	r3, r3, #3
 80039fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f023 0302 	bic.w	r3, r3, #2
 8003a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a90 <TIM_OC1_SetConfig+0xc8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d10c      	bne.n	8003a3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f023 0308 	bic.w	r3, r3, #8
 8003a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 0304 	bic.w	r3, r3, #4
 8003a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a13      	ldr	r2, [pc, #76]	@ (8003a90 <TIM_OC1_SetConfig+0xc8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d111      	bne.n	8003a6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	621a      	str	r2, [r3, #32]
}
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40012c00 	.word	0x40012c00

08003a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f023 0210 	bic.w	r2, r3, #16
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f023 0320 	bic.w	r3, r3, #32
 8003ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a1d      	ldr	r2, [pc, #116]	@ (8003b64 <TIM_OC2_SetConfig+0xd0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d10d      	bne.n	8003b10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a14      	ldr	r2, [pc, #80]	@ (8003b64 <TIM_OC2_SetConfig+0xd0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d113      	bne.n	8003b40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	40012c00 	.word	0x40012c00

08003b68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0303 	bic.w	r3, r3, #3
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c38 <TIM_OC3_SetConfig+0xd0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d10d      	bne.n	8003be2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a14      	ldr	r2, [pc, #80]	@ (8003c38 <TIM_OC3_SetConfig+0xd0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d113      	bne.n	8003c12 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	621a      	str	r2, [r3, #32]
}
 8003c2c:	bf00      	nop
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40012c00 	.word	0x40012c00

08003c3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	021b      	lsls	r3, r3, #8
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	031b      	lsls	r3, r3, #12
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a0f      	ldr	r2, [pc, #60]	@ (8003cd4 <TIM_OC4_SetConfig+0x98>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d109      	bne.n	8003cb0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	019b      	lsls	r3, r3, #6
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	621a      	str	r2, [r3, #32]
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr
 8003cd4:	40012c00 	.word	0x40012c00

08003cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	f023 0201 	bic.w	r2, r3, #1
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f023 030a 	bic.w	r3, r3, #10
 8003d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	621a      	str	r2, [r3, #32]
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f023 0210 	bic.w	r2, r3, #16
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	031b      	lsls	r3, r3, #12
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	621a      	str	r2, [r3, #32]
}
 8003d88:	bf00      	nop
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f043 0307 	orr.w	r3, r3, #7
 8003db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	609a      	str	r2, [r3, #8]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr

08003dc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b087      	sub	sp, #28
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003de0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	021a      	lsls	r2, r3, #8
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	609a      	str	r2, [r3, #8]
}
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	2201      	movs	r2, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1a      	ldr	r2, [r3, #32]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	401a      	ands	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1a      	ldr	r2, [r3, #32]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e046      	b.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a16      	ldr	r2, [pc, #88]	@ (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00e      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb0:	d009      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a12      	ldr	r2, [pc, #72]	@ (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d004      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a10      	ldr	r2, [pc, #64]	@ (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40000800 	.word	0x40000800

08003f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr

08003f1a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <memset>:
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	4402      	add	r2, r0
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d100      	bne.n	8003f36 <memset+0xa>
 8003f34:	4770      	bx	lr
 8003f36:	f803 1b01 	strb.w	r1, [r3], #1
 8003f3a:	e7f9      	b.n	8003f30 <memset+0x4>

08003f3c <__libc_init_array>:
 8003f3c:	b570      	push	{r4, r5, r6, lr}
 8003f3e:	2600      	movs	r6, #0
 8003f40:	4d0c      	ldr	r5, [pc, #48]	@ (8003f74 <__libc_init_array+0x38>)
 8003f42:	4c0d      	ldr	r4, [pc, #52]	@ (8003f78 <__libc_init_array+0x3c>)
 8003f44:	1b64      	subs	r4, r4, r5
 8003f46:	10a4      	asrs	r4, r4, #2
 8003f48:	42a6      	cmp	r6, r4
 8003f4a:	d109      	bne.n	8003f60 <__libc_init_array+0x24>
 8003f4c:	f000 ffe8 	bl	8004f20 <_init>
 8003f50:	2600      	movs	r6, #0
 8003f52:	4d0a      	ldr	r5, [pc, #40]	@ (8003f7c <__libc_init_array+0x40>)
 8003f54:	4c0a      	ldr	r4, [pc, #40]	@ (8003f80 <__libc_init_array+0x44>)
 8003f56:	1b64      	subs	r4, r4, r5
 8003f58:	10a4      	asrs	r4, r4, #2
 8003f5a:	42a6      	cmp	r6, r4
 8003f5c:	d105      	bne.n	8003f6a <__libc_init_array+0x2e>
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
 8003f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f64:	4798      	blx	r3
 8003f66:	3601      	adds	r6, #1
 8003f68:	e7ee      	b.n	8003f48 <__libc_init_array+0xc>
 8003f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f6e:	4798      	blx	r3
 8003f70:	3601      	adds	r6, #1
 8003f72:	e7f2      	b.n	8003f5a <__libc_init_array+0x1e>
 8003f74:	08005150 	.word	0x08005150
 8003f78:	08005150 	.word	0x08005150
 8003f7c:	08005150 	.word	0x08005150
 8003f80:	08005154 	.word	0x08005154

08003f84 <sin>:
 8003f84:	b530      	push	{r4, r5, lr}
 8003f86:	4d20      	ldr	r5, [pc, #128]	@ (8004008 <sin+0x84>)
 8003f88:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8003f8c:	42ac      	cmp	r4, r5
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	b087      	sub	sp, #28
 8003f94:	d806      	bhi.n	8003fa4 <sin+0x20>
 8003f96:	2300      	movs	r3, #0
 8003f98:	2200      	movs	r2, #0
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f000 f8f7 	bl	8004190 <__kernel_sin>
 8003fa2:	e004      	b.n	8003fae <sin+0x2a>
 8003fa4:	4d19      	ldr	r5, [pc, #100]	@ (800400c <sin+0x88>)
 8003fa6:	42ac      	cmp	r4, r5
 8003fa8:	d903      	bls.n	8003fb2 <sin+0x2e>
 8003faa:	f7fc f989 	bl	80002c0 <__aeabi_dsub>
 8003fae:	b007      	add	sp, #28
 8003fb0:	bd30      	pop	{r4, r5, pc}
 8003fb2:	aa02      	add	r2, sp, #8
 8003fb4:	f000 f9a4 	bl	8004300 <__ieee754_rem_pio2>
 8003fb8:	f000 0003 	and.w	r0, r0, #3
 8003fbc:	2801      	cmp	r0, #1
 8003fbe:	d009      	beq.n	8003fd4 <sin+0x50>
 8003fc0:	2802      	cmp	r0, #2
 8003fc2:	d00e      	beq.n	8003fe2 <sin+0x5e>
 8003fc4:	b9c0      	cbnz	r0, 8003ff8 <sin+0x74>
 8003fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fca:	2301      	movs	r3, #1
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fd2:	e7e4      	b.n	8003f9e <sin+0x1a>
 8003fd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fdc:	f000 f818 	bl	8004010 <__kernel_cos>
 8003fe0:	e7e5      	b.n	8003fae <sin+0x2a>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fee:	f000 f8cf 	bl	8004190 <__kernel_sin>
 8003ff2:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8003ff6:	e7da      	b.n	8003fae <sin+0x2a>
 8003ff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004000:	f000 f806 	bl	8004010 <__kernel_cos>
 8004004:	e7f5      	b.n	8003ff2 <sin+0x6e>
 8004006:	bf00      	nop
 8004008:	3fe921fb 	.word	0x3fe921fb
 800400c:	7fefffff 	.word	0x7fefffff

08004010 <__kernel_cos>:
 8004010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004014:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8004018:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800401c:	4680      	mov	r8, r0
 800401e:	4689      	mov	r9, r1
 8004020:	e9cd 2300 	strd	r2, r3, [sp]
 8004024:	d204      	bcs.n	8004030 <__kernel_cos+0x20>
 8004026:	f7fc fd9d 	bl	8000b64 <__aeabi_d2iz>
 800402a:	2800      	cmp	r0, #0
 800402c:	f000 8086 	beq.w	800413c <__kernel_cos+0x12c>
 8004030:	4642      	mov	r2, r8
 8004032:	464b      	mov	r3, r9
 8004034:	4640      	mov	r0, r8
 8004036:	4649      	mov	r1, r9
 8004038:	f7fc fafa 	bl	8000630 <__aeabi_dmul>
 800403c:	2200      	movs	r2, #0
 800403e:	4b4e      	ldr	r3, [pc, #312]	@ (8004178 <__kernel_cos+0x168>)
 8004040:	4604      	mov	r4, r0
 8004042:	460d      	mov	r5, r1
 8004044:	f7fc faf4 	bl	8000630 <__aeabi_dmul>
 8004048:	a33f      	add	r3, pc, #252	@ (adr r3, 8004148 <__kernel_cos+0x138>)
 800404a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404e:	4682      	mov	sl, r0
 8004050:	468b      	mov	fp, r1
 8004052:	4620      	mov	r0, r4
 8004054:	4629      	mov	r1, r5
 8004056:	f7fc faeb 	bl	8000630 <__aeabi_dmul>
 800405a:	a33d      	add	r3, pc, #244	@ (adr r3, 8004150 <__kernel_cos+0x140>)
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f7fc f930 	bl	80002c4 <__adddf3>
 8004064:	4622      	mov	r2, r4
 8004066:	462b      	mov	r3, r5
 8004068:	f7fc fae2 	bl	8000630 <__aeabi_dmul>
 800406c:	a33a      	add	r3, pc, #232	@ (adr r3, 8004158 <__kernel_cos+0x148>)
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	f7fc f925 	bl	80002c0 <__aeabi_dsub>
 8004076:	4622      	mov	r2, r4
 8004078:	462b      	mov	r3, r5
 800407a:	f7fc fad9 	bl	8000630 <__aeabi_dmul>
 800407e:	a338      	add	r3, pc, #224	@ (adr r3, 8004160 <__kernel_cos+0x150>)
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f7fc f91e 	bl	80002c4 <__adddf3>
 8004088:	4622      	mov	r2, r4
 800408a:	462b      	mov	r3, r5
 800408c:	f7fc fad0 	bl	8000630 <__aeabi_dmul>
 8004090:	a335      	add	r3, pc, #212	@ (adr r3, 8004168 <__kernel_cos+0x158>)
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	f7fc f913 	bl	80002c0 <__aeabi_dsub>
 800409a:	4622      	mov	r2, r4
 800409c:	462b      	mov	r3, r5
 800409e:	f7fc fac7 	bl	8000630 <__aeabi_dmul>
 80040a2:	a333      	add	r3, pc, #204	@ (adr r3, 8004170 <__kernel_cos+0x160>)
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	f7fc f90c 	bl	80002c4 <__adddf3>
 80040ac:	4622      	mov	r2, r4
 80040ae:	462b      	mov	r3, r5
 80040b0:	f7fc fabe 	bl	8000630 <__aeabi_dmul>
 80040b4:	4622      	mov	r2, r4
 80040b6:	462b      	mov	r3, r5
 80040b8:	f7fc faba 	bl	8000630 <__aeabi_dmul>
 80040bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040c0:	4604      	mov	r4, r0
 80040c2:	460d      	mov	r5, r1
 80040c4:	4640      	mov	r0, r8
 80040c6:	4649      	mov	r1, r9
 80040c8:	f7fc fab2 	bl	8000630 <__aeabi_dmul>
 80040cc:	460b      	mov	r3, r1
 80040ce:	4602      	mov	r2, r0
 80040d0:	4629      	mov	r1, r5
 80040d2:	4620      	mov	r0, r4
 80040d4:	f7fc f8f4 	bl	80002c0 <__aeabi_dsub>
 80040d8:	4b28      	ldr	r3, [pc, #160]	@ (800417c <__kernel_cos+0x16c>)
 80040da:	4680      	mov	r8, r0
 80040dc:	429e      	cmp	r6, r3
 80040de:	4689      	mov	r9, r1
 80040e0:	d80e      	bhi.n	8004100 <__kernel_cos+0xf0>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4650      	mov	r0, sl
 80040e8:	4659      	mov	r1, fp
 80040ea:	f7fc f8e9 	bl	80002c0 <__aeabi_dsub>
 80040ee:	4602      	mov	r2, r0
 80040f0:	2000      	movs	r0, #0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4922      	ldr	r1, [pc, #136]	@ (8004180 <__kernel_cos+0x170>)
 80040f6:	f7fc f8e3 	bl	80002c0 <__aeabi_dsub>
 80040fa:	b003      	add	sp, #12
 80040fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004100:	2400      	movs	r4, #0
 8004102:	4b20      	ldr	r3, [pc, #128]	@ (8004184 <__kernel_cos+0x174>)
 8004104:	4622      	mov	r2, r4
 8004106:	429e      	cmp	r6, r3
 8004108:	bf8c      	ite	hi
 800410a:	4d1f      	ldrhi	r5, [pc, #124]	@ (8004188 <__kernel_cos+0x178>)
 800410c:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8004110:	462b      	mov	r3, r5
 8004112:	2000      	movs	r0, #0
 8004114:	491a      	ldr	r1, [pc, #104]	@ (8004180 <__kernel_cos+0x170>)
 8004116:	f7fc f8d3 	bl	80002c0 <__aeabi_dsub>
 800411a:	4622      	mov	r2, r4
 800411c:	4606      	mov	r6, r0
 800411e:	460f      	mov	r7, r1
 8004120:	462b      	mov	r3, r5
 8004122:	4650      	mov	r0, sl
 8004124:	4659      	mov	r1, fp
 8004126:	f7fc f8cb 	bl	80002c0 <__aeabi_dsub>
 800412a:	4642      	mov	r2, r8
 800412c:	464b      	mov	r3, r9
 800412e:	f7fc f8c7 	bl	80002c0 <__aeabi_dsub>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4630      	mov	r0, r6
 8004138:	4639      	mov	r1, r7
 800413a:	e7dc      	b.n	80040f6 <__kernel_cos+0xe6>
 800413c:	2000      	movs	r0, #0
 800413e:	4910      	ldr	r1, [pc, #64]	@ (8004180 <__kernel_cos+0x170>)
 8004140:	e7db      	b.n	80040fa <__kernel_cos+0xea>
 8004142:	bf00      	nop
 8004144:	f3af 8000 	nop.w
 8004148:	be8838d4 	.word	0xbe8838d4
 800414c:	bda8fae9 	.word	0xbda8fae9
 8004150:	bdb4b1c4 	.word	0xbdb4b1c4
 8004154:	3e21ee9e 	.word	0x3e21ee9e
 8004158:	809c52ad 	.word	0x809c52ad
 800415c:	3e927e4f 	.word	0x3e927e4f
 8004160:	19cb1590 	.word	0x19cb1590
 8004164:	3efa01a0 	.word	0x3efa01a0
 8004168:	16c15177 	.word	0x16c15177
 800416c:	3f56c16c 	.word	0x3f56c16c
 8004170:	5555554c 	.word	0x5555554c
 8004174:	3fa55555 	.word	0x3fa55555
 8004178:	3fe00000 	.word	0x3fe00000
 800417c:	3fd33332 	.word	0x3fd33332
 8004180:	3ff00000 	.word	0x3ff00000
 8004184:	3fe90000 	.word	0x3fe90000
 8004188:	3fd20000 	.word	0x3fd20000
 800418c:	00000000 	.word	0x00000000

08004190 <__kernel_sin>:
 8004190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004194:	461f      	mov	r7, r3
 8004196:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800419a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800419e:	4604      	mov	r4, r0
 80041a0:	460d      	mov	r5, r1
 80041a2:	4616      	mov	r6, r2
 80041a4:	b085      	sub	sp, #20
 80041a6:	d203      	bcs.n	80041b0 <__kernel_sin+0x20>
 80041a8:	f7fc fcdc 	bl	8000b64 <__aeabi_d2iz>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	d051      	beq.n	8004254 <__kernel_sin+0xc4>
 80041b0:	4622      	mov	r2, r4
 80041b2:	462b      	mov	r3, r5
 80041b4:	4620      	mov	r0, r4
 80041b6:	4629      	mov	r1, r5
 80041b8:	f7fc fa3a 	bl	8000630 <__aeabi_dmul>
 80041bc:	4682      	mov	sl, r0
 80041be:	468b      	mov	fp, r1
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4620      	mov	r0, r4
 80041c6:	4629      	mov	r1, r5
 80041c8:	f7fc fa32 	bl	8000630 <__aeabi_dmul>
 80041cc:	a33e      	add	r3, pc, #248	@ (adr r3, 80042c8 <__kernel_sin+0x138>)
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	4680      	mov	r8, r0
 80041d4:	4689      	mov	r9, r1
 80041d6:	4650      	mov	r0, sl
 80041d8:	4659      	mov	r1, fp
 80041da:	f7fc fa29 	bl	8000630 <__aeabi_dmul>
 80041de:	a33c      	add	r3, pc, #240	@ (adr r3, 80042d0 <__kernel_sin+0x140>)
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f7fc f86c 	bl	80002c0 <__aeabi_dsub>
 80041e8:	4652      	mov	r2, sl
 80041ea:	465b      	mov	r3, fp
 80041ec:	f7fc fa20 	bl	8000630 <__aeabi_dmul>
 80041f0:	a339      	add	r3, pc, #228	@ (adr r3, 80042d8 <__kernel_sin+0x148>)
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	f7fc f865 	bl	80002c4 <__adddf3>
 80041fa:	4652      	mov	r2, sl
 80041fc:	465b      	mov	r3, fp
 80041fe:	f7fc fa17 	bl	8000630 <__aeabi_dmul>
 8004202:	a337      	add	r3, pc, #220	@ (adr r3, 80042e0 <__kernel_sin+0x150>)
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	f7fc f85a 	bl	80002c0 <__aeabi_dsub>
 800420c:	4652      	mov	r2, sl
 800420e:	465b      	mov	r3, fp
 8004210:	f7fc fa0e 	bl	8000630 <__aeabi_dmul>
 8004214:	a334      	add	r3, pc, #208	@ (adr r3, 80042e8 <__kernel_sin+0x158>)
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	f7fc f853 	bl	80002c4 <__adddf3>
 800421e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004220:	e9cd 0100 	strd	r0, r1, [sp]
 8004224:	b9db      	cbnz	r3, 800425e <__kernel_sin+0xce>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4650      	mov	r0, sl
 800422c:	4659      	mov	r1, fp
 800422e:	f7fc f9ff 	bl	8000630 <__aeabi_dmul>
 8004232:	a32f      	add	r3, pc, #188	@ (adr r3, 80042f0 <__kernel_sin+0x160>)
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	f7fc f842 	bl	80002c0 <__aeabi_dsub>
 800423c:	4642      	mov	r2, r8
 800423e:	464b      	mov	r3, r9
 8004240:	f7fc f9f6 	bl	8000630 <__aeabi_dmul>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4620      	mov	r0, r4
 800424a:	4629      	mov	r1, r5
 800424c:	f7fc f83a 	bl	80002c4 <__adddf3>
 8004250:	4604      	mov	r4, r0
 8004252:	460d      	mov	r5, r1
 8004254:	4620      	mov	r0, r4
 8004256:	4629      	mov	r1, r5
 8004258:	b005      	add	sp, #20
 800425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800425e:	2200      	movs	r2, #0
 8004260:	4630      	mov	r0, r6
 8004262:	4639      	mov	r1, r7
 8004264:	4b24      	ldr	r3, [pc, #144]	@ (80042f8 <__kernel_sin+0x168>)
 8004266:	f7fc f9e3 	bl	8000630 <__aeabi_dmul>
 800426a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800426e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004272:	4640      	mov	r0, r8
 8004274:	4649      	mov	r1, r9
 8004276:	f7fc f9db 	bl	8000630 <__aeabi_dmul>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004282:	f7fc f81d 	bl	80002c0 <__aeabi_dsub>
 8004286:	4652      	mov	r2, sl
 8004288:	465b      	mov	r3, fp
 800428a:	f7fc f9d1 	bl	8000630 <__aeabi_dmul>
 800428e:	4632      	mov	r2, r6
 8004290:	463b      	mov	r3, r7
 8004292:	f7fc f815 	bl	80002c0 <__aeabi_dsub>
 8004296:	a316      	add	r3, pc, #88	@ (adr r3, 80042f0 <__kernel_sin+0x160>)
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	4606      	mov	r6, r0
 800429e:	460f      	mov	r7, r1
 80042a0:	4640      	mov	r0, r8
 80042a2:	4649      	mov	r1, r9
 80042a4:	f7fc f9c4 	bl	8000630 <__aeabi_dmul>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4630      	mov	r0, r6
 80042ae:	4639      	mov	r1, r7
 80042b0:	f7fc f808 	bl	80002c4 <__adddf3>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4620      	mov	r0, r4
 80042ba:	4629      	mov	r1, r5
 80042bc:	f7fc f800 	bl	80002c0 <__aeabi_dsub>
 80042c0:	e7c6      	b.n	8004250 <__kernel_sin+0xc0>
 80042c2:	bf00      	nop
 80042c4:	f3af 8000 	nop.w
 80042c8:	5acfd57c 	.word	0x5acfd57c
 80042cc:	3de5d93a 	.word	0x3de5d93a
 80042d0:	8a2b9ceb 	.word	0x8a2b9ceb
 80042d4:	3e5ae5e6 	.word	0x3e5ae5e6
 80042d8:	57b1fe7d 	.word	0x57b1fe7d
 80042dc:	3ec71de3 	.word	0x3ec71de3
 80042e0:	19c161d5 	.word	0x19c161d5
 80042e4:	3f2a01a0 	.word	0x3f2a01a0
 80042e8:	1110f8a6 	.word	0x1110f8a6
 80042ec:	3f811111 	.word	0x3f811111
 80042f0:	55555549 	.word	0x55555549
 80042f4:	3fc55555 	.word	0x3fc55555
 80042f8:	3fe00000 	.word	0x3fe00000
 80042fc:	00000000 	.word	0x00000000

08004300 <__ieee754_rem_pio2>:
 8004300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004304:	4bc4      	ldr	r3, [pc, #784]	@ (8004618 <__ieee754_rem_pio2+0x318>)
 8004306:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800430a:	b08d      	sub	sp, #52	@ 0x34
 800430c:	4598      	cmp	r8, r3
 800430e:	4606      	mov	r6, r0
 8004310:	460f      	mov	r7, r1
 8004312:	4614      	mov	r4, r2
 8004314:	9104      	str	r1, [sp, #16]
 8004316:	d807      	bhi.n	8004328 <__ieee754_rem_pio2+0x28>
 8004318:	e9c2 6700 	strd	r6, r7, [r2]
 800431c:	2300      	movs	r3, #0
 800431e:	2200      	movs	r2, #0
 8004320:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004324:	2500      	movs	r5, #0
 8004326:	e026      	b.n	8004376 <__ieee754_rem_pio2+0x76>
 8004328:	4bbc      	ldr	r3, [pc, #752]	@ (800461c <__ieee754_rem_pio2+0x31c>)
 800432a:	4598      	cmp	r8, r3
 800432c:	d876      	bhi.n	800441c <__ieee754_rem_pio2+0x11c>
 800432e:	9b04      	ldr	r3, [sp, #16]
 8004330:	4dbb      	ldr	r5, [pc, #748]	@ (8004620 <__ieee754_rem_pio2+0x320>)
 8004332:	2b00      	cmp	r3, #0
 8004334:	a3aa      	add	r3, pc, #680	@ (adr r3, 80045e0 <__ieee754_rem_pio2+0x2e0>)
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	dd38      	ble.n	80043ae <__ieee754_rem_pio2+0xae>
 800433c:	f7fb ffc0 	bl	80002c0 <__aeabi_dsub>
 8004340:	45a8      	cmp	r8, r5
 8004342:	4606      	mov	r6, r0
 8004344:	460f      	mov	r7, r1
 8004346:	d01a      	beq.n	800437e <__ieee754_rem_pio2+0x7e>
 8004348:	a3a7      	add	r3, pc, #668	@ (adr r3, 80045e8 <__ieee754_rem_pio2+0x2e8>)
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	f7fb ffb7 	bl	80002c0 <__aeabi_dsub>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4680      	mov	r8, r0
 8004358:	4689      	mov	r9, r1
 800435a:	4630      	mov	r0, r6
 800435c:	4639      	mov	r1, r7
 800435e:	f7fb ffaf 	bl	80002c0 <__aeabi_dsub>
 8004362:	a3a1      	add	r3, pc, #644	@ (adr r3, 80045e8 <__ieee754_rem_pio2+0x2e8>)
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	f7fb ffaa 	bl	80002c0 <__aeabi_dsub>
 800436c:	2501      	movs	r5, #1
 800436e:	e9c4 8900 	strd	r8, r9, [r4]
 8004372:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004376:	4628      	mov	r0, r5
 8004378:	b00d      	add	sp, #52	@ 0x34
 800437a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800437e:	a39c      	add	r3, pc, #624	@ (adr r3, 80045f0 <__ieee754_rem_pio2+0x2f0>)
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	f7fb ff9c 	bl	80002c0 <__aeabi_dsub>
 8004388:	a39b      	add	r3, pc, #620	@ (adr r3, 80045f8 <__ieee754_rem_pio2+0x2f8>)
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	4606      	mov	r6, r0
 8004390:	460f      	mov	r7, r1
 8004392:	f7fb ff95 	bl	80002c0 <__aeabi_dsub>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4680      	mov	r8, r0
 800439c:	4689      	mov	r9, r1
 800439e:	4630      	mov	r0, r6
 80043a0:	4639      	mov	r1, r7
 80043a2:	f7fb ff8d 	bl	80002c0 <__aeabi_dsub>
 80043a6:	a394      	add	r3, pc, #592	@ (adr r3, 80045f8 <__ieee754_rem_pio2+0x2f8>)
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	e7dc      	b.n	8004368 <__ieee754_rem_pio2+0x68>
 80043ae:	f7fb ff89 	bl	80002c4 <__adddf3>
 80043b2:	45a8      	cmp	r8, r5
 80043b4:	4606      	mov	r6, r0
 80043b6:	460f      	mov	r7, r1
 80043b8:	d018      	beq.n	80043ec <__ieee754_rem_pio2+0xec>
 80043ba:	a38b      	add	r3, pc, #556	@ (adr r3, 80045e8 <__ieee754_rem_pio2+0x2e8>)
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f7fb ff80 	bl	80002c4 <__adddf3>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4680      	mov	r8, r0
 80043ca:	4689      	mov	r9, r1
 80043cc:	4630      	mov	r0, r6
 80043ce:	4639      	mov	r1, r7
 80043d0:	f7fb ff76 	bl	80002c0 <__aeabi_dsub>
 80043d4:	a384      	add	r3, pc, #528	@ (adr r3, 80045e8 <__ieee754_rem_pio2+0x2e8>)
 80043d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043da:	f7fb ff73 	bl	80002c4 <__adddf3>
 80043de:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80043e2:	e9c4 8900 	strd	r8, r9, [r4]
 80043e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80043ea:	e7c4      	b.n	8004376 <__ieee754_rem_pio2+0x76>
 80043ec:	a380      	add	r3, pc, #512	@ (adr r3, 80045f0 <__ieee754_rem_pio2+0x2f0>)
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	f7fb ff67 	bl	80002c4 <__adddf3>
 80043f6:	a380      	add	r3, pc, #512	@ (adr r3, 80045f8 <__ieee754_rem_pio2+0x2f8>)
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	4606      	mov	r6, r0
 80043fe:	460f      	mov	r7, r1
 8004400:	f7fb ff60 	bl	80002c4 <__adddf3>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4680      	mov	r8, r0
 800440a:	4689      	mov	r9, r1
 800440c:	4630      	mov	r0, r6
 800440e:	4639      	mov	r1, r7
 8004410:	f7fb ff56 	bl	80002c0 <__aeabi_dsub>
 8004414:	a378      	add	r3, pc, #480	@ (adr r3, 80045f8 <__ieee754_rem_pio2+0x2f8>)
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	e7de      	b.n	80043da <__ieee754_rem_pio2+0xda>
 800441c:	4b81      	ldr	r3, [pc, #516]	@ (8004624 <__ieee754_rem_pio2+0x324>)
 800441e:	4598      	cmp	r8, r3
 8004420:	f200 80cf 	bhi.w	80045c2 <__ieee754_rem_pio2+0x2c2>
 8004424:	f000 f962 	bl	80046ec <fabs>
 8004428:	a375      	add	r3, pc, #468	@ (adr r3, 8004600 <__ieee754_rem_pio2+0x300>)
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	4606      	mov	r6, r0
 8004430:	460f      	mov	r7, r1
 8004432:	f7fc f8fd 	bl	8000630 <__aeabi_dmul>
 8004436:	2200      	movs	r2, #0
 8004438:	4b7b      	ldr	r3, [pc, #492]	@ (8004628 <__ieee754_rem_pio2+0x328>)
 800443a:	f7fb ff43 	bl	80002c4 <__adddf3>
 800443e:	f7fc fb91 	bl	8000b64 <__aeabi_d2iz>
 8004442:	4605      	mov	r5, r0
 8004444:	f7fc f88a 	bl	800055c <__aeabi_i2d>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004450:	a363      	add	r3, pc, #396	@ (adr r3, 80045e0 <__ieee754_rem_pio2+0x2e0>)
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	f7fc f8eb 	bl	8000630 <__aeabi_dmul>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4630      	mov	r0, r6
 8004460:	4639      	mov	r1, r7
 8004462:	f7fb ff2d 	bl	80002c0 <__aeabi_dsub>
 8004466:	a360      	add	r3, pc, #384	@ (adr r3, 80045e8 <__ieee754_rem_pio2+0x2e8>)
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	4682      	mov	sl, r0
 800446e:	468b      	mov	fp, r1
 8004470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004474:	f7fc f8dc 	bl	8000630 <__aeabi_dmul>
 8004478:	2d1f      	cmp	r5, #31
 800447a:	4606      	mov	r6, r0
 800447c:	460f      	mov	r7, r1
 800447e:	dc0c      	bgt.n	800449a <__ieee754_rem_pio2+0x19a>
 8004480:	4b6a      	ldr	r3, [pc, #424]	@ (800462c <__ieee754_rem_pio2+0x32c>)
 8004482:	1e6a      	subs	r2, r5, #1
 8004484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004488:	4543      	cmp	r3, r8
 800448a:	d006      	beq.n	800449a <__ieee754_rem_pio2+0x19a>
 800448c:	4632      	mov	r2, r6
 800448e:	463b      	mov	r3, r7
 8004490:	4650      	mov	r0, sl
 8004492:	4659      	mov	r1, fp
 8004494:	f7fb ff14 	bl	80002c0 <__aeabi_dsub>
 8004498:	e00e      	b.n	80044b8 <__ieee754_rem_pio2+0x1b8>
 800449a:	463b      	mov	r3, r7
 800449c:	4632      	mov	r2, r6
 800449e:	4650      	mov	r0, sl
 80044a0:	4659      	mov	r1, fp
 80044a2:	f7fb ff0d 	bl	80002c0 <__aeabi_dsub>
 80044a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80044aa:	9305      	str	r3, [sp, #20]
 80044ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80044b0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	dc02      	bgt.n	80044be <__ieee754_rem_pio2+0x1be>
 80044b8:	e9c4 0100 	strd	r0, r1, [r4]
 80044bc:	e039      	b.n	8004532 <__ieee754_rem_pio2+0x232>
 80044be:	a34c      	add	r3, pc, #304	@ (adr r3, 80045f0 <__ieee754_rem_pio2+0x2f0>)
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044c8:	f7fc f8b2 	bl	8000630 <__aeabi_dmul>
 80044cc:	4606      	mov	r6, r0
 80044ce:	460f      	mov	r7, r1
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4650      	mov	r0, sl
 80044d6:	4659      	mov	r1, fp
 80044d8:	f7fb fef2 	bl	80002c0 <__aeabi_dsub>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4680      	mov	r8, r0
 80044e2:	4689      	mov	r9, r1
 80044e4:	4650      	mov	r0, sl
 80044e6:	4659      	mov	r1, fp
 80044e8:	f7fb feea 	bl	80002c0 <__aeabi_dsub>
 80044ec:	4632      	mov	r2, r6
 80044ee:	463b      	mov	r3, r7
 80044f0:	f7fb fee6 	bl	80002c0 <__aeabi_dsub>
 80044f4:	a340      	add	r3, pc, #256	@ (adr r3, 80045f8 <__ieee754_rem_pio2+0x2f8>)
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	4606      	mov	r6, r0
 80044fc:	460f      	mov	r7, r1
 80044fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004502:	f7fc f895 	bl	8000630 <__aeabi_dmul>
 8004506:	4632      	mov	r2, r6
 8004508:	463b      	mov	r3, r7
 800450a:	f7fb fed9 	bl	80002c0 <__aeabi_dsub>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4606      	mov	r6, r0
 8004514:	460f      	mov	r7, r1
 8004516:	4640      	mov	r0, r8
 8004518:	4649      	mov	r1, r9
 800451a:	f7fb fed1 	bl	80002c0 <__aeabi_dsub>
 800451e:	9a05      	ldr	r2, [sp, #20]
 8004520:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b31      	cmp	r3, #49	@ 0x31
 8004528:	dc20      	bgt.n	800456c <__ieee754_rem_pio2+0x26c>
 800452a:	46c2      	mov	sl, r8
 800452c:	46cb      	mov	fp, r9
 800452e:	e9c4 0100 	strd	r0, r1, [r4]
 8004532:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004536:	4650      	mov	r0, sl
 8004538:	4642      	mov	r2, r8
 800453a:	464b      	mov	r3, r9
 800453c:	4659      	mov	r1, fp
 800453e:	f7fb febf 	bl	80002c0 <__aeabi_dsub>
 8004542:	463b      	mov	r3, r7
 8004544:	4632      	mov	r2, r6
 8004546:	f7fb febb 	bl	80002c0 <__aeabi_dsub>
 800454a:	9b04      	ldr	r3, [sp, #16]
 800454c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	f6bf af10 	bge.w	8004376 <__ieee754_rem_pio2+0x76>
 8004556:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800455a:	6063      	str	r3, [r4, #4]
 800455c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004560:	f8c4 8000 	str.w	r8, [r4]
 8004564:	60a0      	str	r0, [r4, #8]
 8004566:	60e3      	str	r3, [r4, #12]
 8004568:	426d      	negs	r5, r5
 800456a:	e704      	b.n	8004376 <__ieee754_rem_pio2+0x76>
 800456c:	a326      	add	r3, pc, #152	@ (adr r3, 8004608 <__ieee754_rem_pio2+0x308>)
 800456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004576:	f7fc f85b 	bl	8000630 <__aeabi_dmul>
 800457a:	4606      	mov	r6, r0
 800457c:	460f      	mov	r7, r1
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4640      	mov	r0, r8
 8004584:	4649      	mov	r1, r9
 8004586:	f7fb fe9b 	bl	80002c0 <__aeabi_dsub>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4682      	mov	sl, r0
 8004590:	468b      	mov	fp, r1
 8004592:	4640      	mov	r0, r8
 8004594:	4649      	mov	r1, r9
 8004596:	f7fb fe93 	bl	80002c0 <__aeabi_dsub>
 800459a:	4632      	mov	r2, r6
 800459c:	463b      	mov	r3, r7
 800459e:	f7fb fe8f 	bl	80002c0 <__aeabi_dsub>
 80045a2:	a31b      	add	r3, pc, #108	@ (adr r3, 8004610 <__ieee754_rem_pio2+0x310>)
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	4606      	mov	r6, r0
 80045aa:	460f      	mov	r7, r1
 80045ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045b0:	f7fc f83e 	bl	8000630 <__aeabi_dmul>
 80045b4:	4632      	mov	r2, r6
 80045b6:	463b      	mov	r3, r7
 80045b8:	f7fb fe82 	bl	80002c0 <__aeabi_dsub>
 80045bc:	4606      	mov	r6, r0
 80045be:	460f      	mov	r7, r1
 80045c0:	e764      	b.n	800448c <__ieee754_rem_pio2+0x18c>
 80045c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004630 <__ieee754_rem_pio2+0x330>)
 80045c4:	4598      	cmp	r8, r3
 80045c6:	d935      	bls.n	8004634 <__ieee754_rem_pio2+0x334>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	f7fb fe78 	bl	80002c0 <__aeabi_dsub>
 80045d0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80045d4:	e9c4 0100 	strd	r0, r1, [r4]
 80045d8:	e6a4      	b.n	8004324 <__ieee754_rem_pio2+0x24>
 80045da:	bf00      	nop
 80045dc:	f3af 8000 	nop.w
 80045e0:	54400000 	.word	0x54400000
 80045e4:	3ff921fb 	.word	0x3ff921fb
 80045e8:	1a626331 	.word	0x1a626331
 80045ec:	3dd0b461 	.word	0x3dd0b461
 80045f0:	1a600000 	.word	0x1a600000
 80045f4:	3dd0b461 	.word	0x3dd0b461
 80045f8:	2e037073 	.word	0x2e037073
 80045fc:	3ba3198a 	.word	0x3ba3198a
 8004600:	6dc9c883 	.word	0x6dc9c883
 8004604:	3fe45f30 	.word	0x3fe45f30
 8004608:	2e000000 	.word	0x2e000000
 800460c:	3ba3198a 	.word	0x3ba3198a
 8004610:	252049c1 	.word	0x252049c1
 8004614:	397b839a 	.word	0x397b839a
 8004618:	3fe921fb 	.word	0x3fe921fb
 800461c:	4002d97b 	.word	0x4002d97b
 8004620:	3ff921fb 	.word	0x3ff921fb
 8004624:	413921fb 	.word	0x413921fb
 8004628:	3fe00000 	.word	0x3fe00000
 800462c:	08004f78 	.word	0x08004f78
 8004630:	7fefffff 	.word	0x7fefffff
 8004634:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004638:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800463c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004640:	460f      	mov	r7, r1
 8004642:	f7fc fa8f 	bl	8000b64 <__aeabi_d2iz>
 8004646:	f7fb ff89 	bl	800055c <__aeabi_i2d>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4630      	mov	r0, r6
 8004650:	4639      	mov	r1, r7
 8004652:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004656:	f7fb fe33 	bl	80002c0 <__aeabi_dsub>
 800465a:	2200      	movs	r2, #0
 800465c:	4b21      	ldr	r3, [pc, #132]	@ (80046e4 <__ieee754_rem_pio2+0x3e4>)
 800465e:	f7fb ffe7 	bl	8000630 <__aeabi_dmul>
 8004662:	460f      	mov	r7, r1
 8004664:	4606      	mov	r6, r0
 8004666:	f7fc fa7d 	bl	8000b64 <__aeabi_d2iz>
 800466a:	f7fb ff77 	bl	800055c <__aeabi_i2d>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4630      	mov	r0, r6
 8004674:	4639      	mov	r1, r7
 8004676:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800467a:	f7fb fe21 	bl	80002c0 <__aeabi_dsub>
 800467e:	2200      	movs	r2, #0
 8004680:	4b18      	ldr	r3, [pc, #96]	@ (80046e4 <__ieee754_rem_pio2+0x3e4>)
 8004682:	f7fb ffd5 	bl	8000630 <__aeabi_dmul>
 8004686:	f04f 0803 	mov.w	r8, #3
 800468a:	2600      	movs	r6, #0
 800468c:	2700      	movs	r7, #0
 800468e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004692:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004696:	4632      	mov	r2, r6
 8004698:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800469c:	463b      	mov	r3, r7
 800469e:	46c2      	mov	sl, r8
 80046a0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80046a4:	f7fc fa2c 	bl	8000b00 <__aeabi_dcmpeq>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	d1f4      	bne.n	8004696 <__ieee754_rem_pio2+0x396>
 80046ac:	4b0e      	ldr	r3, [pc, #56]	@ (80046e8 <__ieee754_rem_pio2+0x3e8>)
 80046ae:	462a      	mov	r2, r5
 80046b0:	9301      	str	r3, [sp, #4]
 80046b2:	2302      	movs	r3, #2
 80046b4:	4621      	mov	r1, r4
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	a806      	add	r0, sp, #24
 80046ba:	4653      	mov	r3, sl
 80046bc:	f000 f81a 	bl	80046f4 <__kernel_rem_pio2>
 80046c0:	9b04      	ldr	r3, [sp, #16]
 80046c2:	4605      	mov	r5, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f6bf ae56 	bge.w	8004376 <__ieee754_rem_pio2+0x76>
 80046ca:	e9d4 2100 	ldrd	r2, r1, [r4]
 80046ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80046d2:	e9c4 2300 	strd	r2, r3, [r4]
 80046d6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80046da:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80046de:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80046e2:	e741      	b.n	8004568 <__ieee754_rem_pio2+0x268>
 80046e4:	41700000 	.word	0x41700000
 80046e8:	08004ff8 	.word	0x08004ff8

080046ec <fabs>:
 80046ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80046f0:	4619      	mov	r1, r3
 80046f2:	4770      	bx	lr

080046f4 <__kernel_rem_pio2>:
 80046f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80046fc:	9308      	str	r3, [sp, #32]
 80046fe:	9104      	str	r1, [sp, #16]
 8004700:	4bba      	ldr	r3, [pc, #744]	@ (80049ec <__kernel_rem_pio2+0x2f8>)
 8004702:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8004704:	f112 0f14 	cmn.w	r2, #20
 8004708:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800470c:	bfa8      	it	ge
 800470e:	1ed4      	subge	r4, r2, #3
 8004710:	9302      	str	r3, [sp, #8]
 8004712:	9b08      	ldr	r3, [sp, #32]
 8004714:	bfb8      	it	lt
 8004716:	2400      	movlt	r4, #0
 8004718:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800471c:	9306      	str	r3, [sp, #24]
 800471e:	bfa4      	itt	ge
 8004720:	2318      	movge	r3, #24
 8004722:	fb94 f4f3 	sdivge	r4, r4, r3
 8004726:	f06f 0317 	mvn.w	r3, #23
 800472a:	fb04 3303 	mla	r3, r4, r3, r3
 800472e:	eb03 0a02 	add.w	sl, r3, r2
 8004732:	9a06      	ldr	r2, [sp, #24]
 8004734:	9b02      	ldr	r3, [sp, #8]
 8004736:	1aa7      	subs	r7, r4, r2
 8004738:	eb03 0802 	add.w	r8, r3, r2
 800473c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800473e:	2500      	movs	r5, #0
 8004740:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004744:	2200      	movs	r2, #0
 8004746:	2300      	movs	r3, #0
 8004748:	9009      	str	r0, [sp, #36]	@ 0x24
 800474a:	ae20      	add	r6, sp, #128	@ 0x80
 800474c:	4545      	cmp	r5, r8
 800474e:	dd13      	ble.n	8004778 <__kernel_rem_pio2+0x84>
 8004750:	2700      	movs	r7, #0
 8004752:	9a08      	ldr	r2, [sp, #32]
 8004754:	ab20      	add	r3, sp, #128	@ 0x80
 8004756:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800475a:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800475e:	9b02      	ldr	r3, [sp, #8]
 8004760:	429f      	cmp	r7, r3
 8004762:	dc33      	bgt.n	80047cc <__kernel_rem_pio2+0xd8>
 8004764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004766:	2200      	movs	r2, #0
 8004768:	f1a3 0908 	sub.w	r9, r3, #8
 800476c:	2300      	movs	r3, #0
 800476e:	46a8      	mov	r8, r5
 8004770:	2600      	movs	r6, #0
 8004772:	e9cd 2300 	strd	r2, r3, [sp]
 8004776:	e01f      	b.n	80047b8 <__kernel_rem_pio2+0xc4>
 8004778:	42ef      	cmn	r7, r5
 800477a:	d40b      	bmi.n	8004794 <__kernel_rem_pio2+0xa0>
 800477c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004780:	e9cd 2300 	strd	r2, r3, [sp]
 8004784:	f7fb feea 	bl	800055c <__aeabi_i2d>
 8004788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800478c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004790:	3501      	adds	r5, #1
 8004792:	e7db      	b.n	800474c <__kernel_rem_pio2+0x58>
 8004794:	4610      	mov	r0, r2
 8004796:	4619      	mov	r1, r3
 8004798:	e7f8      	b.n	800478c <__kernel_rem_pio2+0x98>
 800479a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800479e:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80047a2:	f7fb ff45 	bl	8000630 <__aeabi_dmul>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047ae:	f7fb fd89 	bl	80002c4 <__adddf3>
 80047b2:	e9cd 0100 	strd	r0, r1, [sp]
 80047b6:	3601      	adds	r6, #1
 80047b8:	9b06      	ldr	r3, [sp, #24]
 80047ba:	429e      	cmp	r6, r3
 80047bc:	dded      	ble.n	800479a <__kernel_rem_pio2+0xa6>
 80047be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047c2:	3701      	adds	r7, #1
 80047c4:	e8eb 2302 	strd	r2, r3, [fp], #8
 80047c8:	3508      	adds	r5, #8
 80047ca:	e7c8      	b.n	800475e <__kernel_rem_pio2+0x6a>
 80047cc:	9b02      	ldr	r3, [sp, #8]
 80047ce:	aa0c      	add	r2, sp, #48	@ 0x30
 80047d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80047d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80047d6:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80047d8:	f8dd b008 	ldr.w	fp, [sp, #8]
 80047dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80047e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80047e2:	ab98      	add	r3, sp, #608	@ 0x260
 80047e4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80047e8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 80047ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 80047ee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80047f2:	ae0c      	add	r6, sp, #48	@ 0x30
 80047f4:	4699      	mov	r9, r3
 80047f6:	46b0      	mov	r8, r6
 80047f8:	465f      	mov	r7, fp
 80047fa:	9307      	str	r3, [sp, #28]
 80047fc:	2f00      	cmp	r7, #0
 80047fe:	dc71      	bgt.n	80048e4 <__kernel_rem_pio2+0x1f0>
 8004800:	4652      	mov	r2, sl
 8004802:	4620      	mov	r0, r4
 8004804:	4629      	mov	r1, r5
 8004806:	f000 fa97 	bl	8004d38 <scalbn>
 800480a:	2200      	movs	r2, #0
 800480c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004810:	4604      	mov	r4, r0
 8004812:	460d      	mov	r5, r1
 8004814:	f7fb ff0c 	bl	8000630 <__aeabi_dmul>
 8004818:	f000 fb02 	bl	8004e20 <floor>
 800481c:	2200      	movs	r2, #0
 800481e:	4b74      	ldr	r3, [pc, #464]	@ (80049f0 <__kernel_rem_pio2+0x2fc>)
 8004820:	f7fb ff06 	bl	8000630 <__aeabi_dmul>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4620      	mov	r0, r4
 800482a:	4629      	mov	r1, r5
 800482c:	f7fb fd48 	bl	80002c0 <__aeabi_dsub>
 8004830:	460d      	mov	r5, r1
 8004832:	4604      	mov	r4, r0
 8004834:	f7fc f996 	bl	8000b64 <__aeabi_d2iz>
 8004838:	9005      	str	r0, [sp, #20]
 800483a:	f7fb fe8f 	bl	800055c <__aeabi_i2d>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4620      	mov	r0, r4
 8004844:	4629      	mov	r1, r5
 8004846:	f7fb fd3b 	bl	80002c0 <__aeabi_dsub>
 800484a:	f1ba 0f00 	cmp.w	sl, #0
 800484e:	4680      	mov	r8, r0
 8004850:	4689      	mov	r9, r1
 8004852:	dd6d      	ble.n	8004930 <__kernel_rem_pio2+0x23c>
 8004854:	f10b 31ff 	add.w	r1, fp, #4294967295	@ 0xffffffff
 8004858:	ab0c      	add	r3, sp, #48	@ 0x30
 800485a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800485e:	9c05      	ldr	r4, [sp, #20]
 8004860:	f1ca 0018 	rsb	r0, sl, #24
 8004864:	fa43 f200 	asr.w	r2, r3, r0
 8004868:	4414      	add	r4, r2
 800486a:	4082      	lsls	r2, r0
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	aa0c      	add	r2, sp, #48	@ 0x30
 8004870:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004874:	f1ca 0217 	rsb	r2, sl, #23
 8004878:	9405      	str	r4, [sp, #20]
 800487a:	4113      	asrs	r3, r2
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	9b00      	ldr	r3, [sp, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	dd64      	ble.n	800494e <__kernel_rem_pio2+0x25a>
 8004884:	2200      	movs	r2, #0
 8004886:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800488a:	4614      	mov	r4, r2
 800488c:	9b05      	ldr	r3, [sp, #20]
 800488e:	3301      	adds	r3, #1
 8004890:	9305      	str	r3, [sp, #20]
 8004892:	4593      	cmp	fp, r2
 8004894:	f300 809d 	bgt.w	80049d2 <__kernel_rem_pio2+0x2de>
 8004898:	f1ba 0f00 	cmp.w	sl, #0
 800489c:	dd07      	ble.n	80048ae <__kernel_rem_pio2+0x1ba>
 800489e:	f1ba 0f01 	cmp.w	sl, #1
 80048a2:	f000 80b3 	beq.w	8004a0c <__kernel_rem_pio2+0x318>
 80048a6:	f1ba 0f02 	cmp.w	sl, #2
 80048aa:	f000 80ba 	beq.w	8004a22 <__kernel_rem_pio2+0x32e>
 80048ae:	9b00      	ldr	r3, [sp, #0]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d14c      	bne.n	800494e <__kernel_rem_pio2+0x25a>
 80048b4:	4642      	mov	r2, r8
 80048b6:	464b      	mov	r3, r9
 80048b8:	2000      	movs	r0, #0
 80048ba:	494e      	ldr	r1, [pc, #312]	@ (80049f4 <__kernel_rem_pio2+0x300>)
 80048bc:	f7fb fd00 	bl	80002c0 <__aeabi_dsub>
 80048c0:	4680      	mov	r8, r0
 80048c2:	4689      	mov	r9, r1
 80048c4:	2c00      	cmp	r4, #0
 80048c6:	d042      	beq.n	800494e <__kernel_rem_pio2+0x25a>
 80048c8:	4652      	mov	r2, sl
 80048ca:	2000      	movs	r0, #0
 80048cc:	4949      	ldr	r1, [pc, #292]	@ (80049f4 <__kernel_rem_pio2+0x300>)
 80048ce:	f000 fa33 	bl	8004d38 <scalbn>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4640      	mov	r0, r8
 80048d8:	4649      	mov	r1, r9
 80048da:	f7fb fcf1 	bl	80002c0 <__aeabi_dsub>
 80048de:	4680      	mov	r8, r0
 80048e0:	4689      	mov	r9, r1
 80048e2:	e034      	b.n	800494e <__kernel_rem_pio2+0x25a>
 80048e4:	2200      	movs	r2, #0
 80048e6:	4b44      	ldr	r3, [pc, #272]	@ (80049f8 <__kernel_rem_pio2+0x304>)
 80048e8:	4620      	mov	r0, r4
 80048ea:	4629      	mov	r1, r5
 80048ec:	f7fb fea0 	bl	8000630 <__aeabi_dmul>
 80048f0:	f7fc f938 	bl	8000b64 <__aeabi_d2iz>
 80048f4:	f7fb fe32 	bl	800055c <__aeabi_i2d>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	e9cd 2300 	strd	r2, r3, [sp]
 8004900:	2200      	movs	r2, #0
 8004902:	4b3e      	ldr	r3, [pc, #248]	@ (80049fc <__kernel_rem_pio2+0x308>)
 8004904:	f7fb fe94 	bl	8000630 <__aeabi_dmul>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4620      	mov	r0, r4
 800490e:	4629      	mov	r1, r5
 8004910:	f7fb fcd6 	bl	80002c0 <__aeabi_dsub>
 8004914:	f7fc f926 	bl	8000b64 <__aeabi_d2iz>
 8004918:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800491c:	f848 0b04 	str.w	r0, [r8], #4
 8004920:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004924:	f7fb fcce 	bl	80002c4 <__adddf3>
 8004928:	3f01      	subs	r7, #1
 800492a:	4604      	mov	r4, r0
 800492c:	460d      	mov	r5, r1
 800492e:	e765      	b.n	80047fc <__kernel_rem_pio2+0x108>
 8004930:	d106      	bne.n	8004940 <__kernel_rem_pio2+0x24c>
 8004932:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 8004936:	aa0c      	add	r2, sp, #48	@ 0x30
 8004938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800493c:	15db      	asrs	r3, r3, #23
 800493e:	e79d      	b.n	800487c <__kernel_rem_pio2+0x188>
 8004940:	2200      	movs	r2, #0
 8004942:	4b2f      	ldr	r3, [pc, #188]	@ (8004a00 <__kernel_rem_pio2+0x30c>)
 8004944:	f7fc f8fa 	bl	8000b3c <__aeabi_dcmpge>
 8004948:	2800      	cmp	r0, #0
 800494a:	d13f      	bne.n	80049cc <__kernel_rem_pio2+0x2d8>
 800494c:	9000      	str	r0, [sp, #0]
 800494e:	2200      	movs	r2, #0
 8004950:	2300      	movs	r3, #0
 8004952:	4640      	mov	r0, r8
 8004954:	4649      	mov	r1, r9
 8004956:	f7fc f8d3 	bl	8000b00 <__aeabi_dcmpeq>
 800495a:	2800      	cmp	r0, #0
 800495c:	f000 80b0 	beq.w	8004ac0 <__kernel_rem_pio2+0x3cc>
 8004960:	2200      	movs	r2, #0
 8004962:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 8004966:	9902      	ldr	r1, [sp, #8]
 8004968:	428b      	cmp	r3, r1
 800496a:	da62      	bge.n	8004a32 <__kernel_rem_pio2+0x33e>
 800496c:	2a00      	cmp	r2, #0
 800496e:	d077      	beq.n	8004a60 <__kernel_rem_pio2+0x36c>
 8004970:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004974:	ab0c      	add	r3, sp, #48	@ 0x30
 8004976:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800497a:	f1aa 0a18 	sub.w	sl, sl, #24
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f6      	beq.n	8004970 <__kernel_rem_pio2+0x27c>
 8004982:	4652      	mov	r2, sl
 8004984:	2000      	movs	r0, #0
 8004986:	491b      	ldr	r1, [pc, #108]	@ (80049f4 <__kernel_rem_pio2+0x300>)
 8004988:	f000 f9d6 	bl	8004d38 <scalbn>
 800498c:	465d      	mov	r5, fp
 800498e:	4606      	mov	r6, r0
 8004990:	460f      	mov	r7, r1
 8004992:	f04f 0900 	mov.w	r9, #0
 8004996:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004998:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80049f8 <__kernel_rem_pio2+0x304>
 800499c:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 80049a0:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 80049a4:	2d00      	cmp	r5, #0
 80049a6:	f280 80c1 	bge.w	8004b2c <__kernel_rem_pio2+0x438>
 80049aa:	465d      	mov	r5, fp
 80049ac:	2d00      	cmp	r5, #0
 80049ae:	f2c0 80f1 	blt.w	8004b94 <__kernel_rem_pio2+0x4a0>
 80049b2:	4b14      	ldr	r3, [pc, #80]	@ (8004a04 <__kernel_rem_pio2+0x310>)
 80049b4:	f04f 0900 	mov.w	r9, #0
 80049b8:	9306      	str	r3, [sp, #24]
 80049ba:	ab70      	add	r3, sp, #448	@ 0x1c0
 80049bc:	f04f 0a00 	mov.w	sl, #0
 80049c0:	2700      	movs	r7, #0
 80049c2:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 80049c6:	ebab 0605 	sub.w	r6, fp, r5
 80049ca:	e0d7      	b.n	8004b7c <__kernel_rem_pio2+0x488>
 80049cc:	2302      	movs	r3, #2
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	e758      	b.n	8004884 <__kernel_rem_pio2+0x190>
 80049d2:	f856 3b04 	ldr.w	r3, [r6], #4
 80049d6:	b9bc      	cbnz	r4, 8004a08 <__kernel_rem_pio2+0x314>
 80049d8:	b123      	cbz	r3, 80049e4 <__kernel_rem_pio2+0x2f0>
 80049da:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80049de:	f846 3c04 	str.w	r3, [r6, #-4]
 80049e2:	2301      	movs	r3, #1
 80049e4:	461c      	mov	r4, r3
 80049e6:	3201      	adds	r2, #1
 80049e8:	e753      	b.n	8004892 <__kernel_rem_pio2+0x19e>
 80049ea:	bf00      	nop
 80049ec:	08005140 	.word	0x08005140
 80049f0:	40200000 	.word	0x40200000
 80049f4:	3ff00000 	.word	0x3ff00000
 80049f8:	3e700000 	.word	0x3e700000
 80049fc:	41700000 	.word	0x41700000
 8004a00:	3fe00000 	.word	0x3fe00000
 8004a04:	08005100 	.word	0x08005100
 8004a08:	1acb      	subs	r3, r1, r3
 8004a0a:	e7e8      	b.n	80049de <__kernel_rem_pio2+0x2ea>
 8004a0c:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 8004a10:	ab0c      	add	r3, sp, #48	@ 0x30
 8004a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a16:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004a1a:	a90c      	add	r1, sp, #48	@ 0x30
 8004a1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004a20:	e745      	b.n	80048ae <__kernel_rem_pio2+0x1ba>
 8004a22:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 8004a26:	ab0c      	add	r3, sp, #48	@ 0x30
 8004a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a2c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004a30:	e7f3      	b.n	8004a1a <__kernel_rem_pio2+0x326>
 8004a32:	a90c      	add	r1, sp, #48	@ 0x30
 8004a34:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	e793      	b.n	8004966 <__kernel_rem_pio2+0x272>
 8004a3e:	3401      	adds	r4, #1
 8004a40:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004a44:	2a00      	cmp	r2, #0
 8004a46:	d0fa      	beq.n	8004a3e <__kernel_rem_pio2+0x34a>
 8004a48:	9b08      	ldr	r3, [sp, #32]
 8004a4a:	aa20      	add	r2, sp, #128	@ 0x80
 8004a4c:	445b      	add	r3, fp
 8004a4e:	f10b 0801 	add.w	r8, fp, #1
 8004a52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004a56:	445c      	add	r4, fp
 8004a58:	4544      	cmp	r4, r8
 8004a5a:	da04      	bge.n	8004a66 <__kernel_rem_pio2+0x372>
 8004a5c:	46a3      	mov	fp, r4
 8004a5e:	e6c0      	b.n	80047e2 <__kernel_rem_pio2+0xee>
 8004a60:	2401      	movs	r4, #1
 8004a62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a64:	e7ec      	b.n	8004a40 <__kernel_rem_pio2+0x34c>
 8004a66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a68:	46ab      	mov	fp, r5
 8004a6a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004a6e:	f7fb fd75 	bl	800055c <__aeabi_i2d>
 8004a72:	f04f 0900 	mov.w	r9, #0
 8004a76:	2600      	movs	r6, #0
 8004a78:	2700      	movs	r7, #0
 8004a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a7c:	e9c5 0100 	strd	r0, r1, [r5]
 8004a80:	3b08      	subs	r3, #8
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	9b06      	ldr	r3, [sp, #24]
 8004a86:	4599      	cmp	r9, r3
 8004a88:	dd07      	ble.n	8004a9a <__kernel_rem_pio2+0x3a6>
 8004a8a:	9b07      	ldr	r3, [sp, #28]
 8004a8c:	f108 0801 	add.w	r8, r8, #1
 8004a90:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8004a94:	3508      	adds	r5, #8
 8004a96:	9307      	str	r3, [sp, #28]
 8004a98:	e7de      	b.n	8004a58 <__kernel_rem_pio2+0x364>
 8004a9a:	9900      	ldr	r1, [sp, #0]
 8004a9c:	f109 0901 	add.w	r9, r9, #1
 8004aa0:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8004aa4:	9100      	str	r1, [sp, #0]
 8004aa6:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8004aaa:	f7fb fdc1 	bl	8000630 <__aeabi_dmul>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	4639      	mov	r1, r7
 8004ab6:	f7fb fc05 	bl	80002c4 <__adddf3>
 8004aba:	4606      	mov	r6, r0
 8004abc:	460f      	mov	r7, r1
 8004abe:	e7e1      	b.n	8004a84 <__kernel_rem_pio2+0x390>
 8004ac0:	f1ca 0200 	rsb	r2, sl, #0
 8004ac4:	4640      	mov	r0, r8
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	f000 f936 	bl	8004d38 <scalbn>
 8004acc:	2200      	movs	r2, #0
 8004ace:	4b97      	ldr	r3, [pc, #604]	@ (8004d2c <__kernel_rem_pio2+0x638>)
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	460d      	mov	r5, r1
 8004ad4:	f7fc f832 	bl	8000b3c <__aeabi_dcmpge>
 8004ad8:	b300      	cbz	r0, 8004b1c <__kernel_rem_pio2+0x428>
 8004ada:	2200      	movs	r2, #0
 8004adc:	4b94      	ldr	r3, [pc, #592]	@ (8004d30 <__kernel_rem_pio2+0x63c>)
 8004ade:	4620      	mov	r0, r4
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	f7fb fda5 	bl	8000630 <__aeabi_dmul>
 8004ae6:	f7fc f83d 	bl	8000b64 <__aeabi_d2iz>
 8004aea:	4606      	mov	r6, r0
 8004aec:	f7fb fd36 	bl	800055c <__aeabi_i2d>
 8004af0:	2200      	movs	r2, #0
 8004af2:	4b8e      	ldr	r3, [pc, #568]	@ (8004d2c <__kernel_rem_pio2+0x638>)
 8004af4:	f7fb fd9c 	bl	8000630 <__aeabi_dmul>
 8004af8:	460b      	mov	r3, r1
 8004afa:	4602      	mov	r2, r0
 8004afc:	4629      	mov	r1, r5
 8004afe:	4620      	mov	r0, r4
 8004b00:	f7fb fbde 	bl	80002c0 <__aeabi_dsub>
 8004b04:	f7fc f82e 	bl	8000b64 <__aeabi_d2iz>
 8004b08:	ab0c      	add	r3, sp, #48	@ 0x30
 8004b0a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8004b0e:	f10b 0b01 	add.w	fp, fp, #1
 8004b12:	f10a 0a18 	add.w	sl, sl, #24
 8004b16:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8004b1a:	e732      	b.n	8004982 <__kernel_rem_pio2+0x28e>
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	4629      	mov	r1, r5
 8004b20:	f7fc f820 	bl	8000b64 <__aeabi_d2iz>
 8004b24:	ab0c      	add	r3, sp, #48	@ 0x30
 8004b26:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8004b2a:	e72a      	b.n	8004982 <__kernel_rem_pio2+0x28e>
 8004b2c:	ab0c      	add	r3, sp, #48	@ 0x30
 8004b2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004b32:	f7fb fd13 	bl	800055c <__aeabi_i2d>
 8004b36:	4632      	mov	r2, r6
 8004b38:	463b      	mov	r3, r7
 8004b3a:	f7fb fd79 	bl	8000630 <__aeabi_dmul>
 8004b3e:	464a      	mov	r2, r9
 8004b40:	e868 0102 	strd	r0, r1, [r8], #-8
 8004b44:	4653      	mov	r3, sl
 8004b46:	4630      	mov	r0, r6
 8004b48:	4639      	mov	r1, r7
 8004b4a:	f7fb fd71 	bl	8000630 <__aeabi_dmul>
 8004b4e:	3d01      	subs	r5, #1
 8004b50:	4606      	mov	r6, r0
 8004b52:	460f      	mov	r7, r1
 8004b54:	e726      	b.n	80049a4 <__kernel_rem_pio2+0x2b0>
 8004b56:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004b5a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8004b5e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8004b62:	f8cd c018 	str.w	ip, [sp, #24]
 8004b66:	f7fb fd63 	bl	8000630 <__aeabi_dmul>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4648      	mov	r0, r9
 8004b70:	4651      	mov	r1, sl
 8004b72:	f7fb fba7 	bl	80002c4 <__adddf3>
 8004b76:	4681      	mov	r9, r0
 8004b78:	468a      	mov	sl, r1
 8004b7a:	3701      	adds	r7, #1
 8004b7c:	9b02      	ldr	r3, [sp, #8]
 8004b7e:	429f      	cmp	r7, r3
 8004b80:	dc01      	bgt.n	8004b86 <__kernel_rem_pio2+0x492>
 8004b82:	42b7      	cmp	r7, r6
 8004b84:	dde7      	ble.n	8004b56 <__kernel_rem_pio2+0x462>
 8004b86:	ab48      	add	r3, sp, #288	@ 0x120
 8004b88:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004b8c:	e9c6 9a00 	strd	r9, sl, [r6]
 8004b90:	3d01      	subs	r5, #1
 8004b92:	e70b      	b.n	80049ac <__kernel_rem_pio2+0x2b8>
 8004b94:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	dc09      	bgt.n	8004bae <__kernel_rem_pio2+0x4ba>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	dc2c      	bgt.n	8004bf8 <__kernel_rem_pio2+0x504>
 8004b9e:	d04e      	beq.n	8004c3e <__kernel_rem_pio2+0x54a>
 8004ba0:	9b05      	ldr	r3, [sp, #20]
 8004ba2:	f003 0007 	and.w	r0, r3, #7
 8004ba6:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8004baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bae:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d1f5      	bne.n	8004ba0 <__kernel_rem_pio2+0x4ac>
 8004bb4:	ab48      	add	r3, sp, #288	@ 0x120
 8004bb6:	441c      	add	r4, r3
 8004bb8:	4625      	mov	r5, r4
 8004bba:	46da      	mov	sl, fp
 8004bbc:	f1ba 0f00 	cmp.w	sl, #0
 8004bc0:	dc63      	bgt.n	8004c8a <__kernel_rem_pio2+0x596>
 8004bc2:	4625      	mov	r5, r4
 8004bc4:	46da      	mov	sl, fp
 8004bc6:	f1ba 0f01 	cmp.w	sl, #1
 8004bca:	dc7b      	bgt.n	8004cc4 <__kernel_rem_pio2+0x5d0>
 8004bcc:	2000      	movs	r0, #0
 8004bce:	2100      	movs	r1, #0
 8004bd0:	f1bb 0f01 	cmp.w	fp, #1
 8004bd4:	f300 8093 	bgt.w	8004cfe <__kernel_rem_pio2+0x60a>
 8004bd8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8004bdc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8004be0:	9b00      	ldr	r3, [sp, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f040 8092 	bne.w	8004d0c <__kernel_rem_pio2+0x618>
 8004be8:	9b04      	ldr	r3, [sp, #16]
 8004bea:	e9c3 5600 	strd	r5, r6, [r3]
 8004bee:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004bf2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004bf6:	e7d3      	b.n	8004ba0 <__kernel_rem_pio2+0x4ac>
 8004bf8:	465d      	mov	r5, fp
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	ab48      	add	r3, sp, #288	@ 0x120
 8004c00:	441c      	add	r4, r3
 8004c02:	2d00      	cmp	r5, #0
 8004c04:	da32      	bge.n	8004c6c <__kernel_rem_pio2+0x578>
 8004c06:	9b00      	ldr	r3, [sp, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d035      	beq.n	8004c78 <__kernel_rem_pio2+0x584>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004c12:	9c04      	ldr	r4, [sp, #16]
 8004c14:	2501      	movs	r5, #1
 8004c16:	e9c4 2300 	strd	r2, r3, [r4]
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004c22:	f7fb fb4d 	bl	80002c0 <__aeabi_dsub>
 8004c26:	ac48      	add	r4, sp, #288	@ 0x120
 8004c28:	45ab      	cmp	fp, r5
 8004c2a:	da28      	bge.n	8004c7e <__kernel_rem_pio2+0x58a>
 8004c2c:	9b00      	ldr	r3, [sp, #0]
 8004c2e:	b113      	cbz	r3, 8004c36 <__kernel_rem_pio2+0x542>
 8004c30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004c34:	4619      	mov	r1, r3
 8004c36:	9b04      	ldr	r3, [sp, #16]
 8004c38:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004c3c:	e7b0      	b.n	8004ba0 <__kernel_rem_pio2+0x4ac>
 8004c3e:	2000      	movs	r0, #0
 8004c40:	2100      	movs	r1, #0
 8004c42:	ab48      	add	r3, sp, #288	@ 0x120
 8004c44:	441c      	add	r4, r3
 8004c46:	f1bb 0f00 	cmp.w	fp, #0
 8004c4a:	da08      	bge.n	8004c5e <__kernel_rem_pio2+0x56a>
 8004c4c:	9b00      	ldr	r3, [sp, #0]
 8004c4e:	b113      	cbz	r3, 8004c56 <__kernel_rem_pio2+0x562>
 8004c50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004c54:	4619      	mov	r1, r3
 8004c56:	9b04      	ldr	r3, [sp, #16]
 8004c58:	e9c3 0100 	strd	r0, r1, [r3]
 8004c5c:	e7a0      	b.n	8004ba0 <__kernel_rem_pio2+0x4ac>
 8004c5e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8004c62:	f7fb fb2f 	bl	80002c4 <__adddf3>
 8004c66:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004c6a:	e7ec      	b.n	8004c46 <__kernel_rem_pio2+0x552>
 8004c6c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8004c70:	f7fb fb28 	bl	80002c4 <__adddf3>
 8004c74:	3d01      	subs	r5, #1
 8004c76:	e7c4      	b.n	8004c02 <__kernel_rem_pio2+0x50e>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	e7c9      	b.n	8004c12 <__kernel_rem_pio2+0x51e>
 8004c7e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8004c82:	f7fb fb1f 	bl	80002c4 <__adddf3>
 8004c86:	3501      	adds	r5, #1
 8004c88:	e7ce      	b.n	8004c28 <__kernel_rem_pio2+0x534>
 8004c8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c8e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8004c92:	4640      	mov	r0, r8
 8004c94:	4649      	mov	r1, r9
 8004c96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c9a:	f7fb fb13 	bl	80002c4 <__adddf3>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4606      	mov	r6, r0
 8004ca4:	460f      	mov	r7, r1
 8004ca6:	4640      	mov	r0, r8
 8004ca8:	4649      	mov	r1, r9
 8004caa:	f7fb fb09 	bl	80002c0 <__aeabi_dsub>
 8004cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cb2:	f7fb fb07 	bl	80002c4 <__adddf3>
 8004cb6:	e865 0102 	strd	r0, r1, [r5], #-8
 8004cba:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004cbe:	e9c5 6700 	strd	r6, r7, [r5]
 8004cc2:	e77b      	b.n	8004bbc <__kernel_rem_pio2+0x4c8>
 8004cc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004cc8:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8004ccc:	4640      	mov	r0, r8
 8004cce:	4649      	mov	r1, r9
 8004cd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004cd4:	f7fb faf6 	bl	80002c4 <__adddf3>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4606      	mov	r6, r0
 8004cde:	460f      	mov	r7, r1
 8004ce0:	4640      	mov	r0, r8
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	f7fb faec 	bl	80002c0 <__aeabi_dsub>
 8004ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cec:	f7fb faea 	bl	80002c4 <__adddf3>
 8004cf0:	e865 0102 	strd	r0, r1, [r5], #-8
 8004cf4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004cf8:	e9c5 6700 	strd	r6, r7, [r5]
 8004cfc:	e763      	b.n	8004bc6 <__kernel_rem_pio2+0x4d2>
 8004cfe:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8004d02:	f7fb fadf 	bl	80002c4 <__adddf3>
 8004d06:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004d0a:	e761      	b.n	8004bd0 <__kernel_rem_pio2+0x4dc>
 8004d0c:	9b04      	ldr	r3, [sp, #16]
 8004d0e:	9a04      	ldr	r2, [sp, #16]
 8004d10:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8004d14:	601d      	str	r5, [r3, #0]
 8004d16:	605c      	str	r4, [r3, #4]
 8004d18:	609f      	str	r7, [r3, #8]
 8004d1a:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8004d1e:	60d3      	str	r3, [r2, #12]
 8004d20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004d24:	6110      	str	r0, [r2, #16]
 8004d26:	6153      	str	r3, [r2, #20]
 8004d28:	e73a      	b.n	8004ba0 <__kernel_rem_pio2+0x4ac>
 8004d2a:	bf00      	nop
 8004d2c:	41700000 	.word	0x41700000
 8004d30:	3e700000 	.word	0x3e700000
 8004d34:	00000000 	.word	0x00000000

08004d38 <scalbn>:
 8004d38:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8004d3c:	4616      	mov	r6, r2
 8004d3e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004d42:	4683      	mov	fp, r0
 8004d44:	468c      	mov	ip, r1
 8004d46:	460b      	mov	r3, r1
 8004d48:	b982      	cbnz	r2, 8004d6c <scalbn+0x34>
 8004d4a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004d4e:	4303      	orrs	r3, r0
 8004d50:	d035      	beq.n	8004dbe <scalbn+0x86>
 8004d52:	4b2d      	ldr	r3, [pc, #180]	@ (8004e08 <scalbn+0xd0>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	f7fb fc6b 	bl	8000630 <__aeabi_dmul>
 8004d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8004e0c <scalbn+0xd4>)
 8004d5c:	4683      	mov	fp, r0
 8004d5e:	429e      	cmp	r6, r3
 8004d60:	468c      	mov	ip, r1
 8004d62:	da0d      	bge.n	8004d80 <scalbn+0x48>
 8004d64:	a324      	add	r3, pc, #144	@ (adr r3, 8004df8 <scalbn+0xc0>)
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	e019      	b.n	8004da0 <scalbn+0x68>
 8004d6c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8004d70:	42ba      	cmp	r2, r7
 8004d72:	d109      	bne.n	8004d88 <scalbn+0x50>
 8004d74:	4602      	mov	r2, r0
 8004d76:	f7fb faa5 	bl	80002c4 <__adddf3>
 8004d7a:	4683      	mov	fp, r0
 8004d7c:	468c      	mov	ip, r1
 8004d7e:	e01e      	b.n	8004dbe <scalbn+0x86>
 8004d80:	460b      	mov	r3, r1
 8004d82:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004d86:	3a36      	subs	r2, #54	@ 0x36
 8004d88:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004d8c:	428e      	cmp	r6, r1
 8004d8e:	dd0a      	ble.n	8004da6 <scalbn+0x6e>
 8004d90:	a31b      	add	r3, pc, #108	@ (adr r3, 8004e00 <scalbn+0xc8>)
 8004d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d96:	4665      	mov	r5, ip
 8004d98:	f363 051e 	bfi	r5, r3, #0, #31
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	481c      	ldr	r0, [pc, #112]	@ (8004e10 <scalbn+0xd8>)
 8004da0:	f7fb fc46 	bl	8000630 <__aeabi_dmul>
 8004da4:	e7e9      	b.n	8004d7a <scalbn+0x42>
 8004da6:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004daa:	4432      	add	r2, r6
 8004dac:	428a      	cmp	r2, r1
 8004dae:	dcef      	bgt.n	8004d90 <scalbn+0x58>
 8004db0:	2a00      	cmp	r2, #0
 8004db2:	dd08      	ble.n	8004dc6 <scalbn+0x8e>
 8004db4:	f36f 531e 	bfc	r3, #20, #11
 8004db8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004dbc:	46ac      	mov	ip, r5
 8004dbe:	4658      	mov	r0, fp
 8004dc0:	4661      	mov	r1, ip
 8004dc2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8004dc6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004dca:	da09      	bge.n	8004de0 <scalbn+0xa8>
 8004dcc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8004dd0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8004dd4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8004dd8:	480e      	ldr	r0, [pc, #56]	@ (8004e14 <scalbn+0xdc>)
 8004dda:	f041 011f 	orr.w	r1, r1, #31
 8004dde:	e7c1      	b.n	8004d64 <scalbn+0x2c>
 8004de0:	3236      	adds	r2, #54	@ 0x36
 8004de2:	f36f 531e 	bfc	r3, #20, #11
 8004de6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004dea:	4658      	mov	r0, fp
 8004dec:	4629      	mov	r1, r5
 8004dee:	2200      	movs	r2, #0
 8004df0:	4b09      	ldr	r3, [pc, #36]	@ (8004e18 <scalbn+0xe0>)
 8004df2:	e7d5      	b.n	8004da0 <scalbn+0x68>
 8004df4:	f3af 8000 	nop.w
 8004df8:	c2f8f359 	.word	0xc2f8f359
 8004dfc:	01a56e1f 	.word	0x01a56e1f
 8004e00:	8800759c 	.word	0x8800759c
 8004e04:	7e37e43c 	.word	0x7e37e43c
 8004e08:	43500000 	.word	0x43500000
 8004e0c:	ffff3cb0 	.word	0xffff3cb0
 8004e10:	8800759c 	.word	0x8800759c
 8004e14:	c2f8f359 	.word	0xc2f8f359
 8004e18:	3c900000 	.word	0x3c900000
 8004e1c:	00000000 	.word	0x00000000

08004e20 <floor>:
 8004e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e24:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004e28:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8004e2c:	2e13      	cmp	r6, #19
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	460c      	mov	r4, r1
 8004e34:	4605      	mov	r5, r0
 8004e36:	4680      	mov	r8, r0
 8004e38:	dc35      	bgt.n	8004ea6 <floor+0x86>
 8004e3a:	2e00      	cmp	r6, #0
 8004e3c:	da17      	bge.n	8004e6e <floor+0x4e>
 8004e3e:	a334      	add	r3, pc, #208	@ (adr r3, 8004f10 <floor+0xf0>)
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	f7fb fa3e 	bl	80002c4 <__adddf3>
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f7fb fe80 	bl	8000b50 <__aeabi_dcmpgt>
 8004e50:	b150      	cbz	r0, 8004e68 <floor+0x48>
 8004e52:	2c00      	cmp	r4, #0
 8004e54:	da57      	bge.n	8004f06 <floor+0xe6>
 8004e56:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004e5a:	432c      	orrs	r4, r5
 8004e5c:	2500      	movs	r5, #0
 8004e5e:	42ac      	cmp	r4, r5
 8004e60:	4c2d      	ldr	r4, [pc, #180]	@ (8004f18 <floor+0xf8>)
 8004e62:	bf08      	it	eq
 8004e64:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004e68:	4623      	mov	r3, r4
 8004e6a:	462a      	mov	r2, r5
 8004e6c:	e024      	b.n	8004eb8 <floor+0x98>
 8004e6e:	4f2b      	ldr	r7, [pc, #172]	@ (8004f1c <floor+0xfc>)
 8004e70:	4137      	asrs	r7, r6
 8004e72:	ea01 0c07 	and.w	ip, r1, r7
 8004e76:	ea5c 0c00 	orrs.w	ip, ip, r0
 8004e7a:	d01d      	beq.n	8004eb8 <floor+0x98>
 8004e7c:	a324      	add	r3, pc, #144	@ (adr r3, 8004f10 <floor+0xf0>)
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	f7fb fa1f 	bl	80002c4 <__adddf3>
 8004e86:	2200      	movs	r2, #0
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f7fb fe61 	bl	8000b50 <__aeabi_dcmpgt>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d0ea      	beq.n	8004e68 <floor+0x48>
 8004e92:	2c00      	cmp	r4, #0
 8004e94:	bfbe      	ittt	lt
 8004e96:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004e9a:	4133      	asrlt	r3, r6
 8004e9c:	18e4      	addlt	r4, r4, r3
 8004e9e:	2500      	movs	r5, #0
 8004ea0:	ea24 0407 	bic.w	r4, r4, r7
 8004ea4:	e7e0      	b.n	8004e68 <floor+0x48>
 8004ea6:	2e33      	cmp	r6, #51	@ 0x33
 8004ea8:	dd0a      	ble.n	8004ec0 <floor+0xa0>
 8004eaa:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004eae:	d103      	bne.n	8004eb8 <floor+0x98>
 8004eb0:	f7fb fa08 	bl	80002c4 <__adddf3>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4610      	mov	r0, r2
 8004eba:	4619      	mov	r1, r3
 8004ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8004ec4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8004ec8:	fa2c f707 	lsr.w	r7, ip, r7
 8004ecc:	4207      	tst	r7, r0
 8004ece:	d0f3      	beq.n	8004eb8 <floor+0x98>
 8004ed0:	a30f      	add	r3, pc, #60	@ (adr r3, 8004f10 <floor+0xf0>)
 8004ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed6:	f7fb f9f5 	bl	80002c4 <__adddf3>
 8004eda:	2200      	movs	r2, #0
 8004edc:	2300      	movs	r3, #0
 8004ede:	f7fb fe37 	bl	8000b50 <__aeabi_dcmpgt>
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d0c0      	beq.n	8004e68 <floor+0x48>
 8004ee6:	2c00      	cmp	r4, #0
 8004ee8:	da0a      	bge.n	8004f00 <floor+0xe0>
 8004eea:	2e14      	cmp	r6, #20
 8004eec:	d101      	bne.n	8004ef2 <floor+0xd2>
 8004eee:	3401      	adds	r4, #1
 8004ef0:	e006      	b.n	8004f00 <floor+0xe0>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004ef8:	40b3      	lsls	r3, r6
 8004efa:	441d      	add	r5, r3
 8004efc:	4545      	cmp	r5, r8
 8004efe:	d3f6      	bcc.n	8004eee <floor+0xce>
 8004f00:	ea25 0507 	bic.w	r5, r5, r7
 8004f04:	e7b0      	b.n	8004e68 <floor+0x48>
 8004f06:	2500      	movs	r5, #0
 8004f08:	462c      	mov	r4, r5
 8004f0a:	e7ad      	b.n	8004e68 <floor+0x48>
 8004f0c:	f3af 8000 	nop.w
 8004f10:	8800759c 	.word	0x8800759c
 8004f14:	7e37e43c 	.word	0x7e37e43c
 8004f18:	bff00000 	.word	0xbff00000
 8004f1c:	000fffff 	.word	0x000fffff

08004f20 <_init>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	bf00      	nop
 8004f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f26:	bc08      	pop	{r3}
 8004f28:	469e      	mov	lr, r3
 8004f2a:	4770      	bx	lr

08004f2c <_fini>:
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	bf00      	nop
 8004f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f32:	bc08      	pop	{r3}
 8004f34:	469e      	mov	lr, r3
 8004f36:	4770      	bx	lr
