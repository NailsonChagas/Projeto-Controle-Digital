
controlador.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004650  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08004760  08004760  00005760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004978  08004978  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004978  08004978  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004978  08004978  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004978  08004978  00005978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800497c  0800497c  0000597c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004980  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  2000000c  0800498c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0800498c  0000656c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091a9  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019af  00000000  00000000  0000f1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  00010b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000806  00000000  00000000  000115f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c0b  00000000  00000000  00011dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000afc2  00000000  00000000  00029a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd04  00000000  00000000  000349cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c16cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fc0  00000000  00000000  000c1714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000c46d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004748 	.word	0x08004748

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004748 	.word	0x08004748

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_d2iz>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b6c:	d215      	bcs.n	8000b9a <__aeabi_d2iz+0x36>
 8000b6e:	d511      	bpl.n	8000b94 <__aeabi_d2iz+0x30>
 8000b70:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b78:	d912      	bls.n	8000ba0 <__aeabi_d2iz+0x3c>
 8000b7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b86:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d105      	bne.n	8000bac <__aeabi_d2iz+0x48>
 8000ba0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba4:	bf08      	it	eq
 8000ba6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_frsub>:
 8000c54:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	e002      	b.n	8000c60 <__addsf3>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_fsub>:
 8000c5c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c60 <__addsf3>:
 8000c60:	0042      	lsls	r2, r0, #1
 8000c62:	bf1f      	itttt	ne
 8000c64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c68:	ea92 0f03 	teqne	r2, r3
 8000c6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c74:	d06a      	beq.n	8000d4c <__addsf3+0xec>
 8000c76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c7e:	bfc1      	itttt	gt
 8000c80:	18d2      	addgt	r2, r2, r3
 8000c82:	4041      	eorgt	r1, r0
 8000c84:	4048      	eorgt	r0, r1
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	bfb8      	it	lt
 8000c8a:	425b      	neglt	r3, r3
 8000c8c:	2b19      	cmp	r3, #25
 8000c8e:	bf88      	it	hi
 8000c90:	4770      	bxhi	lr
 8000c92:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c9a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c9e:	bf18      	it	ne
 8000ca0:	4240      	negne	r0, r0
 8000ca2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ca6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000caa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cae:	bf18      	it	ne
 8000cb0:	4249      	negne	r1, r1
 8000cb2:	ea92 0f03 	teq	r2, r3
 8000cb6:	d03f      	beq.n	8000d38 <__addsf3+0xd8>
 8000cb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cbc:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc0:	eb10 000c 	adds.w	r0, r0, ip
 8000cc4:	f1c3 0320 	rsb	r3, r3, #32
 8000cc8:	fa01 f103 	lsl.w	r1, r1, r3
 8000ccc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__addsf3+0x78>
 8000cd2:	4249      	negs	r1, r1
 8000cd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cd8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cdc:	d313      	bcc.n	8000d06 <__addsf3+0xa6>
 8000cde:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ce2:	d306      	bcc.n	8000cf2 <__addsf3+0x92>
 8000ce4:	0840      	lsrs	r0, r0, #1
 8000ce6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cea:	f102 0201 	add.w	r2, r2, #1
 8000cee:	2afe      	cmp	r2, #254	@ 0xfe
 8000cf0:	d251      	bcs.n	8000d96 <__addsf3+0x136>
 8000cf2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	ea40 0003 	orr.w	r0, r0, r3
 8000d04:	4770      	bx	lr
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	eb40 0000 	adc.w	r0, r0, r0
 8000d0c:	3a01      	subs	r2, #1
 8000d0e:	bf28      	it	cs
 8000d10:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d14:	d2ed      	bcs.n	8000cf2 <__addsf3+0x92>
 8000d16:	fab0 fc80 	clz	ip, r0
 8000d1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d26:	bfaa      	itet	ge
 8000d28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d2c:	4252      	neglt	r2, r2
 8000d2e:	4318      	orrge	r0, r3
 8000d30:	bfbc      	itt	lt
 8000d32:	40d0      	lsrlt	r0, r2
 8000d34:	4318      	orrlt	r0, r3
 8000d36:	4770      	bx	lr
 8000d38:	f092 0f00 	teq	r2, #0
 8000d3c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d40:	bf06      	itte	eq
 8000d42:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d46:	3201      	addeq	r2, #1
 8000d48:	3b01      	subne	r3, #1
 8000d4a:	e7b5      	b.n	8000cb8 <__addsf3+0x58>
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d021      	beq.n	8000da0 <__addsf3+0x140>
 8000d5c:	ea92 0f03 	teq	r2, r3
 8000d60:	d004      	beq.n	8000d6c <__addsf3+0x10c>
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	bf08      	it	eq
 8000d68:	4608      	moveq	r0, r1
 8000d6a:	4770      	bx	lr
 8000d6c:	ea90 0f01 	teq	r0, r1
 8000d70:	bf1c      	itt	ne
 8000d72:	2000      	movne	r0, #0
 8000d74:	4770      	bxne	lr
 8000d76:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d7a:	d104      	bne.n	8000d86 <__addsf3+0x126>
 8000d7c:	0040      	lsls	r0, r0, #1
 8000d7e:	bf28      	it	cs
 8000d80:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d8a:	bf3c      	itt	cc
 8000d8c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d90:	4770      	bxcc	lr
 8000d92:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d96:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da4:	bf16      	itet	ne
 8000da6:	4608      	movne	r0, r1
 8000da8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dac:	4601      	movne	r1, r0
 8000dae:	0242      	lsls	r2, r0, #9
 8000db0:	bf06      	itte	eq
 8000db2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000db6:	ea90 0f01 	teqeq	r0, r1
 8000dba:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_ui2f>:
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e004      	b.n	8000dd0 <__aeabi_i2f+0x8>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_i2f>:
 8000dc8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dcc:	bf48      	it	mi
 8000dce:	4240      	negmi	r0, r0
 8000dd0:	ea5f 0c00 	movs.w	ip, r0
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ddc:	4601      	mov	r1, r0
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	e01c      	b.n	8000e1e <__aeabi_l2f+0x2a>

08000de4 <__aeabi_ul2f>:
 8000de4:	ea50 0201 	orrs.w	r2, r0, r1
 8000de8:	bf08      	it	eq
 8000dea:	4770      	bxeq	lr
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e00a      	b.n	8000e08 <__aeabi_l2f+0x14>
 8000df2:	bf00      	nop

08000df4 <__aeabi_l2f>:
 8000df4:	ea50 0201 	orrs.w	r2, r0, r1
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e00:	d502      	bpl.n	8000e08 <__aeabi_l2f+0x14>
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	ea5f 0c01 	movs.w	ip, r1
 8000e0c:	bf02      	ittt	eq
 8000e0e:	4684      	moveq	ip, r0
 8000e10:	4601      	moveq	r1, r0
 8000e12:	2000      	moveq	r0, #0
 8000e14:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e18:	bf08      	it	eq
 8000e1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e1e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e22:	fabc f28c 	clz	r2, ip
 8000e26:	3a08      	subs	r2, #8
 8000e28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e2c:	db10      	blt.n	8000e50 <__aeabi_l2f+0x5c>
 8000e2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e32:	4463      	add	r3, ip
 8000e34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e38:	f1c2 0220 	rsb	r2, r2, #32
 8000e3c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e40:	fa20 f202 	lsr.w	r2, r0, r2
 8000e44:	eb43 0002 	adc.w	r0, r3, r2
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f102 0220 	add.w	r2, r2, #32
 8000e54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e58:	f1c2 0220 	rsb	r2, r2, #32
 8000e5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e60:	fa21 f202 	lsr.w	r2, r1, r2
 8000e64:	eb43 0002 	adc.w	r0, r3, r2
 8000e68:	bf08      	it	eq
 8000e6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e6e:	4770      	bx	lr

08000e70 <__gesf2>:
 8000e70:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000e74:	e006      	b.n	8000e84 <__cmpsf2+0x4>
 8000e76:	bf00      	nop

08000e78 <__lesf2>:
 8000e78:	f04f 0c01 	mov.w	ip, #1
 8000e7c:	e002      	b.n	8000e84 <__cmpsf2+0x4>
 8000e7e:	bf00      	nop

08000e80 <__cmpsf2>:
 8000e80:	f04f 0c01 	mov.w	ip, #1
 8000e84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e94:	bf18      	it	ne
 8000e96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e9a:	d011      	beq.n	8000ec0 <__cmpsf2+0x40>
 8000e9c:	b001      	add	sp, #4
 8000e9e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ea2:	bf18      	it	ne
 8000ea4:	ea90 0f01 	teqne	r0, r1
 8000ea8:	bf58      	it	pl
 8000eaa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eae:	bf88      	it	hi
 8000eb0:	17c8      	asrhi	r0, r1, #31
 8000eb2:	bf38      	it	cc
 8000eb4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb8:	bf18      	it	ne
 8000eba:	f040 0001 	orrne.w	r0, r0, #1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec4:	d102      	bne.n	8000ecc <__cmpsf2+0x4c>
 8000ec6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eca:	d105      	bne.n	8000ed8 <__cmpsf2+0x58>
 8000ecc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ed0:	d1e4      	bne.n	8000e9c <__cmpsf2+0x1c>
 8000ed2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ed6:	d0e1      	beq.n	8000e9c <__cmpsf2+0x1c>
 8000ed8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_cfrcmple>:
 8000ee0:	4684      	mov	ip, r0
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	4661      	mov	r1, ip
 8000ee6:	e7ff      	b.n	8000ee8 <__aeabi_cfcmpeq>

08000ee8 <__aeabi_cfcmpeq>:
 8000ee8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000eea:	f7ff ffc9 	bl	8000e80 <__cmpsf2>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	bf48      	it	mi
 8000ef2:	f110 0f00 	cmnmi.w	r0, #0
 8000ef6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef8 <__aeabi_fcmpeq>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff fff4 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f00:	bf0c      	ite	eq
 8000f02:	2001      	moveq	r0, #1
 8000f04:	2000      	movne	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmplt>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffea 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f14:	bf34      	ite	cc
 8000f16:	2001      	movcc	r0, #1
 8000f18:	2000      	movcs	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmple>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffe0 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f28:	bf94      	ite	ls
 8000f2a:	2001      	movls	r0, #1
 8000f2c:	2000      	movhi	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpge>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffd2 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f3c:	bf94      	ite	ls
 8000f3e:	2001      	movls	r0, #1
 8000f40:	2000      	movhi	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmpgt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffc8 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f000 fb52 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f80e 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f000 f8ee 	bl	8001148 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f6c:	f000 f862 	bl	8001034 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f70:	f000 f89e 	bl	80010b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <main+0x24>)
 8000f76:	f002 f84b 	bl	8003010 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f7a:	bf00      	nop
 8000f7c:	e7fd      	b.n	8000f7a <main+0x1e>
 8000f7e:	bf00      	nop
 8000f80:	20000058 	.word	0x20000058

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b094      	sub	sp, #80	@ 0x50
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f8e:	2228      	movs	r2, #40	@ 0x28
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fbde 	bl	8003754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 fa61 	bl	80024a0 <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000fe4:	f000 fa16 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe8:	230f      	movs	r3, #15
 8000fea:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f001 fcce 	bl	80029a4 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800100e:	f000 fa01 	bl	8001414 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001012:	2302      	movs	r3, #2
 8001014:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4618      	mov	r0, r3
 800101e:	f001 fe3b 	bl	8002c98 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001028:	f000 f9f4 	bl	8001414 <Error_Handler>
  }
}
 800102c:	bf00      	nop
 800102e:	3750      	adds	r7, #80	@ 0x50
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001044:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <MX_ADC1_Init+0x74>)
 8001046:	4a19      	ldr	r2, [pc, #100]	@ (80010ac <MX_ADC1_Init+0x78>)
 8001048:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <MX_ADC1_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001050:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <MX_ADC1_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <MX_ADC1_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <MX_ADC1_Init+0x74>)
 800105e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001062:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001064:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <MX_ADC1_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800106a:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <MX_ADC1_Init+0x74>)
 800106c:	2201      	movs	r2, #1
 800106e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001070:	480d      	ldr	r0, [pc, #52]	@ (80010a8 <MX_ADC1_Init+0x74>)
 8001072:	f000 fb2b 	bl	80016cc <HAL_ADC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800107c:	f000 f9ca 	bl	8001414 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001080:	2301      	movs	r3, #1
 8001082:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001084:	2301      	movs	r3, #1
 8001086:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <MX_ADC1_Init+0x74>)
 8001092:	f000 fddf 	bl	8001c54 <HAL_ADC_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800109c:	f000 f9ba 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000028 	.word	0x20000028
 80010ac:	40012400 	.word	0x40012400

080010b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <MX_TIM2_Init+0x94>)
 80010ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <MX_TIM2_Init+0x94>)
 80010d6:	229f      	movs	r2, #159	@ 0x9f
 80010d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <MX_TIM2_Init+0x94>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <MX_TIM2_Init+0x94>)
 80010e2:	2214      	movs	r2, #20
 80010e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e6:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <MX_TIM2_Init+0x94>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <MX_TIM2_Init+0x94>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010f2:	4814      	ldr	r0, [pc, #80]	@ (8001144 <MX_TIM2_Init+0x94>)
 80010f4:	f001 ff3c 	bl	8002f70 <HAL_TIM_Base_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80010fe:	f000 f989 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001102:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001106:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	4619      	mov	r1, r3
 800110e:	480d      	ldr	r0, [pc, #52]	@ (8001144 <MX_TIM2_Init+0x94>)
 8001110:	f002 f8c0 	bl	8003294 <HAL_TIM_ConfigClockSource>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800111a:	f000 f97b 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	@ (8001144 <MX_TIM2_Init+0x94>)
 800112c:	f002 faa2 	bl	8003674 <HAL_TIMEx_MasterConfigSynchronization>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001136:	f000 f96d 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000058 	.word	0x20000058

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_GPIO_Init+0x40>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <MX_GPIO_Init+0x40>)
 8001154:	f043 0320 	orr.w	r3, r3, #32
 8001158:	6193      	str	r3, [r2, #24]
 800115a:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <MX_GPIO_Init+0x40>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f003 0320 	and.w	r3, r3, #32
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <MX_GPIO_Init+0x40>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	4a07      	ldr	r2, [pc, #28]	@ (8001188 <MX_GPIO_Init+0x40>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6193      	str	r3, [r2, #24]
 8001172:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <MX_GPIO_Init+0x40>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	40021000 	.word	0x40021000
 800118c:	00000000 	.word	0x00000000

08001190 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001190:	b5b0      	push	{r4, r5, r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011a0:	f040 8109 	bne.w	80013b6 <HAL_TIM_PeriodElapsedCallback+0x226>
	{
		prev_transductor_val = transductor_input[(curr_idx - 1 + ARRAY_MAX_SIZE) % ARRAY_MAX_SIZE];
 80011a4:	4b88      	ldr	r3, [pc, #544]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 80011ac:	4b87      	ldr	r3, [pc, #540]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80011ae:	fb83 1302 	smull	r1, r3, r3, r2
 80011b2:	1159      	asrs	r1, r3, #5
 80011b4:	17d3      	asrs	r3, r2, #31
 80011b6:	1acb      	subs	r3, r1, r3
 80011b8:	2164      	movs	r1, #100	@ 0x64
 80011ba:	fb01 f303 	mul.w	r3, r1, r3
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	4a83      	ldr	r2, [pc, #524]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80011c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c6:	4a83      	ldr	r2, [pc, #524]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80011c8:	6013      	str	r3, [r2, #0]
//		ref_signal[curr_idx] = OFFSET + A * sin(2 * PI * F * Ts * curr_idx);
		ref_signal = OFFSET + A * sin(2 * PI * F * Ts * curr_idx);
 80011ca:	4b7f      	ldr	r3, [pc, #508]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fdfa 	bl	8000dc8 <__aeabi_i2f>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4980      	ldr	r1, [pc, #512]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f7fe ffb9 	bl	8000150 <__aeabi_fmul>
 80011de:	4603      	mov	r3, r0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9cd 	bl	8000580 <__aeabi_f2d>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f002 fadd 	bl	80037ac <sin>
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b79      	ldr	r3, [pc, #484]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80011f8:	f7ff fa1a 	bl	8000630 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	4b75      	ldr	r3, [pc, #468]	@ (80013e0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800120a:	f7ff f85b 	bl	80002c4 <__adddf3>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fccd 	bl	8000bb4 <__aeabi_d2f>
 800121a:	4603      	mov	r3, r0
 800121c:	4a71      	ldr	r2, [pc, #452]	@ (80013e4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800121e:	6013      	str	r3, [r2, #0]
		error[curr_idx] = ref_signal - prev_transductor_val;
 8001220:	4b70      	ldr	r3, [pc, #448]	@ (80013e4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a6b      	ldr	r2, [pc, #428]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	4967      	ldr	r1, [pc, #412]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800122a:	680c      	ldr	r4, [r1, #0]
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fd14 	bl	8000c5c <__aeabi_fsub>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	4b6b      	ldr	r3, [pc, #428]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800123a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

		// Inicia a conversão ADC
		HAL_ADC_Start(&hadc1);
 800123e:	486b      	ldr	r0, [pc, #428]	@ (80013ec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001240:	f000 fb1c 	bl	800187c <HAL_ADC_Start>

		// Espera a conversão estar pronta (timeout opcional)
		if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8001244:	210a      	movs	r1, #10
 8001246:	4869      	ldr	r0, [pc, #420]	@ (80013ec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001248:	f000 fbf2 	bl	8001a30 <HAL_ADC_PollForConversion>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	f040 80ae 	bne.w	80013b0 <HAL_TIM_PeriodElapsedCallback+0x220>
		{
			transductor_input[curr_idx] = HAL_ADC_GetValue(&hadc1) * ADC_SCALE_FACTOR / TRANSDUCTOR_GAIN;
 8001254:	4865      	ldr	r0, [pc, #404]	@ (80013ec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001256:	f000 fcf1 	bl	8001c3c <HAL_ADC_GetValue>
 800125a:	4603      	mov	r3, r0
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fdaf 	bl	8000dc0 <__aeabi_ui2f>
 8001262:	4603      	mov	r3, r0
 8001264:	4962      	ldr	r1, [pc, #392]	@ (80013f0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001266:	4618      	mov	r0, r3
 8001268:	f7fe ff72 	bl	8000150 <__aeabi_fmul>
 800126c:	4603      	mov	r3, r0
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f986 	bl	8000580 <__aeabi_f2d>
 8001274:	a352      	add	r3, pc, #328	@ (adr r3, 80013c0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	f7ff fb03 	bl	8000884 <__aeabi_ddiv>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4951      	ldr	r1, [pc, #324]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001284:	680c      	ldr	r4, [r1, #0]
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fc93 	bl	8000bb4 <__aeabi_d2f>
 800128e:	4603      	mov	r3, r0
 8001290:	4a4f      	ldr	r2, [pc, #316]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001292:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

			// u(k) = u(k-1) + Kp*e(k) - Kp*Ki*e(k-1);
			prev_pid_output = pid_output[(curr_idx - 1 + ARRAY_MAX_SIZE) % ARRAY_MAX_SIZE];
 8001296:	4b4c      	ldr	r3, [pc, #304]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 800129e:	4b4b      	ldr	r3, [pc, #300]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80012a0:	fb83 1302 	smull	r1, r3, r3, r2
 80012a4:	1159      	asrs	r1, r3, #5
 80012a6:	17d3      	asrs	r3, r2, #31
 80012a8:	1acb      	subs	r3, r1, r3
 80012aa:	2164      	movs	r1, #100	@ 0x64
 80012ac:	fb01 f303 	mul.w	r3, r1, r3
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	4a50      	ldr	r2, [pc, #320]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80012b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b8:	4a4f      	ldr	r2, [pc, #316]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80012ba:	6013      	str	r3, [r2, #0]
			prev_error = error[(curr_idx - 1 + ARRAY_MAX_SIZE) % ARRAY_MAX_SIZE];
 80012bc:	4b42      	ldr	r3, [pc, #264]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 80012c4:	4b41      	ldr	r3, [pc, #260]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80012c6:	fb83 1302 	smull	r1, r3, r3, r2
 80012ca:	1159      	asrs	r1, r3, #5
 80012cc:	17d3      	asrs	r3, r2, #31
 80012ce:	1acb      	subs	r3, r1, r3
 80012d0:	2164      	movs	r1, #100	@ 0x64
 80012d2:	fb01 f303 	mul.w	r3, r1, r3
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	4a43      	ldr	r2, [pc, #268]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	4a47      	ldr	r2, [pc, #284]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80012e0:	6013      	str	r3, [r2, #0]

			pid_output[curr_idx] = prev_pid_output + Kp*error[curr_idx] - Kp*Ki*prev_error;
 80012e2:	4b39      	ldr	r3, [pc, #228]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a40      	ldr	r2, [pc, #256]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80012e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ec:	4944      	ldr	r1, [pc, #272]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7fe ff2e 	bl	8000150 <__aeabi_fmul>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b3f      	ldr	r3, [pc, #252]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4610      	mov	r0, r2
 8001300:	f7ff fcae 	bl	8000c60 <__addsf3>
 8001304:	4603      	mov	r3, r0
 8001306:	461d      	mov	r5, r3
 8001308:	4b3c      	ldr	r3, [pc, #240]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	493d      	ldr	r1, [pc, #244]	@ (8001404 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ff1e 	bl	8000150 <__aeabi_fmul>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b2b      	ldr	r3, [pc, #172]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800131a:	681c      	ldr	r4, [r3, #0]
 800131c:	4611      	mov	r1, r2
 800131e:	4628      	mov	r0, r5
 8001320:	f7ff fc9c 	bl	8000c5c <__aeabi_fsub>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4b32      	ldr	r3, [pc, #200]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800132a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

			if(pid_output[curr_idx] < 0){
 800132e:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a30      	ldr	r2, [pc, #192]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001338:	f04f 0100 	mov.w	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fde5 	bl	8000f0c <__aeabi_fcmplt>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d007      	beq.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x1c8>
				pid_output[curr_idx] = 0;
 8001348:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a29      	ldr	r2, [pc, #164]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800134e:	f04f 0100 	mov.w	r1, #0
 8001352:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001356:	e011      	b.n	800137c <HAL_TIM_PeriodElapsedCallback+0x1ec>
			}
			else if(pid_output[curr_idx] > E){
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a25      	ldr	r2, [pc, #148]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800135e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001362:	4929      	ldr	r1, [pc, #164]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fdef 	bl	8000f48 <__aeabi_fcmpgt>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_TIM_PeriodElapsedCallback+0x1ec>
				pid_output[curr_idx] = E;
 8001370:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a1f      	ldr	r2, [pc, #124]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001376:	4924      	ldr	r1, [pc, #144]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001378:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			duty_cycle = pid_output[curr_idx] * DUTY_CICLE_CONST;
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a1c      	ldr	r2, [pc, #112]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	4921      	ldr	r1, [pc, #132]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001388:	4618      	mov	r0, r3
 800138a:	f7fe fee1 	bl	8000150 <__aeabi_fmul>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001394:	601a      	str	r2, [r3, #0]

			if(curr_idx < ARRAY_MAX_SIZE){
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b63      	cmp	r3, #99	@ 0x63
 800139c:	dc05      	bgt.n	80013aa <HAL_TIM_PeriodElapsedCallback+0x21a>
				curr_idx++;
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a08      	ldr	r2, [pc, #32]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e002      	b.n	80013b0 <HAL_TIM_PeriodElapsedCallback+0x220>
			}
			else{
				curr_idx = 0;
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
			}
		}
		HAL_ADC_Stop(&hadc1);
 80013b0:	480e      	ldr	r0, [pc, #56]	@ (80013ec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80013b2:	f000 fb11 	bl	80019d8 <HAL_ADC_Stop>
	}
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bdb0      	pop	{r4, r5, r7, pc}
 80013be:	bf00      	nop
 80013c0:	9999999a 	.word	0x9999999a
 80013c4:	3fc19999 	.word	0x3fc19999
 80013c8:	200000a0 	.word	0x200000a0
 80013cc:	51eb851f 	.word	0x51eb851f
 80013d0:	200000a8 	.word	0x200000a8
 80013d4:	20000238 	.word	0x20000238
 80013d8:	3d80adfd 	.word	0x3d80adfd
 80013dc:	40180000 	.word	0x40180000
 80013e0:	40280000 	.word	0x40280000
 80013e4:	200000a4 	.word	0x200000a4
 80013e8:	2000023c 	.word	0x2000023c
 80013ec:	20000028 	.word	0x20000028
 80013f0:	3a533333 	.word	0x3a533333
 80013f4:	200003d0 	.word	0x200003d0
 80013f8:	20000560 	.word	0x20000560
 80013fc:	200003cc 	.word	0x200003cc
 8001400:	3da3d70a 	.word	0x3da3d70a
 8001404:	3ad1b717 	.word	0x3ad1b717
 8001408:	41c00000 	.word	0x41c00000
 800140c:	40855555 	.word	0x40855555
 8001410:	20000564 	.word	0x20000564

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <Error_Handler+0x8>

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <HAL_MspInit+0x5c>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4a14      	ldr	r2, [pc, #80]	@ (800147c <HAL_MspInit+0x5c>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6193      	str	r3, [r2, #24]
 8001432:	4b12      	ldr	r3, [pc, #72]	@ (800147c <HAL_MspInit+0x5c>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <HAL_MspInit+0x5c>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a0e      	ldr	r2, [pc, #56]	@ (800147c <HAL_MspInit+0x5c>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001448:	61d3      	str	r3, [r2, #28]
 800144a:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <HAL_MspInit+0x5c>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001456:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <HAL_MspInit+0x60>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <HAL_MspInit+0x60>)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	40021000 	.word	0x40021000
 8001480:	40010000 	.word	0x40010000

08001484 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a14      	ldr	r2, [pc, #80]	@ (80014f0 <HAL_ADC_MspInit+0x6c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d121      	bne.n	80014e8 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a4:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <HAL_ADC_MspInit+0x70>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a12      	ldr	r2, [pc, #72]	@ (80014f4 <HAL_ADC_MspInit+0x70>)
 80014aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <HAL_ADC_MspInit+0x70>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <HAL_ADC_MspInit+0x70>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a0c      	ldr	r2, [pc, #48]	@ (80014f4 <HAL_ADC_MspInit+0x70>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_ADC_MspInit+0x70>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014d4:	2302      	movs	r3, #2
 80014d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d8:	2303      	movs	r3, #3
 80014da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	4619      	mov	r1, r3
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <HAL_ADC_MspInit+0x74>)
 80014e4:	f000 fe58 	bl	8002198 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40012400 	.word	0x40012400
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010800 	.word	0x40010800

080014fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800150c:	d113      	bne.n	8001536 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800150e:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <HAL_TIM_Base_MspInit+0x44>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a0b      	ldr	r2, [pc, #44]	@ (8001540 <HAL_TIM_Base_MspInit+0x44>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	61d3      	str	r3, [r2, #28]
 800151a:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <HAL_TIM_Base_MspInit+0x44>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	201c      	movs	r0, #28
 800152c:	f000 fdfd 	bl	800212a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001530:	201c      	movs	r0, #28
 8001532:	f000 fe16 	bl	8002162 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <NMI_Handler+0x4>

0800154c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <MemManage_Handler+0x4>

0800155c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <UsageFault_Handler+0x4>

0800156c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001594:	f000 f87e 	bl	8001694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <TIM2_IRQHandler+0x10>)
 80015a2:	f001 fd87 	bl	80030b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000058 	.word	0x20000058

080015b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <Reset_Handler>:
 80015bc:	f7ff fff8 	bl	80015b0 <SystemInit>
 80015c0:	480b      	ldr	r0, [pc, #44]	@ (80015f0 <LoopFillZerobss+0xe>)
 80015c2:	490c      	ldr	r1, [pc, #48]	@ (80015f4 <LoopFillZerobss+0x12>)
 80015c4:	4a0c      	ldr	r2, [pc, #48]	@ (80015f8 <LoopFillZerobss+0x16>)
 80015c6:	2300      	movs	r3, #0
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:
 80015ca:	58d4      	ldr	r4, [r2, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:
 80015d0:	18c4      	adds	r4, r0, r3
 80015d2:	428c      	cmp	r4, r1
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
 80015d6:	4a09      	ldr	r2, [pc, #36]	@ (80015fc <LoopFillZerobss+0x1a>)
 80015d8:	4c09      	ldr	r4, [pc, #36]	@ (8001600 <LoopFillZerobss+0x1e>)
 80015da:	2300      	movs	r3, #0
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:
 80015e2:	42a2      	cmp	r2, r4
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>
 80015e6:	f002 f8bd 	bl	8003764 <__libc_init_array>
 80015ea:	f7ff fcb7 	bl	8000f5c <main>
 80015ee:	4770      	bx	lr
 80015f0:	20000000 	.word	0x20000000
 80015f4:	2000000c 	.word	0x2000000c
 80015f8:	08004980 	.word	0x08004980
 80015fc:	2000000c 	.word	0x2000000c
 8001600:	2000056c 	.word	0x2000056c

08001604 <ADC1_2_IRQHandler>:
 8001604:	e7fe      	b.n	8001604 <ADC1_2_IRQHandler>
	...

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <HAL_Init+0x28>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a07      	ldr	r2, [pc, #28]	@ (8001630 <HAL_Init+0x28>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001618:	2003      	movs	r0, #3
 800161a:	f000 fd7b 	bl	8002114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161e:	200f      	movs	r0, #15
 8001620:	f000 f808 	bl	8001634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001624:	f7ff fefc 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40022000 	.word	0x40022000

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800163c:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <HAL_InitTick+0x54>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <HAL_InitTick+0x58>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800164a:	fbb3 f3f1 	udiv	r3, r3, r1
 800164e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fd93 	bl	800217e <HAL_SYSTICK_Config>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e00e      	b.n	8001680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b0f      	cmp	r3, #15
 8001666:	d80a      	bhi.n	800167e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001668:	2200      	movs	r2, #0
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001670:	f000 fd5b 	bl	800212a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001674:	4a06      	ldr	r2, [pc, #24]	@ (8001690 <HAL_InitTick+0x5c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000000 	.word	0x20000000
 800168c:	20000008 	.word	0x20000008
 8001690:	20000004 	.word	0x20000004

08001694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001698:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <HAL_IncTick+0x1c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_IncTick+0x20>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a03      	ldr	r2, [pc, #12]	@ (80016b4 <HAL_IncTick+0x20>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	20000008 	.word	0x20000008
 80016b4:	20000568 	.word	0x20000568

080016b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b02      	ldr	r3, [pc, #8]	@ (80016c8 <HAL_GetTick+0x10>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	20000568 	.word	0x20000568

080016cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e0be      	b.n	800186c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d109      	bne.n	8001710 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff feba 	bl	8001484 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 fbf1 	bl	8001ef8 <ADC_ConversionStop_Disable>
 8001716:	4603      	mov	r3, r0
 8001718:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 8099 	bne.w	800185a <HAL_ADC_Init+0x18e>
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f040 8095 	bne.w	800185a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001734:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001738:	f023 0302 	bic.w	r3, r3, #2
 800173c:	f043 0202 	orr.w	r2, r3, #2
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800174c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7b1b      	ldrb	r3, [r3, #12]
 8001752:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001754:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	4313      	orrs	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001764:	d003      	beq.n	800176e <HAL_ADC_Init+0xa2>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d102      	bne.n	8001774 <HAL_ADC_Init+0xa8>
 800176e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001772:	e000      	b.n	8001776 <HAL_ADC_Init+0xaa>
 8001774:	2300      	movs	r3, #0
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7d1b      	ldrb	r3, [r3, #20]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d119      	bne.n	80017b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7b1b      	ldrb	r3, [r3, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d109      	bne.n	80017a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	3b01      	subs	r3, #1
 8001792:	035a      	lsls	r2, r3, #13
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	e00b      	b.n	80017b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a4:	f043 0220 	orr.w	r2, r3, #32
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b0:	f043 0201 	orr.w	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	4b28      	ldr	r3, [pc, #160]	@ (8001874 <HAL_ADC_Init+0x1a8>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	430b      	orrs	r3, r1
 80017de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017e8:	d003      	beq.n	80017f2 <HAL_ADC_Init+0x126>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d104      	bne.n	80017fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	051b      	lsls	r3, r3, #20
 80017fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001802:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	430a      	orrs	r2, r1
 800180e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <HAL_ADC_Init+0x1ac>)
 8001818:	4013      	ands	r3, r2
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	429a      	cmp	r2, r3
 800181e:	d10b      	bne.n	8001838 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182a:	f023 0303 	bic.w	r3, r3, #3
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001836:	e018      	b.n	800186a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183c:	f023 0312 	bic.w	r3, r3, #18
 8001840:	f043 0210 	orr.w	r2, r3, #16
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001858:	e007      	b.n	800186a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185e:	f043 0210 	orr.w	r2, r3, #16
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800186a:	7dfb      	ldrb	r3, [r7, #23]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	ffe1f7fd 	.word	0xffe1f7fd
 8001878:	ff1f0efe 	.word	0xff1f0efe

0800187c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_ADC_Start+0x1a>
 8001892:	2302      	movs	r3, #2
 8001894:	e098      	b.n	80019c8 <HAL_ADC_Start+0x14c>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fad0 	bl	8001e44 <ADC_Enable>
 80018a4:	4603      	mov	r3, r0
 80018a6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f040 8087 	bne.w	80019be <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a41      	ldr	r2, [pc, #260]	@ (80019d0 <HAL_ADC_Start+0x154>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d105      	bne.n	80018da <HAL_ADC_Start+0x5e>
 80018ce:	4b41      	ldr	r3, [pc, #260]	@ (80019d4 <HAL_ADC_Start+0x158>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d115      	bne.n	8001906 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018de:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d026      	beq.n	8001942 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018fc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001904:	e01d      	b.n	8001942 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a2f      	ldr	r2, [pc, #188]	@ (80019d4 <HAL_ADC_Start+0x158>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d004      	beq.n	8001926 <HAL_ADC_Start+0xaa>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a2b      	ldr	r2, [pc, #172]	@ (80019d0 <HAL_ADC_Start+0x154>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d10d      	bne.n	8001942 <HAL_ADC_Start+0xc6>
 8001926:	4b2b      	ldr	r3, [pc, #172]	@ (80019d4 <HAL_ADC_Start+0x158>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001936:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800193a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001946:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d006      	beq.n	800195c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001952:	f023 0206 	bic.w	r2, r3, #6
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	62da      	str	r2, [r3, #44]	@ 0x2c
 800195a:	e002      	b.n	8001962 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f06f 0202 	mvn.w	r2, #2
 8001972:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800197e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001982:	d113      	bne.n	80019ac <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001988:	4a11      	ldr	r2, [pc, #68]	@ (80019d0 <HAL_ADC_Start+0x154>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d105      	bne.n	800199a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800198e:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <HAL_ADC_Start+0x158>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001996:	2b00      	cmp	r3, #0
 8001998:	d108      	bne.n	80019ac <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	e00c      	b.n	80019c6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	e003      	b.n	80019c6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40012800 	.word	0x40012800
 80019d4:	40012400 	.word	0x40012400

080019d8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Stop+0x1a>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e01a      	b.n	8001a28 <HAL_ADC_Stop+0x50>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fa7c 	bl	8001ef8 <ADC_ConversionStop_Disable>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d109      	bne.n	8001a1e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	f043 0201 	orr.w	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a46:	f7ff fe37 	bl	80016b8 <HAL_GetTick>
 8001a4a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5e:	f043 0220 	orr.w	r2, r3, #32
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0d3      	b.n	8001c1a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d131      	bne.n	8001ae4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a86:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d12a      	bne.n	8001ae4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a8e:	e021      	b.n	8001ad4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a96:	d01d      	beq.n	8001ad4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d007      	beq.n	8001aae <HAL_ADC_PollForConversion+0x7e>
 8001a9e:	f7ff fe0b 	bl	80016b8 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d212      	bcs.n	8001ad4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10b      	bne.n	8001ad4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac0:	f043 0204 	orr.w	r2, r3, #4
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e0a2      	b.n	8001c1a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0d6      	beq.n	8001a90 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ae2:	e070      	b.n	8001bc6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ae4:	4b4f      	ldr	r3, [pc, #316]	@ (8001c24 <HAL_ADC_PollForConversion+0x1f4>)
 8001ae6:	681c      	ldr	r4, [r3, #0]
 8001ae8:	2002      	movs	r0, #2
 8001aea:	f001 f98b 	bl	8002e04 <HAL_RCCEx_GetPeriphCLKFreq>
 8001aee:	4603      	mov	r3, r0
 8001af0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6919      	ldr	r1, [r3, #16]
 8001afa:	4b4b      	ldr	r3, [pc, #300]	@ (8001c28 <HAL_ADC_PollForConversion+0x1f8>)
 8001afc:	400b      	ands	r3, r1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d118      	bne.n	8001b34 <HAL_ADC_PollForConversion+0x104>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68d9      	ldr	r1, [r3, #12]
 8001b08:	4b48      	ldr	r3, [pc, #288]	@ (8001c2c <HAL_ADC_PollForConversion+0x1fc>)
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d111      	bne.n	8001b34 <HAL_ADC_PollForConversion+0x104>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6919      	ldr	r1, [r3, #16]
 8001b16:	4b46      	ldr	r3, [pc, #280]	@ (8001c30 <HAL_ADC_PollForConversion+0x200>)
 8001b18:	400b      	ands	r3, r1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d108      	bne.n	8001b30 <HAL_ADC_PollForConversion+0x100>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68d9      	ldr	r1, [r3, #12]
 8001b24:	4b43      	ldr	r3, [pc, #268]	@ (8001c34 <HAL_ADC_PollForConversion+0x204>)
 8001b26:	400b      	ands	r3, r1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_ADC_PollForConversion+0x100>
 8001b2c:	2314      	movs	r3, #20
 8001b2e:	e020      	b.n	8001b72 <HAL_ADC_PollForConversion+0x142>
 8001b30:	2329      	movs	r3, #41	@ 0x29
 8001b32:	e01e      	b.n	8001b72 <HAL_ADC_PollForConversion+0x142>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6919      	ldr	r1, [r3, #16]
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c30 <HAL_ADC_PollForConversion+0x200>)
 8001b3c:	400b      	ands	r3, r1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d106      	bne.n	8001b50 <HAL_ADC_PollForConversion+0x120>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68d9      	ldr	r1, [r3, #12]
 8001b48:	4b3a      	ldr	r3, [pc, #232]	@ (8001c34 <HAL_ADC_PollForConversion+0x204>)
 8001b4a:	400b      	ands	r3, r1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00d      	beq.n	8001b6c <HAL_ADC_PollForConversion+0x13c>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6919      	ldr	r1, [r3, #16]
 8001b56:	4b38      	ldr	r3, [pc, #224]	@ (8001c38 <HAL_ADC_PollForConversion+0x208>)
 8001b58:	400b      	ands	r3, r1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d108      	bne.n	8001b70 <HAL_ADC_PollForConversion+0x140>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68d9      	ldr	r1, [r3, #12]
 8001b64:	4b34      	ldr	r3, [pc, #208]	@ (8001c38 <HAL_ADC_PollForConversion+0x208>)
 8001b66:	400b      	ands	r3, r1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_PollForConversion+0x140>
 8001b6c:	2354      	movs	r3, #84	@ 0x54
 8001b6e:	e000      	b.n	8001b72 <HAL_ADC_PollForConversion+0x142>
 8001b70:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b78:	e021      	b.n	8001bbe <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b80:	d01a      	beq.n	8001bb8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d007      	beq.n	8001b98 <HAL_ADC_PollForConversion+0x168>
 8001b88:	f7ff fd96 	bl	80016b8 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d20f      	bcs.n	8001bb8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d90b      	bls.n	8001bb8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba4:	f043 0204 	orr.w	r2, r3, #4
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e030      	b.n	8001c1a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d8d9      	bhi.n	8001b7a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f06f 0212 	mvn.w	r2, #18
 8001bce:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001be6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001bea:	d115      	bne.n	8001c18 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d111      	bne.n	8001c18 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d105      	bne.n	8001c18 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c10:	f043 0201 	orr.w	r2, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	371c      	adds	r7, #28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd90      	pop	{r4, r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000000 	.word	0x20000000
 8001c28:	24924924 	.word	0x24924924
 8001c2c:	00924924 	.word	0x00924924
 8001c30:	12492492 	.word	0x12492492
 8001c34:	00492492 	.word	0x00492492
 8001c38:	00249249 	.word	0x00249249

08001c3c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x20>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e0dc      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x1da>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b06      	cmp	r3, #6
 8001c82:	d81c      	bhi.n	8001cbe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	3b05      	subs	r3, #5
 8001c96:	221f      	movs	r2, #31
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	4019      	ands	r1, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	3b05      	subs	r3, #5
 8001cb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cbc:	e03c      	b.n	8001d38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	d81c      	bhi.n	8001d00 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3b23      	subs	r3, #35	@ 0x23
 8001cd8:	221f      	movs	r2, #31
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	4019      	ands	r1, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	3b23      	subs	r3, #35	@ 0x23
 8001cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cfe:	e01b      	b.n	8001d38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	3b41      	subs	r3, #65	@ 0x41
 8001d12:	221f      	movs	r2, #31
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4019      	ands	r1, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	3b41      	subs	r3, #65	@ 0x41
 8001d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b09      	cmp	r3, #9
 8001d3e:	d91c      	bls.n	8001d7a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68d9      	ldr	r1, [r3, #12]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	3b1e      	subs	r3, #30
 8001d52:	2207      	movs	r2, #7
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	4019      	ands	r1, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6898      	ldr	r0, [r3, #8]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	3b1e      	subs	r3, #30
 8001d6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	60da      	str	r2, [r3, #12]
 8001d78:	e019      	b.n	8001dae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6919      	ldr	r1, [r3, #16]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4019      	ands	r1, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6898      	ldr	r0, [r3, #8]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	fa00 f203 	lsl.w	r2, r0, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d003      	beq.n	8001dbe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dba:	2b11      	cmp	r3, #17
 8001dbc:	d132      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e38 <HAL_ADC_ConfigChannel+0x1e4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d125      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d126      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001de4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b10      	cmp	r3, #16
 8001dec:	d11a      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <HAL_ADC_ConfigChannel+0x1e8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a13      	ldr	r2, [pc, #76]	@ (8001e40 <HAL_ADC_ConfigChannel+0x1ec>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	0c9a      	lsrs	r2, r3, #18
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e04:	e002      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f9      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x1b2>
 8001e12:	e007      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e18:	f043 0220 	orr.w	r2, r3, #32
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	40012400 	.word	0x40012400
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	431bde83 	.word	0x431bde83

08001e44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d040      	beq.n	8001ee4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0201 	orr.w	r2, r2, #1
 8001e70:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e72:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <ADC_Enable+0xac>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef4 <ADC_Enable+0xb0>)
 8001e78:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7c:	0c9b      	lsrs	r3, r3, #18
 8001e7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e80:	e002      	b.n	8001e88 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f9      	bne.n	8001e82 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e8e:	f7ff fc13 	bl	80016b8 <HAL_GetTick>
 8001e92:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e94:	e01f      	b.n	8001ed6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e96:	f7ff fc0f 	bl	80016b8 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d918      	bls.n	8001ed6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d011      	beq.n	8001ed6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb6:	f043 0210 	orr.w	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec2:	f043 0201 	orr.w	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e007      	b.n	8001ee6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d1d8      	bne.n	8001e96 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	431bde83 	.word	0x431bde83

08001ef8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d12e      	bne.n	8001f70 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0201 	bic.w	r2, r2, #1
 8001f20:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f22:	f7ff fbc9 	bl	80016b8 <HAL_GetTick>
 8001f26:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f28:	e01b      	b.n	8001f62 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f2a:	f7ff fbc5 	bl	80016b8 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d914      	bls.n	8001f62 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d10d      	bne.n	8001f62 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4a:	f043 0210 	orr.w	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f56:	f043 0201 	orr.w	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e007      	b.n	8001f72 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d0dc      	beq.n	8001f2a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fae:	4a04      	ldr	r2, [pc, #16]	@ (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	60d3      	str	r3, [r2, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc8:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <__NVIC_GetPriorityGrouping+0x18>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	f003 0307 	and.w	r3, r3, #7
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	db0b      	blt.n	800200a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	4906      	ldr	r1, [pc, #24]	@ (8002014 <__NVIC_EnableIRQ+0x34>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2001      	movs	r0, #1
 8002002:	fa00 f202 	lsl.w	r2, r0, r2
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	e000e100 	.word	0xe000e100

08002018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db0a      	blt.n	8002042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	490c      	ldr	r1, [pc, #48]	@ (8002064 <__NVIC_SetPriority+0x4c>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	440b      	add	r3, r1
 800203c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002040:	e00a      	b.n	8002058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4908      	ldr	r1, [pc, #32]	@ (8002068 <__NVIC_SetPriority+0x50>)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	3b04      	subs	r3, #4
 8002050:	0112      	lsls	r2, r2, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	440b      	add	r3, r1
 8002056:	761a      	strb	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	@ 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf28      	it	cs
 800208a:	2304      	movcs	r3, #4
 800208c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3304      	adds	r3, #4
 8002092:	2b06      	cmp	r3, #6
 8002094:	d902      	bls.n	800209c <NVIC_EncodePriority+0x30>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3b03      	subs	r3, #3
 800209a:	e000      	b.n	800209e <NVIC_EncodePriority+0x32>
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43d9      	mvns	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	4313      	orrs	r3, r2
         );
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	@ 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020e0:	d301      	bcc.n	80020e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00f      	b.n	8002106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <SysTick_Config+0x40>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ee:	210f      	movs	r1, #15
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020f4:	f7ff ff90 	bl	8002018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f8:	4b05      	ldr	r3, [pc, #20]	@ (8002110 <SysTick_Config+0x40>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fe:	4b04      	ldr	r3, [pc, #16]	@ (8002110 <SysTick_Config+0x40>)
 8002100:	2207      	movs	r2, #7
 8002102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	e000e010 	.word	0xe000e010

08002114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ff2d 	bl	8001f7c <__NVIC_SetPriorityGrouping>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800213c:	f7ff ff42 	bl	8001fc4 <__NVIC_GetPriorityGrouping>
 8002140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	6978      	ldr	r0, [r7, #20]
 8002148:	f7ff ff90 	bl	800206c <NVIC_EncodePriority>
 800214c:	4602      	mov	r2, r0
 800214e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff5f 	bl	8002018 <__NVIC_SetPriority>
}
 800215a:	bf00      	nop
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	4603      	mov	r3, r0
 800216a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff35 	bl	8001fe0 <__NVIC_EnableIRQ>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ffa2 	bl	80020d0 <SysTick_Config>
 800218c:	4603      	mov	r3, r0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002198:	b480      	push	{r7}
 800219a:	b08b      	sub	sp, #44	@ 0x2c
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021a6:	2300      	movs	r3, #0
 80021a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021aa:	e169      	b.n	8002480 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021ac:	2201      	movs	r2, #1
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	f040 8158 	bne.w	800247a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4a9a      	ldr	r2, [pc, #616]	@ (8002438 <HAL_GPIO_Init+0x2a0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d05e      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
 80021d4:	4a98      	ldr	r2, [pc, #608]	@ (8002438 <HAL_GPIO_Init+0x2a0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d875      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 80021da:	4a98      	ldr	r2, [pc, #608]	@ (800243c <HAL_GPIO_Init+0x2a4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d058      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
 80021e0:	4a96      	ldr	r2, [pc, #600]	@ (800243c <HAL_GPIO_Init+0x2a4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d86f      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 80021e6:	4a96      	ldr	r2, [pc, #600]	@ (8002440 <HAL_GPIO_Init+0x2a8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d052      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
 80021ec:	4a94      	ldr	r2, [pc, #592]	@ (8002440 <HAL_GPIO_Init+0x2a8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d869      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 80021f2:	4a94      	ldr	r2, [pc, #592]	@ (8002444 <HAL_GPIO_Init+0x2ac>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d04c      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
 80021f8:	4a92      	ldr	r2, [pc, #584]	@ (8002444 <HAL_GPIO_Init+0x2ac>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d863      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 80021fe:	4a92      	ldr	r2, [pc, #584]	@ (8002448 <HAL_GPIO_Init+0x2b0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d046      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
 8002204:	4a90      	ldr	r2, [pc, #576]	@ (8002448 <HAL_GPIO_Init+0x2b0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d85d      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 800220a:	2b12      	cmp	r3, #18
 800220c:	d82a      	bhi.n	8002264 <HAL_GPIO_Init+0xcc>
 800220e:	2b12      	cmp	r3, #18
 8002210:	d859      	bhi.n	80022c6 <HAL_GPIO_Init+0x12e>
 8002212:	a201      	add	r2, pc, #4	@ (adr r2, 8002218 <HAL_GPIO_Init+0x80>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	08002293 	.word	0x08002293
 800221c:	0800226d 	.word	0x0800226d
 8002220:	0800227f 	.word	0x0800227f
 8002224:	080022c1 	.word	0x080022c1
 8002228:	080022c7 	.word	0x080022c7
 800222c:	080022c7 	.word	0x080022c7
 8002230:	080022c7 	.word	0x080022c7
 8002234:	080022c7 	.word	0x080022c7
 8002238:	080022c7 	.word	0x080022c7
 800223c:	080022c7 	.word	0x080022c7
 8002240:	080022c7 	.word	0x080022c7
 8002244:	080022c7 	.word	0x080022c7
 8002248:	080022c7 	.word	0x080022c7
 800224c:	080022c7 	.word	0x080022c7
 8002250:	080022c7 	.word	0x080022c7
 8002254:	080022c7 	.word	0x080022c7
 8002258:	080022c7 	.word	0x080022c7
 800225c:	08002275 	.word	0x08002275
 8002260:	08002289 	.word	0x08002289
 8002264:	4a79      	ldr	r2, [pc, #484]	@ (800244c <HAL_GPIO_Init+0x2b4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800226a:	e02c      	b.n	80022c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	623b      	str	r3, [r7, #32]
          break;
 8002272:	e029      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	3304      	adds	r3, #4
 800227a:	623b      	str	r3, [r7, #32]
          break;
 800227c:	e024      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	3308      	adds	r3, #8
 8002284:	623b      	str	r3, [r7, #32]
          break;
 8002286:	e01f      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	330c      	adds	r3, #12
 800228e:	623b      	str	r3, [r7, #32]
          break;
 8002290:	e01a      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d102      	bne.n	80022a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800229a:	2304      	movs	r3, #4
 800229c:	623b      	str	r3, [r7, #32]
          break;
 800229e:	e013      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d105      	bne.n	80022b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a8:	2308      	movs	r3, #8
 80022aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	611a      	str	r2, [r3, #16]
          break;
 80022b2:	e009      	b.n	80022c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b4:	2308      	movs	r3, #8
 80022b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	615a      	str	r2, [r3, #20]
          break;
 80022be:	e003      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
          break;
 80022c4:	e000      	b.n	80022c8 <HAL_GPIO_Init+0x130>
          break;
 80022c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2bff      	cmp	r3, #255	@ 0xff
 80022cc:	d801      	bhi.n	80022d2 <HAL_GPIO_Init+0x13a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	e001      	b.n	80022d6 <HAL_GPIO_Init+0x13e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3304      	adds	r3, #4
 80022d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2bff      	cmp	r3, #255	@ 0xff
 80022dc:	d802      	bhi.n	80022e4 <HAL_GPIO_Init+0x14c>
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	e002      	b.n	80022ea <HAL_GPIO_Init+0x152>
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	3b08      	subs	r3, #8
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	210f      	movs	r1, #15
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	401a      	ands	r2, r3
 80022fc:	6a39      	ldr	r1, [r7, #32]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	431a      	orrs	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 80b1 	beq.w	800247a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002318:	4b4d      	ldr	r3, [pc, #308]	@ (8002450 <HAL_GPIO_Init+0x2b8>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4a4c      	ldr	r2, [pc, #304]	@ (8002450 <HAL_GPIO_Init+0x2b8>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6193      	str	r3, [r2, #24]
 8002324:	4b4a      	ldr	r3, [pc, #296]	@ (8002450 <HAL_GPIO_Init+0x2b8>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002330:	4a48      	ldr	r2, [pc, #288]	@ (8002454 <HAL_GPIO_Init+0x2bc>)
 8002332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002334:	089b      	lsrs	r3, r3, #2
 8002336:	3302      	adds	r3, #2
 8002338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	220f      	movs	r2, #15
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4013      	ands	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a40      	ldr	r2, [pc, #256]	@ (8002458 <HAL_GPIO_Init+0x2c0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d013      	beq.n	8002384 <HAL_GPIO_Init+0x1ec>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a3f      	ldr	r2, [pc, #252]	@ (800245c <HAL_GPIO_Init+0x2c4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d00d      	beq.n	8002380 <HAL_GPIO_Init+0x1e8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a3e      	ldr	r2, [pc, #248]	@ (8002460 <HAL_GPIO_Init+0x2c8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d007      	beq.n	800237c <HAL_GPIO_Init+0x1e4>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a3d      	ldr	r2, [pc, #244]	@ (8002464 <HAL_GPIO_Init+0x2cc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_GPIO_Init+0x1e0>
 8002374:	2303      	movs	r3, #3
 8002376:	e006      	b.n	8002386 <HAL_GPIO_Init+0x1ee>
 8002378:	2304      	movs	r3, #4
 800237a:	e004      	b.n	8002386 <HAL_GPIO_Init+0x1ee>
 800237c:	2302      	movs	r3, #2
 800237e:	e002      	b.n	8002386 <HAL_GPIO_Init+0x1ee>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <HAL_GPIO_Init+0x1ee>
 8002384:	2300      	movs	r3, #0
 8002386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002388:	f002 0203 	and.w	r2, r2, #3
 800238c:	0092      	lsls	r2, r2, #2
 800238e:	4093      	lsls	r3, r2
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002396:	492f      	ldr	r1, [pc, #188]	@ (8002454 <HAL_GPIO_Init+0x2bc>)
 8002398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d006      	beq.n	80023be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	492c      	ldr	r1, [pc, #176]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	608b      	str	r3, [r1, #8]
 80023bc:	e006      	b.n	80023cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023be:	4b2a      	ldr	r3, [pc, #168]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	4928      	ldr	r1, [pc, #160]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023d8:	4b23      	ldr	r3, [pc, #140]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	4922      	ldr	r1, [pc, #136]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60cb      	str	r3, [r1, #12]
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023e6:	4b20      	ldr	r3, [pc, #128]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	491e      	ldr	r1, [pc, #120]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002400:	4b19      	ldr	r3, [pc, #100]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	4918      	ldr	r1, [pc, #96]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800240e:	4b16      	ldr	r3, [pc, #88]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	43db      	mvns	r3, r3
 8002416:	4914      	ldr	r1, [pc, #80]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 8002418:	4013      	ands	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d021      	beq.n	800246c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002428:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	490e      	ldr	r1, [pc, #56]	@ (8002468 <HAL_GPIO_Init+0x2d0>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]
 8002434:	e021      	b.n	800247a <HAL_GPIO_Init+0x2e2>
 8002436:	bf00      	nop
 8002438:	10320000 	.word	0x10320000
 800243c:	10310000 	.word	0x10310000
 8002440:	10220000 	.word	0x10220000
 8002444:	10210000 	.word	0x10210000
 8002448:	10120000 	.word	0x10120000
 800244c:	10110000 	.word	0x10110000
 8002450:	40021000 	.word	0x40021000
 8002454:	40010000 	.word	0x40010000
 8002458:	40010800 	.word	0x40010800
 800245c:	40010c00 	.word	0x40010c00
 8002460:	40011000 	.word	0x40011000
 8002464:	40011400 	.word	0x40011400
 8002468:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800246c:	4b0b      	ldr	r3, [pc, #44]	@ (800249c <HAL_GPIO_Init+0x304>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	43db      	mvns	r3, r3
 8002474:	4909      	ldr	r1, [pc, #36]	@ (800249c <HAL_GPIO_Init+0x304>)
 8002476:	4013      	ands	r3, r2
 8002478:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	3301      	adds	r3, #1
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	fa22 f303 	lsr.w	r3, r2, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	f47f ae8e 	bne.w	80021ac <HAL_GPIO_Init+0x14>
  }
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	372c      	adds	r7, #44	@ 0x2c
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	40010400 	.word	0x40010400

080024a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e272      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8087 	beq.w	80025ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c0:	4b92      	ldr	r3, [pc, #584]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 030c 	and.w	r3, r3, #12
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d00c      	beq.n	80024e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024cc:	4b8f      	ldr	r3, [pc, #572]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d112      	bne.n	80024fe <HAL_RCC_OscConfig+0x5e>
 80024d8:	4b8c      	ldr	r3, [pc, #560]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e4:	d10b      	bne.n	80024fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e6:	4b89      	ldr	r3, [pc, #548]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d06c      	beq.n	80025cc <HAL_RCC_OscConfig+0x12c>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d168      	bne.n	80025cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e24c      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x76>
 8002508:	4b80      	ldr	r3, [pc, #512]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a7f      	ldr	r2, [pc, #508]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 800250e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	e02e      	b.n	8002574 <HAL_RCC_OscConfig+0xd4>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x98>
 800251e:	4b7b      	ldr	r3, [pc, #492]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a7a      	ldr	r2, [pc, #488]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 8002524:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b78      	ldr	r3, [pc, #480]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a77      	ldr	r2, [pc, #476]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 8002530:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e01d      	b.n	8002574 <HAL_RCC_OscConfig+0xd4>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0xbc>
 8002542:	4b72      	ldr	r3, [pc, #456]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a71      	ldr	r2, [pc, #452]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 8002548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	4b6f      	ldr	r3, [pc, #444]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a6e      	ldr	r2, [pc, #440]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 8002554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e00b      	b.n	8002574 <HAL_RCC_OscConfig+0xd4>
 800255c:	4b6b      	ldr	r3, [pc, #428]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a6a      	ldr	r2, [pc, #424]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 8002562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b68      	ldr	r3, [pc, #416]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a67      	ldr	r2, [pc, #412]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 800256e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002572:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d013      	beq.n	80025a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7ff f89c 	bl	80016b8 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002584:	f7ff f898 	bl	80016b8 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	@ 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e200      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	4b5d      	ldr	r3, [pc, #372]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0xe4>
 80025a2:	e014      	b.n	80025ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7ff f888 	bl	80016b8 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ac:	f7ff f884 	bl	80016b8 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	@ 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e1ec      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025be:	4b53      	ldr	r3, [pc, #332]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x10c>
 80025ca:	e000      	b.n	80025ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d063      	beq.n	80026a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025da:	4b4c      	ldr	r3, [pc, #304]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00b      	beq.n	80025fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025e6:	4b49      	ldr	r3, [pc, #292]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d11c      	bne.n	800262c <HAL_RCC_OscConfig+0x18c>
 80025f2:	4b46      	ldr	r3, [pc, #280]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d116      	bne.n	800262c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fe:	4b43      	ldr	r3, [pc, #268]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_RCC_OscConfig+0x176>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d001      	beq.n	8002616 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e1c0      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002616:	4b3d      	ldr	r3, [pc, #244]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4939      	ldr	r1, [pc, #228]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262a:	e03a      	b.n	80026a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d020      	beq.n	8002676 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002634:	4b36      	ldr	r3, [pc, #216]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7ff f83d 	bl	80016b8 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002642:	f7ff f839 	bl	80016b8 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e1a1      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002654:	4b2d      	ldr	r3, [pc, #180]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002660:	4b2a      	ldr	r3, [pc, #168]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4927      	ldr	r1, [pc, #156]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 8002670:	4313      	orrs	r3, r2
 8002672:	600b      	str	r3, [r1, #0]
 8002674:	e015      	b.n	80026a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002676:	4b26      	ldr	r3, [pc, #152]	@ (8002710 <HAL_RCC_OscConfig+0x270>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7ff f81c 	bl	80016b8 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002684:	f7ff f818 	bl	80016b8 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e180      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002696:	4b1d      	ldr	r3, [pc, #116]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d03a      	beq.n	8002724 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d019      	beq.n	80026ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b6:	4b17      	ldr	r3, [pc, #92]	@ (8002714 <HAL_RCC_OscConfig+0x274>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026bc:	f7fe fffc 	bl	80016b8 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c4:	f7fe fff8 	bl	80016b8 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e160      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d6:	4b0d      	ldr	r3, [pc, #52]	@ (800270c <HAL_RCC_OscConfig+0x26c>)
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026e2:	2001      	movs	r0, #1
 80026e4:	f000 faba 	bl	8002c5c <RCC_Delay>
 80026e8:	e01c      	b.n	8002724 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <HAL_RCC_OscConfig+0x274>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f0:	f7fe ffe2 	bl	80016b8 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f6:	e00f      	b.n	8002718 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f8:	f7fe ffde 	bl	80016b8 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d908      	bls.n	8002718 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e146      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000
 8002710:	42420000 	.word	0x42420000
 8002714:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002718:	4b92      	ldr	r3, [pc, #584]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1e9      	bne.n	80026f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80a6 	beq.w	800287e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002732:	2300      	movs	r3, #0
 8002734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002736:	4b8b      	ldr	r3, [pc, #556]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10d      	bne.n	800275e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002742:	4b88      	ldr	r3, [pc, #544]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	4a87      	ldr	r2, [pc, #540]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 8002748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800274c:	61d3      	str	r3, [r2, #28]
 800274e:	4b85      	ldr	r3, [pc, #532]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275a:	2301      	movs	r3, #1
 800275c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275e:	4b82      	ldr	r3, [pc, #520]	@ (8002968 <HAL_RCC_OscConfig+0x4c8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d118      	bne.n	800279c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800276a:	4b7f      	ldr	r3, [pc, #508]	@ (8002968 <HAL_RCC_OscConfig+0x4c8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a7e      	ldr	r2, [pc, #504]	@ (8002968 <HAL_RCC_OscConfig+0x4c8>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002776:	f7fe ff9f 	bl	80016b8 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe ff9b 	bl	80016b8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b64      	cmp	r3, #100	@ 0x64
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e103      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002790:	4b75      	ldr	r3, [pc, #468]	@ (8002968 <HAL_RCC_OscConfig+0x4c8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x312>
 80027a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	4a6e      	ldr	r2, [pc, #440]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6213      	str	r3, [r2, #32]
 80027b0:	e02d      	b.n	800280e <HAL_RCC_OscConfig+0x36e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x334>
 80027ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	4a69      	ldr	r2, [pc, #420]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	6213      	str	r3, [r2, #32]
 80027c6:	4b67      	ldr	r3, [pc, #412]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4a66      	ldr	r2, [pc, #408]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	f023 0304 	bic.w	r3, r3, #4
 80027d0:	6213      	str	r3, [r2, #32]
 80027d2:	e01c      	b.n	800280e <HAL_RCC_OscConfig+0x36e>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b05      	cmp	r3, #5
 80027da:	d10c      	bne.n	80027f6 <HAL_RCC_OscConfig+0x356>
 80027dc:	4b61      	ldr	r3, [pc, #388]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4a60      	ldr	r2, [pc, #384]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	f043 0304 	orr.w	r3, r3, #4
 80027e6:	6213      	str	r3, [r2, #32]
 80027e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6213      	str	r3, [r2, #32]
 80027f4:	e00b      	b.n	800280e <HAL_RCC_OscConfig+0x36e>
 80027f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4a5a      	ldr	r2, [pc, #360]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	6213      	str	r3, [r2, #32]
 8002802:	4b58      	ldr	r3, [pc, #352]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4a57      	ldr	r2, [pc, #348]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	f023 0304 	bic.w	r3, r3, #4
 800280c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d015      	beq.n	8002842 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002816:	f7fe ff4f 	bl	80016b8 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281c:	e00a      	b.n	8002834 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7fe ff4b 	bl	80016b8 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e0b1      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002834:	4b4b      	ldr	r3, [pc, #300]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0ee      	beq.n	800281e <HAL_RCC_OscConfig+0x37e>
 8002840:	e014      	b.n	800286c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002842:	f7fe ff39 	bl	80016b8 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002848:	e00a      	b.n	8002860 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284a:	f7fe ff35 	bl	80016b8 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002858:	4293      	cmp	r3, r2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e09b      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002860:	4b40      	ldr	r3, [pc, #256]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1ee      	bne.n	800284a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800286c:	7dfb      	ldrb	r3, [r7, #23]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d105      	bne.n	800287e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002872:	4b3c      	ldr	r3, [pc, #240]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	4a3b      	ldr	r2, [pc, #236]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800287c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8087 	beq.w	8002996 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002888:	4b36      	ldr	r3, [pc, #216]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 030c 	and.w	r3, r3, #12
 8002890:	2b08      	cmp	r3, #8
 8002892:	d061      	beq.n	8002958 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d146      	bne.n	800292a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289c:	4b33      	ldr	r3, [pc, #204]	@ (800296c <HAL_RCC_OscConfig+0x4cc>)
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fe ff09 	bl	80016b8 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028aa:	f7fe ff05 	bl	80016b8 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e06d      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028bc:	4b29      	ldr	r3, [pc, #164]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f0      	bne.n	80028aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028d0:	d108      	bne.n	80028e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028d2:	4b24      	ldr	r3, [pc, #144]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	4921      	ldr	r1, [pc, #132]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a19      	ldr	r1, [r3, #32]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	430b      	orrs	r3, r1
 80028f6:	491b      	ldr	r1, [pc, #108]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028fc:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <HAL_RCC_OscConfig+0x4cc>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7fe fed9 	bl	80016b8 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290a:	f7fe fed5 	bl	80016b8 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e03d      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800291c:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x46a>
 8002928:	e035      	b.n	8002996 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292a:	4b10      	ldr	r3, [pc, #64]	@ (800296c <HAL_RCC_OscConfig+0x4cc>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7fe fec2 	bl	80016b8 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002938:	f7fe febe 	bl	80016b8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e026      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294a:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x498>
 8002956:	e01e      	b.n	8002996 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d107      	bne.n	8002970 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e019      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>
 8002964:	40021000 	.word	0x40021000
 8002968:	40007000 	.word	0x40007000
 800296c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002970:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <HAL_RCC_OscConfig+0x500>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	429a      	cmp	r2, r3
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d001      	beq.n	8002996 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000

080029a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0d0      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c0>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d910      	bls.n	80029e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c6:	4b67      	ldr	r3, [pc, #412]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 0207 	bic.w	r2, r3, #7
 80029ce:	4965      	ldr	r1, [pc, #404]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d6:	4b63      	ldr	r3, [pc, #396]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0b8      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d020      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a00:	4b59      	ldr	r3, [pc, #356]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a58      	ldr	r2, [pc, #352]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a18:	4b53      	ldr	r3, [pc, #332]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4a52      	ldr	r2, [pc, #328]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a24:	4b50      	ldr	r3, [pc, #320]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	494d      	ldr	r1, [pc, #308]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d040      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d107      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	4b47      	ldr	r3, [pc, #284]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d115      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e07f      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d107      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a62:	4b41      	ldr	r3, [pc, #260]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e073      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a72:	4b3d      	ldr	r3, [pc, #244]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e06b      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a82:	4b39      	ldr	r3, [pc, #228]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f023 0203 	bic.w	r2, r3, #3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	4936      	ldr	r1, [pc, #216]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a94:	f7fe fe10 	bl	80016b8 <HAL_GetTick>
 8002a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9c:	f7fe fe0c 	bl	80016b8 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e053      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 020c 	and.w	r2, r3, #12
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d1eb      	bne.n	8002a9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac4:	4b27      	ldr	r3, [pc, #156]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d210      	bcs.n	8002af4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad2:	4b24      	ldr	r3, [pc, #144]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 0207 	bic.w	r2, r3, #7
 8002ada:	4922      	ldr	r1, [pc, #136]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae2:	4b20      	ldr	r3, [pc, #128]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e032      	b.n	8002b5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b00:	4b19      	ldr	r3, [pc, #100]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4916      	ldr	r1, [pc, #88]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b1e:	4b12      	ldr	r3, [pc, #72]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	490e      	ldr	r1, [pc, #56]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b32:	f000 f821 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8002b36:	4602      	mov	r2, r0
 8002b38:	4b0b      	ldr	r3, [pc, #44]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	490a      	ldr	r1, [pc, #40]	@ (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002b44:	5ccb      	ldrb	r3, [r1, r3]
 8002b46:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4a:	4a09      	ldr	r2, [pc, #36]	@ (8002b70 <HAL_RCC_ClockConfig+0x1cc>)
 8002b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b4e:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <HAL_RCC_ClockConfig+0x1d0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe fd6e 	bl	8001634 <HAL_InitTick>

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40022000 	.word	0x40022000
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	08004760 	.word	0x08004760
 8002b70:	20000000 	.word	0x20000000
 8002b74:	20000004 	.word	0x20000004

08002b78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b92:	4b1e      	ldr	r3, [pc, #120]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d002      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d003      	beq.n	8002bae <HAL_RCC_GetSysClockFreq+0x36>
 8002ba6:	e027      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba8:	4b19      	ldr	r3, [pc, #100]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002baa:	613b      	str	r3, [r7, #16]
      break;
 8002bac:	e027      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	0c9b      	lsrs	r3, r3, #18
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	4a17      	ldr	r2, [pc, #92]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bb8:	5cd3      	ldrb	r3, [r2, r3]
 8002bba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d010      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bc6:	4b11      	ldr	r3, [pc, #68]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x94>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	0c5b      	lsrs	r3, r3, #17
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	4a11      	ldr	r2, [pc, #68]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bda:	fb03 f202 	mul.w	r2, r3, r2
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	e004      	b.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a0c      	ldr	r2, [pc, #48]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bec:	fb02 f303 	mul.w	r3, r2, r3
 8002bf0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	613b      	str	r3, [r7, #16]
      break;
 8002bf6:	e002      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bf8:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bfa:	613b      	str	r3, [r7, #16]
      break;
 8002bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bfe:	693b      	ldr	r3, [r7, #16]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	371c      	adds	r7, #28
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	007a1200 	.word	0x007a1200
 8002c14:	08004778 	.word	0x08004778
 8002c18:	08004788 	.word	0x08004788
 8002c1c:	003d0900 	.word	0x003d0900

08002c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c24:	4b02      	ldr	r3, [pc, #8]	@ (8002c30 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	20000000 	.word	0x20000000

08002c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c38:	f7ff fff2 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b05      	ldr	r3, [pc, #20]	@ (8002c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	0adb      	lsrs	r3, r3, #11
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4903      	ldr	r1, [pc, #12]	@ (8002c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40021000 	.word	0x40021000
 8002c58:	08004770 	.word	0x08004770

08002c5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c64:	4b0a      	ldr	r3, [pc, #40]	@ (8002c90 <RCC_Delay+0x34>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a0a      	ldr	r2, [pc, #40]	@ (8002c94 <RCC_Delay+0x38>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	0a5b      	lsrs	r3, r3, #9
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c78:	bf00      	nop
  }
  while (Delay --);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1e5a      	subs	r2, r3, #1
 8002c7e:	60fa      	str	r2, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f9      	bne.n	8002c78 <RCC_Delay+0x1c>
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	20000000 	.word	0x20000000
 8002c94:	10624dd3 	.word	0x10624dd3

08002c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d07d      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb8:	4b4f      	ldr	r3, [pc, #316]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10d      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc4:	4b4c      	ldr	r3, [pc, #304]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	4a4b      	ldr	r2, [pc, #300]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cce:	61d3      	str	r3, [r2, #28]
 8002cd0:	4b49      	ldr	r3, [pc, #292]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce0:	4b46      	ldr	r3, [pc, #280]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d118      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cec:	4b43      	ldr	r3, [pc, #268]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a42      	ldr	r2, [pc, #264]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf8:	f7fe fcde 	bl	80016b8 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfe:	e008      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d00:	f7fe fcda 	bl	80016b8 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	@ 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e06d      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d12:	4b3a      	ldr	r3, [pc, #232]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d1e:	4b36      	ldr	r3, [pc, #216]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d02e      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d027      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d46:	4b2e      	ldr	r3, [pc, #184]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d52:	4a29      	ldr	r2, [pc, #164]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d014      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d62:	f7fe fca9 	bl	80016b8 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fe fca5 	bl	80016b8 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e036      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d80:	4b1d      	ldr	r3, [pc, #116]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ee      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4917      	ldr	r1, [pc, #92]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d9e:	7dfb      	ldrb	r3, [r7, #23]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d105      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da4:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	4a13      	ldr	r2, [pc, #76]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002daa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	490b      	ldr	r1, [pc, #44]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dda:	4b07      	ldr	r3, [pc, #28]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	4904      	ldr	r1, [pc, #16]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40007000 	.word	0x40007000
 8002e00:	42420440 	.word	0x42420440

08002e04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	2300      	movs	r3, #0
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b10      	cmp	r3, #16
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	f200 808a 	bhi.w	8002f42 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d045      	beq.n	8002ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d075      	beq.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e3a:	e082      	b.n	8002f42 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002e3c:	4b46      	ldr	r3, [pc, #280]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e42:	4b45      	ldr	r3, [pc, #276]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d07b      	beq.n	8002f46 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	0c9b      	lsrs	r3, r3, #18
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	4a41      	ldr	r2, [pc, #260]	@ (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002e58:	5cd3      	ldrb	r3, [r2, r3]
 8002e5a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d015      	beq.n	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e66:	4b3c      	ldr	r3, [pc, #240]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	0c5b      	lsrs	r3, r3, #17
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	4a3b      	ldr	r2, [pc, #236]	@ (8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002e72:	5cd3      	ldrb	r3, [r2, r3]
 8002e74:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00d      	beq.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e80:	4a38      	ldr	r2, [pc, #224]	@ (8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	e004      	b.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4a34      	ldr	r2, [pc, #208]	@ (8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002e96:	fb02 f303 	mul.w	r3, r2, r3
 8002e9a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ea8:	d102      	bne.n	8002eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	61bb      	str	r3, [r7, #24]
      break;
 8002eae:	e04a      	b.n	8002f46 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	085b      	lsrs	r3, r3, #1
 8002ebc:	61bb      	str	r3, [r7, #24]
      break;
 8002ebe:	e042      	b.n	8002f46 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002ec0:	4b25      	ldr	r3, [pc, #148]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ed0:	d108      	bne.n	8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002edc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	e01f      	b.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eee:	d109      	bne.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002ef0:	4b19      	ldr	r3, [pc, #100]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002efc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	e00f      	b.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f0e:	d11c      	bne.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f10:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d016      	beq.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002f1c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002f20:	61bb      	str	r3, [r7, #24]
      break;
 8002f22:	e012      	b.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f24:	e011      	b.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f26:	f7ff fe85 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	0b9b      	lsrs	r3, r3, #14
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	3301      	adds	r3, #1
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3e:	61bb      	str	r3, [r7, #24]
      break;
 8002f40:	e004      	b.n	8002f4c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f42:	bf00      	nop
 8002f44:	e002      	b.n	8002f4c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f4a:	bf00      	nop
    }
  }
  return (frequency);
 8002f4c:	69bb      	ldr	r3, [r7, #24]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	0800478c 	.word	0x0800478c
 8002f60:	0800479c 	.word	0x0800479c
 8002f64:	007a1200 	.word	0x007a1200
 8002f68:	003d0900 	.word	0x003d0900
 8002f6c:	aaaaaaab 	.word	0xaaaaaaab

08002f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e041      	b.n	8003006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fe fab0 	bl	80014fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f000 fa5c 	bl	800346c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d001      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e03a      	b.n	800309e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a18      	ldr	r2, [pc, #96]	@ (80030a8 <HAL_TIM_Base_Start_IT+0x98>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00e      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0x58>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003052:	d009      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0x58>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a14      	ldr	r2, [pc, #80]	@ (80030ac <HAL_TIM_Base_Start_IT+0x9c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d004      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0x58>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a13      	ldr	r2, [pc, #76]	@ (80030b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d111      	bne.n	800308c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b06      	cmp	r3, #6
 8003078:	d010      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308a:	e007      	b.n	800309c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr
 80030a8:	40012c00 	.word	0x40012c00
 80030ac:	40000400 	.word	0x40000400
 80030b0:	40000800 	.word	0x40000800

080030b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d020      	beq.n	8003118 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01b      	beq.n	8003118 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0202 	mvn.w	r2, #2
 80030e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f998 	bl	8003434 <HAL_TIM_IC_CaptureCallback>
 8003104:	e005      	b.n	8003112 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f98b 	bl	8003422 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f99a 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	d020      	beq.n	8003164 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01b      	beq.n	8003164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0204 	mvn.w	r2, #4
 8003134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f972 	bl	8003434 <HAL_TIM_IC_CaptureCallback>
 8003150:	e005      	b.n	800315e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f965 	bl	8003422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f974 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d020      	beq.n	80031b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01b      	beq.n	80031b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0208 	mvn.w	r2, #8
 8003180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2204      	movs	r2, #4
 8003186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f94c 	bl	8003434 <HAL_TIM_IC_CaptureCallback>
 800319c:	e005      	b.n	80031aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f93f 	bl	8003422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f94e 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d020      	beq.n	80031fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01b      	beq.n	80031fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0210 	mvn.w	r2, #16
 80031cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2208      	movs	r2, #8
 80031d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f926 	bl	8003434 <HAL_TIM_IC_CaptureCallback>
 80031e8:	e005      	b.n	80031f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f919 	bl	8003422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f928 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00c      	beq.n	8003220 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0201 	mvn.w	r2, #1
 8003218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd ffb8 	bl	8001190 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800323c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fa7f 	bl	8003742 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00c      	beq.n	8003268 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d007      	beq.n	8003268 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f8f8 	bl	8003458 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00c      	beq.n	800328c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0220 	mvn.w	r2, #32
 8003284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fa52 	bl	8003730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_TIM_ConfigClockSource+0x1c>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e0b4      	b.n	800341a <HAL_TIM_ConfigClockSource+0x186>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80032ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032e8:	d03e      	beq.n	8003368 <HAL_TIM_ConfigClockSource+0xd4>
 80032ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032ee:	f200 8087 	bhi.w	8003400 <HAL_TIM_ConfigClockSource+0x16c>
 80032f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032f6:	f000 8086 	beq.w	8003406 <HAL_TIM_ConfigClockSource+0x172>
 80032fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032fe:	d87f      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x16c>
 8003300:	2b70      	cmp	r3, #112	@ 0x70
 8003302:	d01a      	beq.n	800333a <HAL_TIM_ConfigClockSource+0xa6>
 8003304:	2b70      	cmp	r3, #112	@ 0x70
 8003306:	d87b      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x16c>
 8003308:	2b60      	cmp	r3, #96	@ 0x60
 800330a:	d050      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0x11a>
 800330c:	2b60      	cmp	r3, #96	@ 0x60
 800330e:	d877      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x16c>
 8003310:	2b50      	cmp	r3, #80	@ 0x50
 8003312:	d03c      	beq.n	800338e <HAL_TIM_ConfigClockSource+0xfa>
 8003314:	2b50      	cmp	r3, #80	@ 0x50
 8003316:	d873      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x16c>
 8003318:	2b40      	cmp	r3, #64	@ 0x40
 800331a:	d058      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x13a>
 800331c:	2b40      	cmp	r3, #64	@ 0x40
 800331e:	d86f      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x16c>
 8003320:	2b30      	cmp	r3, #48	@ 0x30
 8003322:	d064      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x15a>
 8003324:	2b30      	cmp	r3, #48	@ 0x30
 8003326:	d86b      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x16c>
 8003328:	2b20      	cmp	r3, #32
 800332a:	d060      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x15a>
 800332c:	2b20      	cmp	r3, #32
 800332e:	d867      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x16c>
 8003330:	2b00      	cmp	r3, #0
 8003332:	d05c      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x15a>
 8003334:	2b10      	cmp	r3, #16
 8003336:	d05a      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x15a>
 8003338:	e062      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800334a:	f000 f974 	bl	8003636 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800335c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	609a      	str	r2, [r3, #8]
      break;
 8003366:	e04f      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003378:	f000 f95d 	bl	8003636 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800338a:	609a      	str	r2, [r3, #8]
      break;
 800338c:	e03c      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800339a:	461a      	mov	r2, r3
 800339c:	f000 f8d4 	bl	8003548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2150      	movs	r1, #80	@ 0x50
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f92b 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 80033ac:	e02c      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ba:	461a      	mov	r2, r3
 80033bc:	f000 f8f2 	bl	80035a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2160      	movs	r1, #96	@ 0x60
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f91b 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 80033cc:	e01c      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033da:	461a      	mov	r2, r3
 80033dc:	f000 f8b4 	bl	8003548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2140      	movs	r1, #64	@ 0x40
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f90b 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 80033ec:	e00c      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4619      	mov	r1, r3
 80033f8:	4610      	mov	r0, r2
 80033fa:	f000 f902 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 80033fe:	e003      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      break;
 8003404:	e000      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003418:	7bfb      	ldrb	r3, [r7, #15]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr
	...

0800346c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a2f      	ldr	r2, [pc, #188]	@ (800353c <TIM_Base_SetConfig+0xd0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00b      	beq.n	800349c <TIM_Base_SetConfig+0x30>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800348a:	d007      	beq.n	800349c <TIM_Base_SetConfig+0x30>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a2c      	ldr	r2, [pc, #176]	@ (8003540 <TIM_Base_SetConfig+0xd4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d003      	beq.n	800349c <TIM_Base_SetConfig+0x30>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a2b      	ldr	r2, [pc, #172]	@ (8003544 <TIM_Base_SetConfig+0xd8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d108      	bne.n	80034ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a22      	ldr	r2, [pc, #136]	@ (800353c <TIM_Base_SetConfig+0xd0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00b      	beq.n	80034ce <TIM_Base_SetConfig+0x62>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034bc:	d007      	beq.n	80034ce <TIM_Base_SetConfig+0x62>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003540 <TIM_Base_SetConfig+0xd4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d003      	beq.n	80034ce <TIM_Base_SetConfig+0x62>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003544 <TIM_Base_SetConfig+0xd8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d108      	bne.n	80034e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a0d      	ldr	r2, [pc, #52]	@ (800353c <TIM_Base_SetConfig+0xd0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d103      	bne.n	8003514 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f023 0201 	bic.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	611a      	str	r2, [r3, #16]
  }
}
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800

08003548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f023 0201 	bic.w	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 030a 	bic.w	r3, r3, #10
 8003584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	621a      	str	r2, [r3, #32]
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f023 0210 	bic.w	r2, r3, #16
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	031b      	lsls	r3, r3, #12
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	621a      	str	r2, [r3, #32]
}
 80035f8:	bf00      	nop
 80035fa:	371c      	adds	r7, #28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr

08003602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003602:	b480      	push	{r7}
 8003604:	b085      	sub	sp, #20
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	f043 0307 	orr.w	r3, r3, #7
 8003624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003636:	b480      	push	{r7}
 8003638:	b087      	sub	sp, #28
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003650:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	021a      	lsls	r2, r3, #8
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	431a      	orrs	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4313      	orrs	r3, r2
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	609a      	str	r2, [r3, #8]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003688:	2302      	movs	r3, #2
 800368a:	e046      	b.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a16      	ldr	r2, [pc, #88]	@ (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00e      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d8:	d009      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a12      	ldr	r2, [pc, #72]	@ (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d004      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a10      	ldr	r2, [pc, #64]	@ (800372c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d10c      	bne.n	8003708 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800

08003730 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <memset>:
 8003754:	4603      	mov	r3, r0
 8003756:	4402      	add	r2, r0
 8003758:	4293      	cmp	r3, r2
 800375a:	d100      	bne.n	800375e <memset+0xa>
 800375c:	4770      	bx	lr
 800375e:	f803 1b01 	strb.w	r1, [r3], #1
 8003762:	e7f9      	b.n	8003758 <memset+0x4>

08003764 <__libc_init_array>:
 8003764:	b570      	push	{r4, r5, r6, lr}
 8003766:	2600      	movs	r6, #0
 8003768:	4d0c      	ldr	r5, [pc, #48]	@ (800379c <__libc_init_array+0x38>)
 800376a:	4c0d      	ldr	r4, [pc, #52]	@ (80037a0 <__libc_init_array+0x3c>)
 800376c:	1b64      	subs	r4, r4, r5
 800376e:	10a4      	asrs	r4, r4, #2
 8003770:	42a6      	cmp	r6, r4
 8003772:	d109      	bne.n	8003788 <__libc_init_array+0x24>
 8003774:	f000 ffe8 	bl	8004748 <_init>
 8003778:	2600      	movs	r6, #0
 800377a:	4d0a      	ldr	r5, [pc, #40]	@ (80037a4 <__libc_init_array+0x40>)
 800377c:	4c0a      	ldr	r4, [pc, #40]	@ (80037a8 <__libc_init_array+0x44>)
 800377e:	1b64      	subs	r4, r4, r5
 8003780:	10a4      	asrs	r4, r4, #2
 8003782:	42a6      	cmp	r6, r4
 8003784:	d105      	bne.n	8003792 <__libc_init_array+0x2e>
 8003786:	bd70      	pop	{r4, r5, r6, pc}
 8003788:	f855 3b04 	ldr.w	r3, [r5], #4
 800378c:	4798      	blx	r3
 800378e:	3601      	adds	r6, #1
 8003790:	e7ee      	b.n	8003770 <__libc_init_array+0xc>
 8003792:	f855 3b04 	ldr.w	r3, [r5], #4
 8003796:	4798      	blx	r3
 8003798:	3601      	adds	r6, #1
 800379a:	e7f2      	b.n	8003782 <__libc_init_array+0x1e>
 800379c:	08004978 	.word	0x08004978
 80037a0:	08004978 	.word	0x08004978
 80037a4:	08004978 	.word	0x08004978
 80037a8:	0800497c 	.word	0x0800497c

080037ac <sin>:
 80037ac:	b530      	push	{r4, r5, lr}
 80037ae:	4d20      	ldr	r5, [pc, #128]	@ (8003830 <sin+0x84>)
 80037b0:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80037b4:	42ac      	cmp	r4, r5
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	b087      	sub	sp, #28
 80037bc:	d806      	bhi.n	80037cc <sin+0x20>
 80037be:	2300      	movs	r3, #0
 80037c0:	2200      	movs	r2, #0
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	2300      	movs	r3, #0
 80037c6:	f000 f8f7 	bl	80039b8 <__kernel_sin>
 80037ca:	e004      	b.n	80037d6 <sin+0x2a>
 80037cc:	4d19      	ldr	r5, [pc, #100]	@ (8003834 <sin+0x88>)
 80037ce:	42ac      	cmp	r4, r5
 80037d0:	d903      	bls.n	80037da <sin+0x2e>
 80037d2:	f7fc fd75 	bl	80002c0 <__aeabi_dsub>
 80037d6:	b007      	add	sp, #28
 80037d8:	bd30      	pop	{r4, r5, pc}
 80037da:	aa02      	add	r2, sp, #8
 80037dc:	f000 f9a4 	bl	8003b28 <__ieee754_rem_pio2>
 80037e0:	f000 0003 	and.w	r0, r0, #3
 80037e4:	2801      	cmp	r0, #1
 80037e6:	d009      	beq.n	80037fc <sin+0x50>
 80037e8:	2802      	cmp	r0, #2
 80037ea:	d00e      	beq.n	800380a <sin+0x5e>
 80037ec:	b9c0      	cbnz	r0, 8003820 <sin+0x74>
 80037ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037f2:	2301      	movs	r3, #1
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80037fa:	e7e4      	b.n	80037c6 <sin+0x1a>
 80037fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003804:	f000 f818 	bl	8003838 <__kernel_cos>
 8003808:	e7e5      	b.n	80037d6 <sin+0x2a>
 800380a:	2301      	movs	r3, #1
 800380c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003816:	f000 f8cf 	bl	80039b8 <__kernel_sin>
 800381a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800381e:	e7da      	b.n	80037d6 <sin+0x2a>
 8003820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003828:	f000 f806 	bl	8003838 <__kernel_cos>
 800382c:	e7f5      	b.n	800381a <sin+0x6e>
 800382e:	bf00      	nop
 8003830:	3fe921fb 	.word	0x3fe921fb
 8003834:	7fefffff 	.word	0x7fefffff

08003838 <__kernel_cos>:
 8003838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800383c:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8003840:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8003844:	4680      	mov	r8, r0
 8003846:	4689      	mov	r9, r1
 8003848:	e9cd 2300 	strd	r2, r3, [sp]
 800384c:	d204      	bcs.n	8003858 <__kernel_cos+0x20>
 800384e:	f7fd f989 	bl	8000b64 <__aeabi_d2iz>
 8003852:	2800      	cmp	r0, #0
 8003854:	f000 8086 	beq.w	8003964 <__kernel_cos+0x12c>
 8003858:	4642      	mov	r2, r8
 800385a:	464b      	mov	r3, r9
 800385c:	4640      	mov	r0, r8
 800385e:	4649      	mov	r1, r9
 8003860:	f7fc fee6 	bl	8000630 <__aeabi_dmul>
 8003864:	2200      	movs	r2, #0
 8003866:	4b4e      	ldr	r3, [pc, #312]	@ (80039a0 <__kernel_cos+0x168>)
 8003868:	4604      	mov	r4, r0
 800386a:	460d      	mov	r5, r1
 800386c:	f7fc fee0 	bl	8000630 <__aeabi_dmul>
 8003870:	a33f      	add	r3, pc, #252	@ (adr r3, 8003970 <__kernel_cos+0x138>)
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	4682      	mov	sl, r0
 8003878:	468b      	mov	fp, r1
 800387a:	4620      	mov	r0, r4
 800387c:	4629      	mov	r1, r5
 800387e:	f7fc fed7 	bl	8000630 <__aeabi_dmul>
 8003882:	a33d      	add	r3, pc, #244	@ (adr r3, 8003978 <__kernel_cos+0x140>)
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	f7fc fd1c 	bl	80002c4 <__adddf3>
 800388c:	4622      	mov	r2, r4
 800388e:	462b      	mov	r3, r5
 8003890:	f7fc fece 	bl	8000630 <__aeabi_dmul>
 8003894:	a33a      	add	r3, pc, #232	@ (adr r3, 8003980 <__kernel_cos+0x148>)
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f7fc fd11 	bl	80002c0 <__aeabi_dsub>
 800389e:	4622      	mov	r2, r4
 80038a0:	462b      	mov	r3, r5
 80038a2:	f7fc fec5 	bl	8000630 <__aeabi_dmul>
 80038a6:	a338      	add	r3, pc, #224	@ (adr r3, 8003988 <__kernel_cos+0x150>)
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f7fc fd0a 	bl	80002c4 <__adddf3>
 80038b0:	4622      	mov	r2, r4
 80038b2:	462b      	mov	r3, r5
 80038b4:	f7fc febc 	bl	8000630 <__aeabi_dmul>
 80038b8:	a335      	add	r3, pc, #212	@ (adr r3, 8003990 <__kernel_cos+0x158>)
 80038ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038be:	f7fc fcff 	bl	80002c0 <__aeabi_dsub>
 80038c2:	4622      	mov	r2, r4
 80038c4:	462b      	mov	r3, r5
 80038c6:	f7fc feb3 	bl	8000630 <__aeabi_dmul>
 80038ca:	a333      	add	r3, pc, #204	@ (adr r3, 8003998 <__kernel_cos+0x160>)
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f7fc fcf8 	bl	80002c4 <__adddf3>
 80038d4:	4622      	mov	r2, r4
 80038d6:	462b      	mov	r3, r5
 80038d8:	f7fc feaa 	bl	8000630 <__aeabi_dmul>
 80038dc:	4622      	mov	r2, r4
 80038de:	462b      	mov	r3, r5
 80038e0:	f7fc fea6 	bl	8000630 <__aeabi_dmul>
 80038e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038e8:	4604      	mov	r4, r0
 80038ea:	460d      	mov	r5, r1
 80038ec:	4640      	mov	r0, r8
 80038ee:	4649      	mov	r1, r9
 80038f0:	f7fc fe9e 	bl	8000630 <__aeabi_dmul>
 80038f4:	460b      	mov	r3, r1
 80038f6:	4602      	mov	r2, r0
 80038f8:	4629      	mov	r1, r5
 80038fa:	4620      	mov	r0, r4
 80038fc:	f7fc fce0 	bl	80002c0 <__aeabi_dsub>
 8003900:	4b28      	ldr	r3, [pc, #160]	@ (80039a4 <__kernel_cos+0x16c>)
 8003902:	4680      	mov	r8, r0
 8003904:	429e      	cmp	r6, r3
 8003906:	4689      	mov	r9, r1
 8003908:	d80e      	bhi.n	8003928 <__kernel_cos+0xf0>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4650      	mov	r0, sl
 8003910:	4659      	mov	r1, fp
 8003912:	f7fc fcd5 	bl	80002c0 <__aeabi_dsub>
 8003916:	4602      	mov	r2, r0
 8003918:	2000      	movs	r0, #0
 800391a:	460b      	mov	r3, r1
 800391c:	4922      	ldr	r1, [pc, #136]	@ (80039a8 <__kernel_cos+0x170>)
 800391e:	f7fc fccf 	bl	80002c0 <__aeabi_dsub>
 8003922:	b003      	add	sp, #12
 8003924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003928:	2400      	movs	r4, #0
 800392a:	4b20      	ldr	r3, [pc, #128]	@ (80039ac <__kernel_cos+0x174>)
 800392c:	4622      	mov	r2, r4
 800392e:	429e      	cmp	r6, r3
 8003930:	bf8c      	ite	hi
 8003932:	4d1f      	ldrhi	r5, [pc, #124]	@ (80039b0 <__kernel_cos+0x178>)
 8003934:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8003938:	462b      	mov	r3, r5
 800393a:	2000      	movs	r0, #0
 800393c:	491a      	ldr	r1, [pc, #104]	@ (80039a8 <__kernel_cos+0x170>)
 800393e:	f7fc fcbf 	bl	80002c0 <__aeabi_dsub>
 8003942:	4622      	mov	r2, r4
 8003944:	4606      	mov	r6, r0
 8003946:	460f      	mov	r7, r1
 8003948:	462b      	mov	r3, r5
 800394a:	4650      	mov	r0, sl
 800394c:	4659      	mov	r1, fp
 800394e:	f7fc fcb7 	bl	80002c0 <__aeabi_dsub>
 8003952:	4642      	mov	r2, r8
 8003954:	464b      	mov	r3, r9
 8003956:	f7fc fcb3 	bl	80002c0 <__aeabi_dsub>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4630      	mov	r0, r6
 8003960:	4639      	mov	r1, r7
 8003962:	e7dc      	b.n	800391e <__kernel_cos+0xe6>
 8003964:	2000      	movs	r0, #0
 8003966:	4910      	ldr	r1, [pc, #64]	@ (80039a8 <__kernel_cos+0x170>)
 8003968:	e7db      	b.n	8003922 <__kernel_cos+0xea>
 800396a:	bf00      	nop
 800396c:	f3af 8000 	nop.w
 8003970:	be8838d4 	.word	0xbe8838d4
 8003974:	bda8fae9 	.word	0xbda8fae9
 8003978:	bdb4b1c4 	.word	0xbdb4b1c4
 800397c:	3e21ee9e 	.word	0x3e21ee9e
 8003980:	809c52ad 	.word	0x809c52ad
 8003984:	3e927e4f 	.word	0x3e927e4f
 8003988:	19cb1590 	.word	0x19cb1590
 800398c:	3efa01a0 	.word	0x3efa01a0
 8003990:	16c15177 	.word	0x16c15177
 8003994:	3f56c16c 	.word	0x3f56c16c
 8003998:	5555554c 	.word	0x5555554c
 800399c:	3fa55555 	.word	0x3fa55555
 80039a0:	3fe00000 	.word	0x3fe00000
 80039a4:	3fd33332 	.word	0x3fd33332
 80039a8:	3ff00000 	.word	0x3ff00000
 80039ac:	3fe90000 	.word	0x3fe90000
 80039b0:	3fd20000 	.word	0x3fd20000
 80039b4:	00000000 	.word	0x00000000

080039b8 <__kernel_sin>:
 80039b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039bc:	461f      	mov	r7, r3
 80039be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80039c2:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80039c6:	4604      	mov	r4, r0
 80039c8:	460d      	mov	r5, r1
 80039ca:	4616      	mov	r6, r2
 80039cc:	b085      	sub	sp, #20
 80039ce:	d203      	bcs.n	80039d8 <__kernel_sin+0x20>
 80039d0:	f7fd f8c8 	bl	8000b64 <__aeabi_d2iz>
 80039d4:	2800      	cmp	r0, #0
 80039d6:	d051      	beq.n	8003a7c <__kernel_sin+0xc4>
 80039d8:	4622      	mov	r2, r4
 80039da:	462b      	mov	r3, r5
 80039dc:	4620      	mov	r0, r4
 80039de:	4629      	mov	r1, r5
 80039e0:	f7fc fe26 	bl	8000630 <__aeabi_dmul>
 80039e4:	4682      	mov	sl, r0
 80039e6:	468b      	mov	fp, r1
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4620      	mov	r0, r4
 80039ee:	4629      	mov	r1, r5
 80039f0:	f7fc fe1e 	bl	8000630 <__aeabi_dmul>
 80039f4:	a33e      	add	r3, pc, #248	@ (adr r3, 8003af0 <__kernel_sin+0x138>)
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	4680      	mov	r8, r0
 80039fc:	4689      	mov	r9, r1
 80039fe:	4650      	mov	r0, sl
 8003a00:	4659      	mov	r1, fp
 8003a02:	f7fc fe15 	bl	8000630 <__aeabi_dmul>
 8003a06:	a33c      	add	r3, pc, #240	@ (adr r3, 8003af8 <__kernel_sin+0x140>)
 8003a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0c:	f7fc fc58 	bl	80002c0 <__aeabi_dsub>
 8003a10:	4652      	mov	r2, sl
 8003a12:	465b      	mov	r3, fp
 8003a14:	f7fc fe0c 	bl	8000630 <__aeabi_dmul>
 8003a18:	a339      	add	r3, pc, #228	@ (adr r3, 8003b00 <__kernel_sin+0x148>)
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f7fc fc51 	bl	80002c4 <__adddf3>
 8003a22:	4652      	mov	r2, sl
 8003a24:	465b      	mov	r3, fp
 8003a26:	f7fc fe03 	bl	8000630 <__aeabi_dmul>
 8003a2a:	a337      	add	r3, pc, #220	@ (adr r3, 8003b08 <__kernel_sin+0x150>)
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f7fc fc46 	bl	80002c0 <__aeabi_dsub>
 8003a34:	4652      	mov	r2, sl
 8003a36:	465b      	mov	r3, fp
 8003a38:	f7fc fdfa 	bl	8000630 <__aeabi_dmul>
 8003a3c:	a334      	add	r3, pc, #208	@ (adr r3, 8003b10 <__kernel_sin+0x158>)
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	f7fc fc3f 	bl	80002c4 <__adddf3>
 8003a46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003a48:	e9cd 0100 	strd	r0, r1, [sp]
 8003a4c:	b9db      	cbnz	r3, 8003a86 <__kernel_sin+0xce>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4650      	mov	r0, sl
 8003a54:	4659      	mov	r1, fp
 8003a56:	f7fc fdeb 	bl	8000630 <__aeabi_dmul>
 8003a5a:	a32f      	add	r3, pc, #188	@ (adr r3, 8003b18 <__kernel_sin+0x160>)
 8003a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a60:	f7fc fc2e 	bl	80002c0 <__aeabi_dsub>
 8003a64:	4642      	mov	r2, r8
 8003a66:	464b      	mov	r3, r9
 8003a68:	f7fc fde2 	bl	8000630 <__aeabi_dmul>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4620      	mov	r0, r4
 8003a72:	4629      	mov	r1, r5
 8003a74:	f7fc fc26 	bl	80002c4 <__adddf3>
 8003a78:	4604      	mov	r4, r0
 8003a7a:	460d      	mov	r5, r1
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	4629      	mov	r1, r5
 8003a80:	b005      	add	sp, #20
 8003a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a86:	2200      	movs	r2, #0
 8003a88:	4630      	mov	r0, r6
 8003a8a:	4639      	mov	r1, r7
 8003a8c:	4b24      	ldr	r3, [pc, #144]	@ (8003b20 <__kernel_sin+0x168>)
 8003a8e:	f7fc fdcf 	bl	8000630 <__aeabi_dmul>
 8003a92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a9a:	4640      	mov	r0, r8
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	f7fc fdc7 	bl	8000630 <__aeabi_dmul>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003aaa:	f7fc fc09 	bl	80002c0 <__aeabi_dsub>
 8003aae:	4652      	mov	r2, sl
 8003ab0:	465b      	mov	r3, fp
 8003ab2:	f7fc fdbd 	bl	8000630 <__aeabi_dmul>
 8003ab6:	4632      	mov	r2, r6
 8003ab8:	463b      	mov	r3, r7
 8003aba:	f7fc fc01 	bl	80002c0 <__aeabi_dsub>
 8003abe:	a316      	add	r3, pc, #88	@ (adr r3, 8003b18 <__kernel_sin+0x160>)
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	4606      	mov	r6, r0
 8003ac6:	460f      	mov	r7, r1
 8003ac8:	4640      	mov	r0, r8
 8003aca:	4649      	mov	r1, r9
 8003acc:	f7fc fdb0 	bl	8000630 <__aeabi_dmul>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4630      	mov	r0, r6
 8003ad6:	4639      	mov	r1, r7
 8003ad8:	f7fc fbf4 	bl	80002c4 <__adddf3>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	f7fc fbec 	bl	80002c0 <__aeabi_dsub>
 8003ae8:	e7c6      	b.n	8003a78 <__kernel_sin+0xc0>
 8003aea:	bf00      	nop
 8003aec:	f3af 8000 	nop.w
 8003af0:	5acfd57c 	.word	0x5acfd57c
 8003af4:	3de5d93a 	.word	0x3de5d93a
 8003af8:	8a2b9ceb 	.word	0x8a2b9ceb
 8003afc:	3e5ae5e6 	.word	0x3e5ae5e6
 8003b00:	57b1fe7d 	.word	0x57b1fe7d
 8003b04:	3ec71de3 	.word	0x3ec71de3
 8003b08:	19c161d5 	.word	0x19c161d5
 8003b0c:	3f2a01a0 	.word	0x3f2a01a0
 8003b10:	1110f8a6 	.word	0x1110f8a6
 8003b14:	3f811111 	.word	0x3f811111
 8003b18:	55555549 	.word	0x55555549
 8003b1c:	3fc55555 	.word	0x3fc55555
 8003b20:	3fe00000 	.word	0x3fe00000
 8003b24:	00000000 	.word	0x00000000

08003b28 <__ieee754_rem_pio2>:
 8003b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b2c:	4bc4      	ldr	r3, [pc, #784]	@ (8003e40 <__ieee754_rem_pio2+0x318>)
 8003b2e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8003b32:	b08d      	sub	sp, #52	@ 0x34
 8003b34:	4598      	cmp	r8, r3
 8003b36:	4606      	mov	r6, r0
 8003b38:	460f      	mov	r7, r1
 8003b3a:	4614      	mov	r4, r2
 8003b3c:	9104      	str	r1, [sp, #16]
 8003b3e:	d807      	bhi.n	8003b50 <__ieee754_rem_pio2+0x28>
 8003b40:	e9c2 6700 	strd	r6, r7, [r2]
 8003b44:	2300      	movs	r3, #0
 8003b46:	2200      	movs	r2, #0
 8003b48:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003b4c:	2500      	movs	r5, #0
 8003b4e:	e026      	b.n	8003b9e <__ieee754_rem_pio2+0x76>
 8003b50:	4bbc      	ldr	r3, [pc, #752]	@ (8003e44 <__ieee754_rem_pio2+0x31c>)
 8003b52:	4598      	cmp	r8, r3
 8003b54:	d876      	bhi.n	8003c44 <__ieee754_rem_pio2+0x11c>
 8003b56:	9b04      	ldr	r3, [sp, #16]
 8003b58:	4dbb      	ldr	r5, [pc, #748]	@ (8003e48 <__ieee754_rem_pio2+0x320>)
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	a3aa      	add	r3, pc, #680	@ (adr r3, 8003e08 <__ieee754_rem_pio2+0x2e0>)
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	dd38      	ble.n	8003bd6 <__ieee754_rem_pio2+0xae>
 8003b64:	f7fc fbac 	bl	80002c0 <__aeabi_dsub>
 8003b68:	45a8      	cmp	r8, r5
 8003b6a:	4606      	mov	r6, r0
 8003b6c:	460f      	mov	r7, r1
 8003b6e:	d01a      	beq.n	8003ba6 <__ieee754_rem_pio2+0x7e>
 8003b70:	a3a7      	add	r3, pc, #668	@ (adr r3, 8003e10 <__ieee754_rem_pio2+0x2e8>)
 8003b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b76:	f7fc fba3 	bl	80002c0 <__aeabi_dsub>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4680      	mov	r8, r0
 8003b80:	4689      	mov	r9, r1
 8003b82:	4630      	mov	r0, r6
 8003b84:	4639      	mov	r1, r7
 8003b86:	f7fc fb9b 	bl	80002c0 <__aeabi_dsub>
 8003b8a:	a3a1      	add	r3, pc, #644	@ (adr r3, 8003e10 <__ieee754_rem_pio2+0x2e8>)
 8003b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b90:	f7fc fb96 	bl	80002c0 <__aeabi_dsub>
 8003b94:	2501      	movs	r5, #1
 8003b96:	e9c4 8900 	strd	r8, r9, [r4]
 8003b9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	b00d      	add	sp, #52	@ 0x34
 8003ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba6:	a39c      	add	r3, pc, #624	@ (adr r3, 8003e18 <__ieee754_rem_pio2+0x2f0>)
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f7fc fb88 	bl	80002c0 <__aeabi_dsub>
 8003bb0:	a39b      	add	r3, pc, #620	@ (adr r3, 8003e20 <__ieee754_rem_pio2+0x2f8>)
 8003bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	460f      	mov	r7, r1
 8003bba:	f7fc fb81 	bl	80002c0 <__aeabi_dsub>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4680      	mov	r8, r0
 8003bc4:	4689      	mov	r9, r1
 8003bc6:	4630      	mov	r0, r6
 8003bc8:	4639      	mov	r1, r7
 8003bca:	f7fc fb79 	bl	80002c0 <__aeabi_dsub>
 8003bce:	a394      	add	r3, pc, #592	@ (adr r3, 8003e20 <__ieee754_rem_pio2+0x2f8>)
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	e7dc      	b.n	8003b90 <__ieee754_rem_pio2+0x68>
 8003bd6:	f7fc fb75 	bl	80002c4 <__adddf3>
 8003bda:	45a8      	cmp	r8, r5
 8003bdc:	4606      	mov	r6, r0
 8003bde:	460f      	mov	r7, r1
 8003be0:	d018      	beq.n	8003c14 <__ieee754_rem_pio2+0xec>
 8003be2:	a38b      	add	r3, pc, #556	@ (adr r3, 8003e10 <__ieee754_rem_pio2+0x2e8>)
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	f7fc fb6c 	bl	80002c4 <__adddf3>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4680      	mov	r8, r0
 8003bf2:	4689      	mov	r9, r1
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	4639      	mov	r1, r7
 8003bf8:	f7fc fb62 	bl	80002c0 <__aeabi_dsub>
 8003bfc:	a384      	add	r3, pc, #528	@ (adr r3, 8003e10 <__ieee754_rem_pio2+0x2e8>)
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	f7fc fb5f 	bl	80002c4 <__adddf3>
 8003c06:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003c0a:	e9c4 8900 	strd	r8, r9, [r4]
 8003c0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003c12:	e7c4      	b.n	8003b9e <__ieee754_rem_pio2+0x76>
 8003c14:	a380      	add	r3, pc, #512	@ (adr r3, 8003e18 <__ieee754_rem_pio2+0x2f0>)
 8003c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1a:	f7fc fb53 	bl	80002c4 <__adddf3>
 8003c1e:	a380      	add	r3, pc, #512	@ (adr r3, 8003e20 <__ieee754_rem_pio2+0x2f8>)
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	4606      	mov	r6, r0
 8003c26:	460f      	mov	r7, r1
 8003c28:	f7fc fb4c 	bl	80002c4 <__adddf3>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4680      	mov	r8, r0
 8003c32:	4689      	mov	r9, r1
 8003c34:	4630      	mov	r0, r6
 8003c36:	4639      	mov	r1, r7
 8003c38:	f7fc fb42 	bl	80002c0 <__aeabi_dsub>
 8003c3c:	a378      	add	r3, pc, #480	@ (adr r3, 8003e20 <__ieee754_rem_pio2+0x2f8>)
 8003c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c42:	e7de      	b.n	8003c02 <__ieee754_rem_pio2+0xda>
 8003c44:	4b81      	ldr	r3, [pc, #516]	@ (8003e4c <__ieee754_rem_pio2+0x324>)
 8003c46:	4598      	cmp	r8, r3
 8003c48:	f200 80cf 	bhi.w	8003dea <__ieee754_rem_pio2+0x2c2>
 8003c4c:	f000 f962 	bl	8003f14 <fabs>
 8003c50:	a375      	add	r3, pc, #468	@ (adr r3, 8003e28 <__ieee754_rem_pio2+0x300>)
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	4606      	mov	r6, r0
 8003c58:	460f      	mov	r7, r1
 8003c5a:	f7fc fce9 	bl	8000630 <__aeabi_dmul>
 8003c5e:	2200      	movs	r2, #0
 8003c60:	4b7b      	ldr	r3, [pc, #492]	@ (8003e50 <__ieee754_rem_pio2+0x328>)
 8003c62:	f7fc fb2f 	bl	80002c4 <__adddf3>
 8003c66:	f7fc ff7d 	bl	8000b64 <__aeabi_d2iz>
 8003c6a:	4605      	mov	r5, r0
 8003c6c:	f7fc fc76 	bl	800055c <__aeabi_i2d>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c78:	a363      	add	r3, pc, #396	@ (adr r3, 8003e08 <__ieee754_rem_pio2+0x2e0>)
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	f7fc fcd7 	bl	8000630 <__aeabi_dmul>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4630      	mov	r0, r6
 8003c88:	4639      	mov	r1, r7
 8003c8a:	f7fc fb19 	bl	80002c0 <__aeabi_dsub>
 8003c8e:	a360      	add	r3, pc, #384	@ (adr r3, 8003e10 <__ieee754_rem_pio2+0x2e8>)
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	4682      	mov	sl, r0
 8003c96:	468b      	mov	fp, r1
 8003c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c9c:	f7fc fcc8 	bl	8000630 <__aeabi_dmul>
 8003ca0:	2d1f      	cmp	r5, #31
 8003ca2:	4606      	mov	r6, r0
 8003ca4:	460f      	mov	r7, r1
 8003ca6:	dc0c      	bgt.n	8003cc2 <__ieee754_rem_pio2+0x19a>
 8003ca8:	4b6a      	ldr	r3, [pc, #424]	@ (8003e54 <__ieee754_rem_pio2+0x32c>)
 8003caa:	1e6a      	subs	r2, r5, #1
 8003cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb0:	4543      	cmp	r3, r8
 8003cb2:	d006      	beq.n	8003cc2 <__ieee754_rem_pio2+0x19a>
 8003cb4:	4632      	mov	r2, r6
 8003cb6:	463b      	mov	r3, r7
 8003cb8:	4650      	mov	r0, sl
 8003cba:	4659      	mov	r1, fp
 8003cbc:	f7fc fb00 	bl	80002c0 <__aeabi_dsub>
 8003cc0:	e00e      	b.n	8003ce0 <__ieee754_rem_pio2+0x1b8>
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	4632      	mov	r2, r6
 8003cc6:	4650      	mov	r0, sl
 8003cc8:	4659      	mov	r1, fp
 8003cca:	f7fc faf9 	bl	80002c0 <__aeabi_dsub>
 8003cce:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003cd2:	9305      	str	r3, [sp, #20]
 8003cd4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003cd8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	dc02      	bgt.n	8003ce6 <__ieee754_rem_pio2+0x1be>
 8003ce0:	e9c4 0100 	strd	r0, r1, [r4]
 8003ce4:	e039      	b.n	8003d5a <__ieee754_rem_pio2+0x232>
 8003ce6:	a34c      	add	r3, pc, #304	@ (adr r3, 8003e18 <__ieee754_rem_pio2+0x2f0>)
 8003ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cf0:	f7fc fc9e 	bl	8000630 <__aeabi_dmul>
 8003cf4:	4606      	mov	r6, r0
 8003cf6:	460f      	mov	r7, r1
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4650      	mov	r0, sl
 8003cfe:	4659      	mov	r1, fp
 8003d00:	f7fc fade 	bl	80002c0 <__aeabi_dsub>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4680      	mov	r8, r0
 8003d0a:	4689      	mov	r9, r1
 8003d0c:	4650      	mov	r0, sl
 8003d0e:	4659      	mov	r1, fp
 8003d10:	f7fc fad6 	bl	80002c0 <__aeabi_dsub>
 8003d14:	4632      	mov	r2, r6
 8003d16:	463b      	mov	r3, r7
 8003d18:	f7fc fad2 	bl	80002c0 <__aeabi_dsub>
 8003d1c:	a340      	add	r3, pc, #256	@ (adr r3, 8003e20 <__ieee754_rem_pio2+0x2f8>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	4606      	mov	r6, r0
 8003d24:	460f      	mov	r7, r1
 8003d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d2a:	f7fc fc81 	bl	8000630 <__aeabi_dmul>
 8003d2e:	4632      	mov	r2, r6
 8003d30:	463b      	mov	r3, r7
 8003d32:	f7fc fac5 	bl	80002c0 <__aeabi_dsub>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4606      	mov	r6, r0
 8003d3c:	460f      	mov	r7, r1
 8003d3e:	4640      	mov	r0, r8
 8003d40:	4649      	mov	r1, r9
 8003d42:	f7fc fabd 	bl	80002c0 <__aeabi_dsub>
 8003d46:	9a05      	ldr	r2, [sp, #20]
 8003d48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b31      	cmp	r3, #49	@ 0x31
 8003d50:	dc20      	bgt.n	8003d94 <__ieee754_rem_pio2+0x26c>
 8003d52:	46c2      	mov	sl, r8
 8003d54:	46cb      	mov	fp, r9
 8003d56:	e9c4 0100 	strd	r0, r1, [r4]
 8003d5a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003d5e:	4650      	mov	r0, sl
 8003d60:	4642      	mov	r2, r8
 8003d62:	464b      	mov	r3, r9
 8003d64:	4659      	mov	r1, fp
 8003d66:	f7fc faab 	bl	80002c0 <__aeabi_dsub>
 8003d6a:	463b      	mov	r3, r7
 8003d6c:	4632      	mov	r2, r6
 8003d6e:	f7fc faa7 	bl	80002c0 <__aeabi_dsub>
 8003d72:	9b04      	ldr	r3, [sp, #16]
 8003d74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f6bf af10 	bge.w	8003b9e <__ieee754_rem_pio2+0x76>
 8003d7e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8003d82:	6063      	str	r3, [r4, #4]
 8003d84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003d88:	f8c4 8000 	str.w	r8, [r4]
 8003d8c:	60a0      	str	r0, [r4, #8]
 8003d8e:	60e3      	str	r3, [r4, #12]
 8003d90:	426d      	negs	r5, r5
 8003d92:	e704      	b.n	8003b9e <__ieee754_rem_pio2+0x76>
 8003d94:	a326      	add	r3, pc, #152	@ (adr r3, 8003e30 <__ieee754_rem_pio2+0x308>)
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d9e:	f7fc fc47 	bl	8000630 <__aeabi_dmul>
 8003da2:	4606      	mov	r6, r0
 8003da4:	460f      	mov	r7, r1
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4640      	mov	r0, r8
 8003dac:	4649      	mov	r1, r9
 8003dae:	f7fc fa87 	bl	80002c0 <__aeabi_dsub>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4682      	mov	sl, r0
 8003db8:	468b      	mov	fp, r1
 8003dba:	4640      	mov	r0, r8
 8003dbc:	4649      	mov	r1, r9
 8003dbe:	f7fc fa7f 	bl	80002c0 <__aeabi_dsub>
 8003dc2:	4632      	mov	r2, r6
 8003dc4:	463b      	mov	r3, r7
 8003dc6:	f7fc fa7b 	bl	80002c0 <__aeabi_dsub>
 8003dca:	a31b      	add	r3, pc, #108	@ (adr r3, 8003e38 <__ieee754_rem_pio2+0x310>)
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	4606      	mov	r6, r0
 8003dd2:	460f      	mov	r7, r1
 8003dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dd8:	f7fc fc2a 	bl	8000630 <__aeabi_dmul>
 8003ddc:	4632      	mov	r2, r6
 8003dde:	463b      	mov	r3, r7
 8003de0:	f7fc fa6e 	bl	80002c0 <__aeabi_dsub>
 8003de4:	4606      	mov	r6, r0
 8003de6:	460f      	mov	r7, r1
 8003de8:	e764      	b.n	8003cb4 <__ieee754_rem_pio2+0x18c>
 8003dea:	4b1b      	ldr	r3, [pc, #108]	@ (8003e58 <__ieee754_rem_pio2+0x330>)
 8003dec:	4598      	cmp	r8, r3
 8003dee:	d935      	bls.n	8003e5c <__ieee754_rem_pio2+0x334>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	f7fc fa64 	bl	80002c0 <__aeabi_dsub>
 8003df8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003dfc:	e9c4 0100 	strd	r0, r1, [r4]
 8003e00:	e6a4      	b.n	8003b4c <__ieee754_rem_pio2+0x24>
 8003e02:	bf00      	nop
 8003e04:	f3af 8000 	nop.w
 8003e08:	54400000 	.word	0x54400000
 8003e0c:	3ff921fb 	.word	0x3ff921fb
 8003e10:	1a626331 	.word	0x1a626331
 8003e14:	3dd0b461 	.word	0x3dd0b461
 8003e18:	1a600000 	.word	0x1a600000
 8003e1c:	3dd0b461 	.word	0x3dd0b461
 8003e20:	2e037073 	.word	0x2e037073
 8003e24:	3ba3198a 	.word	0x3ba3198a
 8003e28:	6dc9c883 	.word	0x6dc9c883
 8003e2c:	3fe45f30 	.word	0x3fe45f30
 8003e30:	2e000000 	.word	0x2e000000
 8003e34:	3ba3198a 	.word	0x3ba3198a
 8003e38:	252049c1 	.word	0x252049c1
 8003e3c:	397b839a 	.word	0x397b839a
 8003e40:	3fe921fb 	.word	0x3fe921fb
 8003e44:	4002d97b 	.word	0x4002d97b
 8003e48:	3ff921fb 	.word	0x3ff921fb
 8003e4c:	413921fb 	.word	0x413921fb
 8003e50:	3fe00000 	.word	0x3fe00000
 8003e54:	080047a0 	.word	0x080047a0
 8003e58:	7fefffff 	.word	0x7fefffff
 8003e5c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003e60:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8003e64:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003e68:	460f      	mov	r7, r1
 8003e6a:	f7fc fe7b 	bl	8000b64 <__aeabi_d2iz>
 8003e6e:	f7fc fb75 	bl	800055c <__aeabi_i2d>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4630      	mov	r0, r6
 8003e78:	4639      	mov	r1, r7
 8003e7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e7e:	f7fc fa1f 	bl	80002c0 <__aeabi_dsub>
 8003e82:	2200      	movs	r2, #0
 8003e84:	4b21      	ldr	r3, [pc, #132]	@ (8003f0c <__ieee754_rem_pio2+0x3e4>)
 8003e86:	f7fc fbd3 	bl	8000630 <__aeabi_dmul>
 8003e8a:	460f      	mov	r7, r1
 8003e8c:	4606      	mov	r6, r0
 8003e8e:	f7fc fe69 	bl	8000b64 <__aeabi_d2iz>
 8003e92:	f7fc fb63 	bl	800055c <__aeabi_i2d>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	4639      	mov	r1, r7
 8003e9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003ea2:	f7fc fa0d 	bl	80002c0 <__aeabi_dsub>
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	4b18      	ldr	r3, [pc, #96]	@ (8003f0c <__ieee754_rem_pio2+0x3e4>)
 8003eaa:	f7fc fbc1 	bl	8000630 <__aeabi_dmul>
 8003eae:	f04f 0803 	mov.w	r8, #3
 8003eb2:	2600      	movs	r6, #0
 8003eb4:	2700      	movs	r7, #0
 8003eb6:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8003eba:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8003ebe:	4632      	mov	r2, r6
 8003ec0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003ec4:	463b      	mov	r3, r7
 8003ec6:	46c2      	mov	sl, r8
 8003ec8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003ecc:	f7fc fe18 	bl	8000b00 <__aeabi_dcmpeq>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d1f4      	bne.n	8003ebe <__ieee754_rem_pio2+0x396>
 8003ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f10 <__ieee754_rem_pio2+0x3e8>)
 8003ed6:	462a      	mov	r2, r5
 8003ed8:	9301      	str	r3, [sp, #4]
 8003eda:	2302      	movs	r3, #2
 8003edc:	4621      	mov	r1, r4
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	a806      	add	r0, sp, #24
 8003ee2:	4653      	mov	r3, sl
 8003ee4:	f000 f81a 	bl	8003f1c <__kernel_rem_pio2>
 8003ee8:	9b04      	ldr	r3, [sp, #16]
 8003eea:	4605      	mov	r5, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f6bf ae56 	bge.w	8003b9e <__ieee754_rem_pio2+0x76>
 8003ef2:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003ef6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003efa:	e9c4 2300 	strd	r2, r3, [r4]
 8003efe:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003f02:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003f06:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003f0a:	e741      	b.n	8003d90 <__ieee754_rem_pio2+0x268>
 8003f0c:	41700000 	.word	0x41700000
 8003f10:	08004820 	.word	0x08004820

08003f14 <fabs>:
 8003f14:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4770      	bx	lr

08003f1c <__kernel_rem_pio2>:
 8003f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f20:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8003f24:	9308      	str	r3, [sp, #32]
 8003f26:	9104      	str	r1, [sp, #16]
 8003f28:	4bba      	ldr	r3, [pc, #744]	@ (8004214 <__kernel_rem_pio2+0x2f8>)
 8003f2a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8003f2c:	f112 0f14 	cmn.w	r2, #20
 8003f30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f34:	bfa8      	it	ge
 8003f36:	1ed4      	subge	r4, r2, #3
 8003f38:	9302      	str	r3, [sp, #8]
 8003f3a:	9b08      	ldr	r3, [sp, #32]
 8003f3c:	bfb8      	it	lt
 8003f3e:	2400      	movlt	r4, #0
 8003f40:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003f44:	9306      	str	r3, [sp, #24]
 8003f46:	bfa4      	itt	ge
 8003f48:	2318      	movge	r3, #24
 8003f4a:	fb94 f4f3 	sdivge	r4, r4, r3
 8003f4e:	f06f 0317 	mvn.w	r3, #23
 8003f52:	fb04 3303 	mla	r3, r4, r3, r3
 8003f56:	eb03 0a02 	add.w	sl, r3, r2
 8003f5a:	9a06      	ldr	r2, [sp, #24]
 8003f5c:	9b02      	ldr	r3, [sp, #8]
 8003f5e:	1aa7      	subs	r7, r4, r2
 8003f60:	eb03 0802 	add.w	r8, r3, r2
 8003f64:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8003f66:	2500      	movs	r5, #0
 8003f68:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2300      	movs	r3, #0
 8003f70:	9009      	str	r0, [sp, #36]	@ 0x24
 8003f72:	ae20      	add	r6, sp, #128	@ 0x80
 8003f74:	4545      	cmp	r5, r8
 8003f76:	dd13      	ble.n	8003fa0 <__kernel_rem_pio2+0x84>
 8003f78:	2700      	movs	r7, #0
 8003f7a:	9a08      	ldr	r2, [sp, #32]
 8003f7c:	ab20      	add	r3, sp, #128	@ 0x80
 8003f7e:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8003f82:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8003f86:	9b02      	ldr	r3, [sp, #8]
 8003f88:	429f      	cmp	r7, r3
 8003f8a:	dc33      	bgt.n	8003ff4 <__kernel_rem_pio2+0xd8>
 8003f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f1a3 0908 	sub.w	r9, r3, #8
 8003f94:	2300      	movs	r3, #0
 8003f96:	46a8      	mov	r8, r5
 8003f98:	2600      	movs	r6, #0
 8003f9a:	e9cd 2300 	strd	r2, r3, [sp]
 8003f9e:	e01f      	b.n	8003fe0 <__kernel_rem_pio2+0xc4>
 8003fa0:	42ef      	cmn	r7, r5
 8003fa2:	d40b      	bmi.n	8003fbc <__kernel_rem_pio2+0xa0>
 8003fa4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003fa8:	e9cd 2300 	strd	r2, r3, [sp]
 8003fac:	f7fc fad6 	bl	800055c <__aeabi_i2d>
 8003fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003fb4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003fb8:	3501      	adds	r5, #1
 8003fba:	e7db      	b.n	8003f74 <__kernel_rem_pio2+0x58>
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	e7f8      	b.n	8003fb4 <__kernel_rem_pio2+0x98>
 8003fc2:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8003fc6:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8003fca:	f7fc fb31 	bl	8000630 <__aeabi_dmul>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fd6:	f7fc f975 	bl	80002c4 <__adddf3>
 8003fda:	e9cd 0100 	strd	r0, r1, [sp]
 8003fde:	3601      	adds	r6, #1
 8003fe0:	9b06      	ldr	r3, [sp, #24]
 8003fe2:	429e      	cmp	r6, r3
 8003fe4:	dded      	ble.n	8003fc2 <__kernel_rem_pio2+0xa6>
 8003fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003fea:	3701      	adds	r7, #1
 8003fec:	e8eb 2302 	strd	r2, r3, [fp], #8
 8003ff0:	3508      	adds	r5, #8
 8003ff2:	e7c8      	b.n	8003f86 <__kernel_rem_pio2+0x6a>
 8003ff4:	9b02      	ldr	r3, [sp, #8]
 8003ff6:	aa0c      	add	r2, sp, #48	@ 0x30
 8003ff8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003ffc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ffe:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8004000:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004004:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004008:	930a      	str	r3, [sp, #40]	@ 0x28
 800400a:	ab98      	add	r3, sp, #608	@ 0x260
 800400c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004010:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 8004014:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004016:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800401a:	ae0c      	add	r6, sp, #48	@ 0x30
 800401c:	4699      	mov	r9, r3
 800401e:	46b0      	mov	r8, r6
 8004020:	465f      	mov	r7, fp
 8004022:	9307      	str	r3, [sp, #28]
 8004024:	2f00      	cmp	r7, #0
 8004026:	dc71      	bgt.n	800410c <__kernel_rem_pio2+0x1f0>
 8004028:	4652      	mov	r2, sl
 800402a:	4620      	mov	r0, r4
 800402c:	4629      	mov	r1, r5
 800402e:	f000 fa97 	bl	8004560 <scalbn>
 8004032:	2200      	movs	r2, #0
 8004034:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004038:	4604      	mov	r4, r0
 800403a:	460d      	mov	r5, r1
 800403c:	f7fc faf8 	bl	8000630 <__aeabi_dmul>
 8004040:	f000 fb02 	bl	8004648 <floor>
 8004044:	2200      	movs	r2, #0
 8004046:	4b74      	ldr	r3, [pc, #464]	@ (8004218 <__kernel_rem_pio2+0x2fc>)
 8004048:	f7fc faf2 	bl	8000630 <__aeabi_dmul>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4620      	mov	r0, r4
 8004052:	4629      	mov	r1, r5
 8004054:	f7fc f934 	bl	80002c0 <__aeabi_dsub>
 8004058:	460d      	mov	r5, r1
 800405a:	4604      	mov	r4, r0
 800405c:	f7fc fd82 	bl	8000b64 <__aeabi_d2iz>
 8004060:	9005      	str	r0, [sp, #20]
 8004062:	f7fc fa7b 	bl	800055c <__aeabi_i2d>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4620      	mov	r0, r4
 800406c:	4629      	mov	r1, r5
 800406e:	f7fc f927 	bl	80002c0 <__aeabi_dsub>
 8004072:	f1ba 0f00 	cmp.w	sl, #0
 8004076:	4680      	mov	r8, r0
 8004078:	4689      	mov	r9, r1
 800407a:	dd6d      	ble.n	8004158 <__kernel_rem_pio2+0x23c>
 800407c:	f10b 31ff 	add.w	r1, fp, #4294967295	@ 0xffffffff
 8004080:	ab0c      	add	r3, sp, #48	@ 0x30
 8004082:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004086:	9c05      	ldr	r4, [sp, #20]
 8004088:	f1ca 0018 	rsb	r0, sl, #24
 800408c:	fa43 f200 	asr.w	r2, r3, r0
 8004090:	4414      	add	r4, r2
 8004092:	4082      	lsls	r2, r0
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	aa0c      	add	r2, sp, #48	@ 0x30
 8004098:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800409c:	f1ca 0217 	rsb	r2, sl, #23
 80040a0:	9405      	str	r4, [sp, #20]
 80040a2:	4113      	asrs	r3, r2
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	9b00      	ldr	r3, [sp, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	dd64      	ble.n	8004176 <__kernel_rem_pio2+0x25a>
 80040ac:	2200      	movs	r2, #0
 80040ae:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80040b2:	4614      	mov	r4, r2
 80040b4:	9b05      	ldr	r3, [sp, #20]
 80040b6:	3301      	adds	r3, #1
 80040b8:	9305      	str	r3, [sp, #20]
 80040ba:	4593      	cmp	fp, r2
 80040bc:	f300 809d 	bgt.w	80041fa <__kernel_rem_pio2+0x2de>
 80040c0:	f1ba 0f00 	cmp.w	sl, #0
 80040c4:	dd07      	ble.n	80040d6 <__kernel_rem_pio2+0x1ba>
 80040c6:	f1ba 0f01 	cmp.w	sl, #1
 80040ca:	f000 80b3 	beq.w	8004234 <__kernel_rem_pio2+0x318>
 80040ce:	f1ba 0f02 	cmp.w	sl, #2
 80040d2:	f000 80ba 	beq.w	800424a <__kernel_rem_pio2+0x32e>
 80040d6:	9b00      	ldr	r3, [sp, #0]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d14c      	bne.n	8004176 <__kernel_rem_pio2+0x25a>
 80040dc:	4642      	mov	r2, r8
 80040de:	464b      	mov	r3, r9
 80040e0:	2000      	movs	r0, #0
 80040e2:	494e      	ldr	r1, [pc, #312]	@ (800421c <__kernel_rem_pio2+0x300>)
 80040e4:	f7fc f8ec 	bl	80002c0 <__aeabi_dsub>
 80040e8:	4680      	mov	r8, r0
 80040ea:	4689      	mov	r9, r1
 80040ec:	2c00      	cmp	r4, #0
 80040ee:	d042      	beq.n	8004176 <__kernel_rem_pio2+0x25a>
 80040f0:	4652      	mov	r2, sl
 80040f2:	2000      	movs	r0, #0
 80040f4:	4949      	ldr	r1, [pc, #292]	@ (800421c <__kernel_rem_pio2+0x300>)
 80040f6:	f000 fa33 	bl	8004560 <scalbn>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4640      	mov	r0, r8
 8004100:	4649      	mov	r1, r9
 8004102:	f7fc f8dd 	bl	80002c0 <__aeabi_dsub>
 8004106:	4680      	mov	r8, r0
 8004108:	4689      	mov	r9, r1
 800410a:	e034      	b.n	8004176 <__kernel_rem_pio2+0x25a>
 800410c:	2200      	movs	r2, #0
 800410e:	4b44      	ldr	r3, [pc, #272]	@ (8004220 <__kernel_rem_pio2+0x304>)
 8004110:	4620      	mov	r0, r4
 8004112:	4629      	mov	r1, r5
 8004114:	f7fc fa8c 	bl	8000630 <__aeabi_dmul>
 8004118:	f7fc fd24 	bl	8000b64 <__aeabi_d2iz>
 800411c:	f7fc fa1e 	bl	800055c <__aeabi_i2d>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	e9cd 2300 	strd	r2, r3, [sp]
 8004128:	2200      	movs	r2, #0
 800412a:	4b3e      	ldr	r3, [pc, #248]	@ (8004224 <__kernel_rem_pio2+0x308>)
 800412c:	f7fc fa80 	bl	8000630 <__aeabi_dmul>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4620      	mov	r0, r4
 8004136:	4629      	mov	r1, r5
 8004138:	f7fc f8c2 	bl	80002c0 <__aeabi_dsub>
 800413c:	f7fc fd12 	bl	8000b64 <__aeabi_d2iz>
 8004140:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 8004144:	f848 0b04 	str.w	r0, [r8], #4
 8004148:	e9dd 0100 	ldrd	r0, r1, [sp]
 800414c:	f7fc f8ba 	bl	80002c4 <__adddf3>
 8004150:	3f01      	subs	r7, #1
 8004152:	4604      	mov	r4, r0
 8004154:	460d      	mov	r5, r1
 8004156:	e765      	b.n	8004024 <__kernel_rem_pio2+0x108>
 8004158:	d106      	bne.n	8004168 <__kernel_rem_pio2+0x24c>
 800415a:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 800415e:	aa0c      	add	r2, sp, #48	@ 0x30
 8004160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004164:	15db      	asrs	r3, r3, #23
 8004166:	e79d      	b.n	80040a4 <__kernel_rem_pio2+0x188>
 8004168:	2200      	movs	r2, #0
 800416a:	4b2f      	ldr	r3, [pc, #188]	@ (8004228 <__kernel_rem_pio2+0x30c>)
 800416c:	f7fc fce6 	bl	8000b3c <__aeabi_dcmpge>
 8004170:	2800      	cmp	r0, #0
 8004172:	d13f      	bne.n	80041f4 <__kernel_rem_pio2+0x2d8>
 8004174:	9000      	str	r0, [sp, #0]
 8004176:	2200      	movs	r2, #0
 8004178:	2300      	movs	r3, #0
 800417a:	4640      	mov	r0, r8
 800417c:	4649      	mov	r1, r9
 800417e:	f7fc fcbf 	bl	8000b00 <__aeabi_dcmpeq>
 8004182:	2800      	cmp	r0, #0
 8004184:	f000 80b0 	beq.w	80042e8 <__kernel_rem_pio2+0x3cc>
 8004188:	2200      	movs	r2, #0
 800418a:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 800418e:	9902      	ldr	r1, [sp, #8]
 8004190:	428b      	cmp	r3, r1
 8004192:	da62      	bge.n	800425a <__kernel_rem_pio2+0x33e>
 8004194:	2a00      	cmp	r2, #0
 8004196:	d077      	beq.n	8004288 <__kernel_rem_pio2+0x36c>
 8004198:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800419c:	ab0c      	add	r3, sp, #48	@ 0x30
 800419e:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80041a2:	f1aa 0a18 	sub.w	sl, sl, #24
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f6      	beq.n	8004198 <__kernel_rem_pio2+0x27c>
 80041aa:	4652      	mov	r2, sl
 80041ac:	2000      	movs	r0, #0
 80041ae:	491b      	ldr	r1, [pc, #108]	@ (800421c <__kernel_rem_pio2+0x300>)
 80041b0:	f000 f9d6 	bl	8004560 <scalbn>
 80041b4:	465d      	mov	r5, fp
 80041b6:	4606      	mov	r6, r0
 80041b8:	460f      	mov	r7, r1
 80041ba:	f04f 0900 	mov.w	r9, #0
 80041be:	ab70      	add	r3, sp, #448	@ 0x1c0
 80041c0:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004220 <__kernel_rem_pio2+0x304>
 80041c4:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 80041c8:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 80041cc:	2d00      	cmp	r5, #0
 80041ce:	f280 80c1 	bge.w	8004354 <__kernel_rem_pio2+0x438>
 80041d2:	465d      	mov	r5, fp
 80041d4:	2d00      	cmp	r5, #0
 80041d6:	f2c0 80f1 	blt.w	80043bc <__kernel_rem_pio2+0x4a0>
 80041da:	4b14      	ldr	r3, [pc, #80]	@ (800422c <__kernel_rem_pio2+0x310>)
 80041dc:	f04f 0900 	mov.w	r9, #0
 80041e0:	9306      	str	r3, [sp, #24]
 80041e2:	ab70      	add	r3, sp, #448	@ 0x1c0
 80041e4:	f04f 0a00 	mov.w	sl, #0
 80041e8:	2700      	movs	r7, #0
 80041ea:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 80041ee:	ebab 0605 	sub.w	r6, fp, r5
 80041f2:	e0d7      	b.n	80043a4 <__kernel_rem_pio2+0x488>
 80041f4:	2302      	movs	r3, #2
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	e758      	b.n	80040ac <__kernel_rem_pio2+0x190>
 80041fa:	f856 3b04 	ldr.w	r3, [r6], #4
 80041fe:	b9bc      	cbnz	r4, 8004230 <__kernel_rem_pio2+0x314>
 8004200:	b123      	cbz	r3, 800420c <__kernel_rem_pio2+0x2f0>
 8004202:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004206:	f846 3c04 	str.w	r3, [r6, #-4]
 800420a:	2301      	movs	r3, #1
 800420c:	461c      	mov	r4, r3
 800420e:	3201      	adds	r2, #1
 8004210:	e753      	b.n	80040ba <__kernel_rem_pio2+0x19e>
 8004212:	bf00      	nop
 8004214:	08004968 	.word	0x08004968
 8004218:	40200000 	.word	0x40200000
 800421c:	3ff00000 	.word	0x3ff00000
 8004220:	3e700000 	.word	0x3e700000
 8004224:	41700000 	.word	0x41700000
 8004228:	3fe00000 	.word	0x3fe00000
 800422c:	08004928 	.word	0x08004928
 8004230:	1acb      	subs	r3, r1, r3
 8004232:	e7e8      	b.n	8004206 <__kernel_rem_pio2+0x2ea>
 8004234:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 8004238:	ab0c      	add	r3, sp, #48	@ 0x30
 800423a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800423e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004242:	a90c      	add	r1, sp, #48	@ 0x30
 8004244:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004248:	e745      	b.n	80040d6 <__kernel_rem_pio2+0x1ba>
 800424a:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 800424e:	ab0c      	add	r3, sp, #48	@ 0x30
 8004250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004254:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004258:	e7f3      	b.n	8004242 <__kernel_rem_pio2+0x326>
 800425a:	a90c      	add	r1, sp, #48	@ 0x30
 800425c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004260:	3b01      	subs	r3, #1
 8004262:	430a      	orrs	r2, r1
 8004264:	e793      	b.n	800418e <__kernel_rem_pio2+0x272>
 8004266:	3401      	adds	r4, #1
 8004268:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800426c:	2a00      	cmp	r2, #0
 800426e:	d0fa      	beq.n	8004266 <__kernel_rem_pio2+0x34a>
 8004270:	9b08      	ldr	r3, [sp, #32]
 8004272:	aa20      	add	r2, sp, #128	@ 0x80
 8004274:	445b      	add	r3, fp
 8004276:	f10b 0801 	add.w	r8, fp, #1
 800427a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800427e:	445c      	add	r4, fp
 8004280:	4544      	cmp	r4, r8
 8004282:	da04      	bge.n	800428e <__kernel_rem_pio2+0x372>
 8004284:	46a3      	mov	fp, r4
 8004286:	e6c0      	b.n	800400a <__kernel_rem_pio2+0xee>
 8004288:	2401      	movs	r4, #1
 800428a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800428c:	e7ec      	b.n	8004268 <__kernel_rem_pio2+0x34c>
 800428e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004290:	46ab      	mov	fp, r5
 8004292:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004296:	f7fc f961 	bl	800055c <__aeabi_i2d>
 800429a:	f04f 0900 	mov.w	r9, #0
 800429e:	2600      	movs	r6, #0
 80042a0:	2700      	movs	r7, #0
 80042a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042a4:	e9c5 0100 	strd	r0, r1, [r5]
 80042a8:	3b08      	subs	r3, #8
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	9b06      	ldr	r3, [sp, #24]
 80042ae:	4599      	cmp	r9, r3
 80042b0:	dd07      	ble.n	80042c2 <__kernel_rem_pio2+0x3a6>
 80042b2:	9b07      	ldr	r3, [sp, #28]
 80042b4:	f108 0801 	add.w	r8, r8, #1
 80042b8:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 80042bc:	3508      	adds	r5, #8
 80042be:	9307      	str	r3, [sp, #28]
 80042c0:	e7de      	b.n	8004280 <__kernel_rem_pio2+0x364>
 80042c2:	9900      	ldr	r1, [sp, #0]
 80042c4:	f109 0901 	add.w	r9, r9, #1
 80042c8:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80042cc:	9100      	str	r1, [sp, #0]
 80042ce:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 80042d2:	f7fc f9ad 	bl	8000630 <__aeabi_dmul>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4630      	mov	r0, r6
 80042dc:	4639      	mov	r1, r7
 80042de:	f7fb fff1 	bl	80002c4 <__adddf3>
 80042e2:	4606      	mov	r6, r0
 80042e4:	460f      	mov	r7, r1
 80042e6:	e7e1      	b.n	80042ac <__kernel_rem_pio2+0x390>
 80042e8:	f1ca 0200 	rsb	r2, sl, #0
 80042ec:	4640      	mov	r0, r8
 80042ee:	4649      	mov	r1, r9
 80042f0:	f000 f936 	bl	8004560 <scalbn>
 80042f4:	2200      	movs	r2, #0
 80042f6:	4b97      	ldr	r3, [pc, #604]	@ (8004554 <__kernel_rem_pio2+0x638>)
 80042f8:	4604      	mov	r4, r0
 80042fa:	460d      	mov	r5, r1
 80042fc:	f7fc fc1e 	bl	8000b3c <__aeabi_dcmpge>
 8004300:	b300      	cbz	r0, 8004344 <__kernel_rem_pio2+0x428>
 8004302:	2200      	movs	r2, #0
 8004304:	4b94      	ldr	r3, [pc, #592]	@ (8004558 <__kernel_rem_pio2+0x63c>)
 8004306:	4620      	mov	r0, r4
 8004308:	4629      	mov	r1, r5
 800430a:	f7fc f991 	bl	8000630 <__aeabi_dmul>
 800430e:	f7fc fc29 	bl	8000b64 <__aeabi_d2iz>
 8004312:	4606      	mov	r6, r0
 8004314:	f7fc f922 	bl	800055c <__aeabi_i2d>
 8004318:	2200      	movs	r2, #0
 800431a:	4b8e      	ldr	r3, [pc, #568]	@ (8004554 <__kernel_rem_pio2+0x638>)
 800431c:	f7fc f988 	bl	8000630 <__aeabi_dmul>
 8004320:	460b      	mov	r3, r1
 8004322:	4602      	mov	r2, r0
 8004324:	4629      	mov	r1, r5
 8004326:	4620      	mov	r0, r4
 8004328:	f7fb ffca 	bl	80002c0 <__aeabi_dsub>
 800432c:	f7fc fc1a 	bl	8000b64 <__aeabi_d2iz>
 8004330:	ab0c      	add	r3, sp, #48	@ 0x30
 8004332:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8004336:	f10b 0b01 	add.w	fp, fp, #1
 800433a:	f10a 0a18 	add.w	sl, sl, #24
 800433e:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8004342:	e732      	b.n	80041aa <__kernel_rem_pio2+0x28e>
 8004344:	4620      	mov	r0, r4
 8004346:	4629      	mov	r1, r5
 8004348:	f7fc fc0c 	bl	8000b64 <__aeabi_d2iz>
 800434c:	ab0c      	add	r3, sp, #48	@ 0x30
 800434e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8004352:	e72a      	b.n	80041aa <__kernel_rem_pio2+0x28e>
 8004354:	ab0c      	add	r3, sp, #48	@ 0x30
 8004356:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800435a:	f7fc f8ff 	bl	800055c <__aeabi_i2d>
 800435e:	4632      	mov	r2, r6
 8004360:	463b      	mov	r3, r7
 8004362:	f7fc f965 	bl	8000630 <__aeabi_dmul>
 8004366:	464a      	mov	r2, r9
 8004368:	e868 0102 	strd	r0, r1, [r8], #-8
 800436c:	4653      	mov	r3, sl
 800436e:	4630      	mov	r0, r6
 8004370:	4639      	mov	r1, r7
 8004372:	f7fc f95d 	bl	8000630 <__aeabi_dmul>
 8004376:	3d01      	subs	r5, #1
 8004378:	4606      	mov	r6, r0
 800437a:	460f      	mov	r7, r1
 800437c:	e726      	b.n	80041cc <__kernel_rem_pio2+0x2b0>
 800437e:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004382:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8004386:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800438a:	f8cd c018 	str.w	ip, [sp, #24]
 800438e:	f7fc f94f 	bl	8000630 <__aeabi_dmul>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4648      	mov	r0, r9
 8004398:	4651      	mov	r1, sl
 800439a:	f7fb ff93 	bl	80002c4 <__adddf3>
 800439e:	4681      	mov	r9, r0
 80043a0:	468a      	mov	sl, r1
 80043a2:	3701      	adds	r7, #1
 80043a4:	9b02      	ldr	r3, [sp, #8]
 80043a6:	429f      	cmp	r7, r3
 80043a8:	dc01      	bgt.n	80043ae <__kernel_rem_pio2+0x492>
 80043aa:	42b7      	cmp	r7, r6
 80043ac:	dde7      	ble.n	800437e <__kernel_rem_pio2+0x462>
 80043ae:	ab48      	add	r3, sp, #288	@ 0x120
 80043b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80043b4:	e9c6 9a00 	strd	r9, sl, [r6]
 80043b8:	3d01      	subs	r5, #1
 80043ba:	e70b      	b.n	80041d4 <__kernel_rem_pio2+0x2b8>
 80043bc:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80043be:	2b02      	cmp	r3, #2
 80043c0:	dc09      	bgt.n	80043d6 <__kernel_rem_pio2+0x4ba>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	dc2c      	bgt.n	8004420 <__kernel_rem_pio2+0x504>
 80043c6:	d04e      	beq.n	8004466 <__kernel_rem_pio2+0x54a>
 80043c8:	9b05      	ldr	r3, [sp, #20]
 80043ca:	f003 0007 	and.w	r0, r3, #7
 80043ce:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80043d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d6:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80043d8:	2b03      	cmp	r3, #3
 80043da:	d1f5      	bne.n	80043c8 <__kernel_rem_pio2+0x4ac>
 80043dc:	ab48      	add	r3, sp, #288	@ 0x120
 80043de:	441c      	add	r4, r3
 80043e0:	4625      	mov	r5, r4
 80043e2:	46da      	mov	sl, fp
 80043e4:	f1ba 0f00 	cmp.w	sl, #0
 80043e8:	dc63      	bgt.n	80044b2 <__kernel_rem_pio2+0x596>
 80043ea:	4625      	mov	r5, r4
 80043ec:	46da      	mov	sl, fp
 80043ee:	f1ba 0f01 	cmp.w	sl, #1
 80043f2:	dc7b      	bgt.n	80044ec <__kernel_rem_pio2+0x5d0>
 80043f4:	2000      	movs	r0, #0
 80043f6:	2100      	movs	r1, #0
 80043f8:	f1bb 0f01 	cmp.w	fp, #1
 80043fc:	f300 8093 	bgt.w	8004526 <__kernel_rem_pio2+0x60a>
 8004400:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8004404:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8004408:	9b00      	ldr	r3, [sp, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f040 8092 	bne.w	8004534 <__kernel_rem_pio2+0x618>
 8004410:	9b04      	ldr	r3, [sp, #16]
 8004412:	e9c3 5600 	strd	r5, r6, [r3]
 8004416:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800441a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800441e:	e7d3      	b.n	80043c8 <__kernel_rem_pio2+0x4ac>
 8004420:	465d      	mov	r5, fp
 8004422:	2000      	movs	r0, #0
 8004424:	2100      	movs	r1, #0
 8004426:	ab48      	add	r3, sp, #288	@ 0x120
 8004428:	441c      	add	r4, r3
 800442a:	2d00      	cmp	r5, #0
 800442c:	da32      	bge.n	8004494 <__kernel_rem_pio2+0x578>
 800442e:	9b00      	ldr	r3, [sp, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d035      	beq.n	80044a0 <__kernel_rem_pio2+0x584>
 8004434:	4602      	mov	r2, r0
 8004436:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800443a:	9c04      	ldr	r4, [sp, #16]
 800443c:	2501      	movs	r5, #1
 800443e:	e9c4 2300 	strd	r2, r3, [r4]
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800444a:	f7fb ff39 	bl	80002c0 <__aeabi_dsub>
 800444e:	ac48      	add	r4, sp, #288	@ 0x120
 8004450:	45ab      	cmp	fp, r5
 8004452:	da28      	bge.n	80044a6 <__kernel_rem_pio2+0x58a>
 8004454:	9b00      	ldr	r3, [sp, #0]
 8004456:	b113      	cbz	r3, 800445e <__kernel_rem_pio2+0x542>
 8004458:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800445c:	4619      	mov	r1, r3
 800445e:	9b04      	ldr	r3, [sp, #16]
 8004460:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004464:	e7b0      	b.n	80043c8 <__kernel_rem_pio2+0x4ac>
 8004466:	2000      	movs	r0, #0
 8004468:	2100      	movs	r1, #0
 800446a:	ab48      	add	r3, sp, #288	@ 0x120
 800446c:	441c      	add	r4, r3
 800446e:	f1bb 0f00 	cmp.w	fp, #0
 8004472:	da08      	bge.n	8004486 <__kernel_rem_pio2+0x56a>
 8004474:	9b00      	ldr	r3, [sp, #0]
 8004476:	b113      	cbz	r3, 800447e <__kernel_rem_pio2+0x562>
 8004478:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800447c:	4619      	mov	r1, r3
 800447e:	9b04      	ldr	r3, [sp, #16]
 8004480:	e9c3 0100 	strd	r0, r1, [r3]
 8004484:	e7a0      	b.n	80043c8 <__kernel_rem_pio2+0x4ac>
 8004486:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800448a:	f7fb ff1b 	bl	80002c4 <__adddf3>
 800448e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004492:	e7ec      	b.n	800446e <__kernel_rem_pio2+0x552>
 8004494:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8004498:	f7fb ff14 	bl	80002c4 <__adddf3>
 800449c:	3d01      	subs	r5, #1
 800449e:	e7c4      	b.n	800442a <__kernel_rem_pio2+0x50e>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	e7c9      	b.n	800443a <__kernel_rem_pio2+0x51e>
 80044a6:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 80044aa:	f7fb ff0b 	bl	80002c4 <__adddf3>
 80044ae:	3501      	adds	r5, #1
 80044b0:	e7ce      	b.n	8004450 <__kernel_rem_pio2+0x534>
 80044b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80044b6:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 80044ba:	4640      	mov	r0, r8
 80044bc:	4649      	mov	r1, r9
 80044be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044c2:	f7fb feff 	bl	80002c4 <__adddf3>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4606      	mov	r6, r0
 80044cc:	460f      	mov	r7, r1
 80044ce:	4640      	mov	r0, r8
 80044d0:	4649      	mov	r1, r9
 80044d2:	f7fb fef5 	bl	80002c0 <__aeabi_dsub>
 80044d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044da:	f7fb fef3 	bl	80002c4 <__adddf3>
 80044de:	e865 0102 	strd	r0, r1, [r5], #-8
 80044e2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80044e6:	e9c5 6700 	strd	r6, r7, [r5]
 80044ea:	e77b      	b.n	80043e4 <__kernel_rem_pio2+0x4c8>
 80044ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80044f0:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 80044f4:	4640      	mov	r0, r8
 80044f6:	4649      	mov	r1, r9
 80044f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044fc:	f7fb fee2 	bl	80002c4 <__adddf3>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4606      	mov	r6, r0
 8004506:	460f      	mov	r7, r1
 8004508:	4640      	mov	r0, r8
 800450a:	4649      	mov	r1, r9
 800450c:	f7fb fed8 	bl	80002c0 <__aeabi_dsub>
 8004510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004514:	f7fb fed6 	bl	80002c4 <__adddf3>
 8004518:	e865 0102 	strd	r0, r1, [r5], #-8
 800451c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004520:	e9c5 6700 	strd	r6, r7, [r5]
 8004524:	e763      	b.n	80043ee <__kernel_rem_pio2+0x4d2>
 8004526:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800452a:	f7fb fecb 	bl	80002c4 <__adddf3>
 800452e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004532:	e761      	b.n	80043f8 <__kernel_rem_pio2+0x4dc>
 8004534:	9b04      	ldr	r3, [sp, #16]
 8004536:	9a04      	ldr	r2, [sp, #16]
 8004538:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800453c:	601d      	str	r5, [r3, #0]
 800453e:	605c      	str	r4, [r3, #4]
 8004540:	609f      	str	r7, [r3, #8]
 8004542:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8004546:	60d3      	str	r3, [r2, #12]
 8004548:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800454c:	6110      	str	r0, [r2, #16]
 800454e:	6153      	str	r3, [r2, #20]
 8004550:	e73a      	b.n	80043c8 <__kernel_rem_pio2+0x4ac>
 8004552:	bf00      	nop
 8004554:	41700000 	.word	0x41700000
 8004558:	3e700000 	.word	0x3e700000
 800455c:	00000000 	.word	0x00000000

08004560 <scalbn>:
 8004560:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8004564:	4616      	mov	r6, r2
 8004566:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800456a:	4683      	mov	fp, r0
 800456c:	468c      	mov	ip, r1
 800456e:	460b      	mov	r3, r1
 8004570:	b982      	cbnz	r2, 8004594 <scalbn+0x34>
 8004572:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004576:	4303      	orrs	r3, r0
 8004578:	d035      	beq.n	80045e6 <scalbn+0x86>
 800457a:	4b2d      	ldr	r3, [pc, #180]	@ (8004630 <scalbn+0xd0>)
 800457c:	2200      	movs	r2, #0
 800457e:	f7fc f857 	bl	8000630 <__aeabi_dmul>
 8004582:	4b2c      	ldr	r3, [pc, #176]	@ (8004634 <scalbn+0xd4>)
 8004584:	4683      	mov	fp, r0
 8004586:	429e      	cmp	r6, r3
 8004588:	468c      	mov	ip, r1
 800458a:	da0d      	bge.n	80045a8 <scalbn+0x48>
 800458c:	a324      	add	r3, pc, #144	@ (adr r3, 8004620 <scalbn+0xc0>)
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	e019      	b.n	80045c8 <scalbn+0x68>
 8004594:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8004598:	42ba      	cmp	r2, r7
 800459a:	d109      	bne.n	80045b0 <scalbn+0x50>
 800459c:	4602      	mov	r2, r0
 800459e:	f7fb fe91 	bl	80002c4 <__adddf3>
 80045a2:	4683      	mov	fp, r0
 80045a4:	468c      	mov	ip, r1
 80045a6:	e01e      	b.n	80045e6 <scalbn+0x86>
 80045a8:	460b      	mov	r3, r1
 80045aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80045ae:	3a36      	subs	r2, #54	@ 0x36
 80045b0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80045b4:	428e      	cmp	r6, r1
 80045b6:	dd0a      	ble.n	80045ce <scalbn+0x6e>
 80045b8:	a31b      	add	r3, pc, #108	@ (adr r3, 8004628 <scalbn+0xc8>)
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	4665      	mov	r5, ip
 80045c0:	f363 051e 	bfi	r5, r3, #0, #31
 80045c4:	4629      	mov	r1, r5
 80045c6:	481c      	ldr	r0, [pc, #112]	@ (8004638 <scalbn+0xd8>)
 80045c8:	f7fc f832 	bl	8000630 <__aeabi_dmul>
 80045cc:	e7e9      	b.n	80045a2 <scalbn+0x42>
 80045ce:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80045d2:	4432      	add	r2, r6
 80045d4:	428a      	cmp	r2, r1
 80045d6:	dcef      	bgt.n	80045b8 <scalbn+0x58>
 80045d8:	2a00      	cmp	r2, #0
 80045da:	dd08      	ble.n	80045ee <scalbn+0x8e>
 80045dc:	f36f 531e 	bfc	r3, #20, #11
 80045e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80045e4:	46ac      	mov	ip, r5
 80045e6:	4658      	mov	r0, fp
 80045e8:	4661      	mov	r1, ip
 80045ea:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80045ee:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80045f2:	da09      	bge.n	8004608 <scalbn+0xa8>
 80045f4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80045f8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80045fc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8004600:	480e      	ldr	r0, [pc, #56]	@ (800463c <scalbn+0xdc>)
 8004602:	f041 011f 	orr.w	r1, r1, #31
 8004606:	e7c1      	b.n	800458c <scalbn+0x2c>
 8004608:	3236      	adds	r2, #54	@ 0x36
 800460a:	f36f 531e 	bfc	r3, #20, #11
 800460e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004612:	4658      	mov	r0, fp
 8004614:	4629      	mov	r1, r5
 8004616:	2200      	movs	r2, #0
 8004618:	4b09      	ldr	r3, [pc, #36]	@ (8004640 <scalbn+0xe0>)
 800461a:	e7d5      	b.n	80045c8 <scalbn+0x68>
 800461c:	f3af 8000 	nop.w
 8004620:	c2f8f359 	.word	0xc2f8f359
 8004624:	01a56e1f 	.word	0x01a56e1f
 8004628:	8800759c 	.word	0x8800759c
 800462c:	7e37e43c 	.word	0x7e37e43c
 8004630:	43500000 	.word	0x43500000
 8004634:	ffff3cb0 	.word	0xffff3cb0
 8004638:	8800759c 	.word	0x8800759c
 800463c:	c2f8f359 	.word	0xc2f8f359
 8004640:	3c900000 	.word	0x3c900000
 8004644:	00000000 	.word	0x00000000

08004648 <floor>:
 8004648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800464c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004650:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8004654:	2e13      	cmp	r6, #19
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	460c      	mov	r4, r1
 800465c:	4605      	mov	r5, r0
 800465e:	4680      	mov	r8, r0
 8004660:	dc35      	bgt.n	80046ce <floor+0x86>
 8004662:	2e00      	cmp	r6, #0
 8004664:	da17      	bge.n	8004696 <floor+0x4e>
 8004666:	a334      	add	r3, pc, #208	@ (adr r3, 8004738 <floor+0xf0>)
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f7fb fe2a 	bl	80002c4 <__adddf3>
 8004670:	2200      	movs	r2, #0
 8004672:	2300      	movs	r3, #0
 8004674:	f7fc fa6c 	bl	8000b50 <__aeabi_dcmpgt>
 8004678:	b150      	cbz	r0, 8004690 <floor+0x48>
 800467a:	2c00      	cmp	r4, #0
 800467c:	da57      	bge.n	800472e <floor+0xe6>
 800467e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004682:	432c      	orrs	r4, r5
 8004684:	2500      	movs	r5, #0
 8004686:	42ac      	cmp	r4, r5
 8004688:	4c2d      	ldr	r4, [pc, #180]	@ (8004740 <floor+0xf8>)
 800468a:	bf08      	it	eq
 800468c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004690:	4623      	mov	r3, r4
 8004692:	462a      	mov	r2, r5
 8004694:	e024      	b.n	80046e0 <floor+0x98>
 8004696:	4f2b      	ldr	r7, [pc, #172]	@ (8004744 <floor+0xfc>)
 8004698:	4137      	asrs	r7, r6
 800469a:	ea01 0c07 	and.w	ip, r1, r7
 800469e:	ea5c 0c00 	orrs.w	ip, ip, r0
 80046a2:	d01d      	beq.n	80046e0 <floor+0x98>
 80046a4:	a324      	add	r3, pc, #144	@ (adr r3, 8004738 <floor+0xf0>)
 80046a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046aa:	f7fb fe0b 	bl	80002c4 <__adddf3>
 80046ae:	2200      	movs	r2, #0
 80046b0:	2300      	movs	r3, #0
 80046b2:	f7fc fa4d 	bl	8000b50 <__aeabi_dcmpgt>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d0ea      	beq.n	8004690 <floor+0x48>
 80046ba:	2c00      	cmp	r4, #0
 80046bc:	bfbe      	ittt	lt
 80046be:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80046c2:	4133      	asrlt	r3, r6
 80046c4:	18e4      	addlt	r4, r4, r3
 80046c6:	2500      	movs	r5, #0
 80046c8:	ea24 0407 	bic.w	r4, r4, r7
 80046cc:	e7e0      	b.n	8004690 <floor+0x48>
 80046ce:	2e33      	cmp	r6, #51	@ 0x33
 80046d0:	dd0a      	ble.n	80046e8 <floor+0xa0>
 80046d2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80046d6:	d103      	bne.n	80046e0 <floor+0x98>
 80046d8:	f7fb fdf4 	bl	80002c4 <__adddf3>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4610      	mov	r0, r2
 80046e2:	4619      	mov	r1, r3
 80046e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80046ec:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 80046f0:	fa2c f707 	lsr.w	r7, ip, r7
 80046f4:	4207      	tst	r7, r0
 80046f6:	d0f3      	beq.n	80046e0 <floor+0x98>
 80046f8:	a30f      	add	r3, pc, #60	@ (adr r3, 8004738 <floor+0xf0>)
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	f7fb fde1 	bl	80002c4 <__adddf3>
 8004702:	2200      	movs	r2, #0
 8004704:	2300      	movs	r3, #0
 8004706:	f7fc fa23 	bl	8000b50 <__aeabi_dcmpgt>
 800470a:	2800      	cmp	r0, #0
 800470c:	d0c0      	beq.n	8004690 <floor+0x48>
 800470e:	2c00      	cmp	r4, #0
 8004710:	da0a      	bge.n	8004728 <floor+0xe0>
 8004712:	2e14      	cmp	r6, #20
 8004714:	d101      	bne.n	800471a <floor+0xd2>
 8004716:	3401      	adds	r4, #1
 8004718:	e006      	b.n	8004728 <floor+0xe0>
 800471a:	2301      	movs	r3, #1
 800471c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004720:	40b3      	lsls	r3, r6
 8004722:	441d      	add	r5, r3
 8004724:	4545      	cmp	r5, r8
 8004726:	d3f6      	bcc.n	8004716 <floor+0xce>
 8004728:	ea25 0507 	bic.w	r5, r5, r7
 800472c:	e7b0      	b.n	8004690 <floor+0x48>
 800472e:	2500      	movs	r5, #0
 8004730:	462c      	mov	r4, r5
 8004732:	e7ad      	b.n	8004690 <floor+0x48>
 8004734:	f3af 8000 	nop.w
 8004738:	8800759c 	.word	0x8800759c
 800473c:	7e37e43c 	.word	0x7e37e43c
 8004740:	bff00000 	.word	0xbff00000
 8004744:	000fffff 	.word	0x000fffff

08004748 <_init>:
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	bf00      	nop
 800474c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474e:	bc08      	pop	{r3}
 8004750:	469e      	mov	lr, r3
 8004752:	4770      	bx	lr

08004754 <_fini>:
 8004754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004756:	bf00      	nop
 8004758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475a:	bc08      	pop	{r3}
 800475c:	469e      	mov	lr, r3
 800475e:	4770      	bx	lr
